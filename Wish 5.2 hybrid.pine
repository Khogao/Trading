//@version=5
// Wyckoff-SMC Hybrid v5.2 - Patched & Upgraded
indicator("Wyckoff-SMC Hybrid [v5.2 Patched]", "WSH v5.2", overlay=true, max_labels_count=500, max_boxes_count=200)

// =============================================================================
// I. INPUTS
// =============================================================================
// --- 0. General Settings ---
style_group = "0. General Settings"
trading_style = input.string("Scalping", "Trading Style", options=["Day/Swing Trading", "Scalping"], group=style_group)
color_candles = input.bool(true, "Color Candles by Momentum (EMA21)?", group=style_group)

// --- 1. Wyckoff Core Engine ---
core_group = "1. Wyckoff Core Engine"
show_bg    = input.bool(true, title="Show Phase Background", group=core_group)
show_wyckoff_labels= input.bool(true, title="Show Event Labels (SC, SP..)", group=core_group)
// Use a const default; avoid depending on another input in defval
analysis_mode = input.string("Micro", "Analysis Mode", options=["Macro", "Micro"], group=core_group, tooltip="Macro: Logic Wyckoff đầy đủ.\nMicro: Logic tăng tốc dựa trên Sweep.")

// --- Parameter Presets based on Trading Style ---
is_scalping = trading_style == "Scalping"
vol_lookback_def = is_scalping ? 30 : 50
vol_mult_def     = is_scalping ? 1.8 : 2.2
range_mult_def   = is_scalping ? 1.6 : 2.0
pivot_len_def    = is_scalping ? 4 : 8
micro_range_len_def = is_scalping ? 40 : 100

// Use const defvals to satisfy compiler (user can still change the values)
vol_lookback   = input.int(30, "Volume Lookback", minval=10, group=core_group)
vol_mult       = input.float(1.8, "Volume Spike Multiplier", minval=1.0, step=0.1, group=core_group)
range_mult     = input.float(1.6, "Climax Candle Range Multiplier", minval=1.0, step=0.1, group=core_group)
atr_len        = input.int(14, "ATR Length", group=core_group)
micro_cooldown = input.int(5, "Micro Phase Cooldown (bars)", group=core_group, tooltip="Số nến tối thiểu một pha Micro phải tồn tại trước khi reset.")

// --- 2. POI & Structural ---
poi_struct_group = "2. POI & Structural"
show_kv_zones = input.bool(true, "Show Key Level (KV) Zones", group=poi_struct_group)
show_ob_zones = input.bool(true, "Show Order Block (OB) Zones", group=poi_struct_group)
show_sw_hl    = input.bool(true, "Show Strong/Weak Highs & Lows", group=poi_struct_group)
highlight_context_poi = input.bool(true, "Highlight Contextual POIs", group=poi_struct_group)
poi_extend_bars = input.int(100, "Extend POI (bars)", group=poi_struct_group)
poi_max_active_zones = input.int(10, "Max Active POI zones", group=poi_struct_group)
// Use const defval; prior dynamic default caused compile error
pivot_len  = input.int(4, "Pivot Lookback", minval=2, group=poi_struct_group)
kv_wick_mult  = is_scalping ? 1.0 : 1.2

// --- 3. Entry & Risk ---
entry_group = "3. Entry & Risk"
show_entries = input.bool(true, "Show Final Buy/Sell Entries", group=entry_group)
show_traps   = input.bool(true, "Show NS/ND Signals", group=entry_group)
entry_throttle = input.int(10, "Entry Signal Throttle (bars)", group=entry_group)
htf_confirm_tf = input.string("240", "HTF EMA Timeframe", group=entry_group, options=["60", "240", "D"])
use_momentum_filter = input.bool(true, "Use EMA21 Momentum Filter for Entry?", group=entry_group)
show_risk_levels = input.bool(false, "Show SL/TP Levels", group=entry_group)
sl_atr_mult  = input.float(1.5, "Stop Loss ATR Multiplier", group=entry_group, step=0.1)
tp1_atr_mult = input.float(2.0, "Take Profit 1 ATR Multiplier", group=entry_group, step=0.1)


// =============================================================================
// II. CORE LOGIC
// =============================================================================
// --- Data & State ---
vol_sma = ta.sma(volume, vol_lookback)
atr_val = ta.atr(atr_len)
ema21   = ta.ema(close, 21)

var int   phase = 0 // 0:Neutral, 1:TR, 2:Accum, 3:Distrib
var float tr_high = na
var float tr_low = na
var int tr_start_bar = na
var int last_event_bar = na
var int last_spring_bar = na
var int last_ut_bar = na
var int last_sos_bar = na
var int last_sow_bar = na
var float strong_high = na
var float strong_low = na
var box[]  box_array = array.new_box(0)
var bool[] box_is_bull_array = array.new_bool(0)
var int micro_last_event_bar = na

// --- Helper Functions ---
f_add_label(bar, price, txt, style, color, txt_color) =>
    if show_wyckoff_labels
        label.new(bar, price, txt, style=style, color=color, textcolor=txt_color, size=size.small)

// Removed f_reset_phase() to avoid mutating globals in a function
// ...existing code...

// --- Wyckoff Phase & Event Detection ---
if analysis_mode == "Macro"
    is_vol_spike = volume > vol_sma * vol_mult
    is_wide_range_bear = close < open and (open - close) > atr_val * range_mult
    is_wide_range_bull = close > open and (close - open) > atr_val * range_mult
    if phase == 0
        if is_wide_range_bear and is_vol_spike and low < ta.lowest(low, 20)[1]
            phase := 1
            tr_low := low
            tr_high := high
            tr_start_bar := bar_index
            last_event_bar := bar_index
            f_add_label(bar_index, low, "SC", label.style_label_up, color.new(color.red, 20), color.red)
        if is_wide_range_bull and is_vol_spike and high > ta.highest(high, 20)[1]
            phase := 1
            tr_high := high
            tr_low := low
            tr_start_bar := bar_index
            last_event_bar := bar_index
            f_add_label(bar_index, high, "BC", label.style_label_down, color.new(color.green, 20), color.green)
    if phase == 1
        tr_high := math.max(tr_high, high)
        tr_low := math.min(tr_low, low)
    if phase >= 1 and not na(tr_low)
        if low < tr_low and close > tr_low and bar_index > last_event_bar + 5
            phase := 2
            last_event_bar := bar_index
            last_spring_bar := bar_index
            f_add_label(bar_index, low, "SP", label.style_label_up, color.new(color.green, 20), color.green)
        if high > tr_high and close < tr_high and bar_index > last_event_bar + 5
            phase := 3
            last_event_bar := bar_index
            last_ut_bar := bar_index
            f_add_label(bar_index, high, "UT", label.style_label_down, color.new(color.red, 20), color.red)
        is_sos = close > tr_high and close > open and volume > vol_sma * 1.5
        is_sow = close < tr_low and close < open and volume > vol_sma * 1.5
        if is_sos and phase < 3
            strong_low := tr_low
            strong_high := na
            last_sos_bar := bar_index
            f_add_label(bar_index, high, "SOS", label.style_label_up, color.new(color.blue, 20), color.blue)
            // inline reset (do not clear last_sos_bar so OB can draw)
            phase := 0
            tr_high := na
            tr_low := na
            tr_start_bar := na
            last_event_bar := na
        if is_sow and phase < 2
            strong_high := tr_high
            strong_low := na
            last_sow_bar := bar_index
            f_add_label(bar_index, low, "SOW", label.style_label_down, color.new(color.purple, 20), color.purple)
            // inline reset (do not clear last_sow_bar so OB can draw)
            phase := 0
            tr_high := na
            tr_low := na
            tr_start_bar := na
            last_event_bar := na
else // "Micro" Mode
    micro_high = ta.highest(high, micro_range_len_def)[1]
    micro_low  = ta.lowest(low, micro_range_len_def)[1]
    is_sweep_low  = low < micro_low and close > micro_low
    is_sweep_high = high > micro_high and close < micro_high

    if is_sweep_low
        phase := 2
        last_spring_bar := bar_index
        micro_last_event_bar := bar_index
        f_add_label(bar_index, low, "μ-SP", label.style_label_up, color.new(color.green, 20), color.green)
    else if is_sweep_high
        phase := 3
        last_ut_bar := bar_index
        micro_last_event_bar := bar_index
        f_add_label(bar_index, high, "μ-UT", label.style_label_down, color.new(color.red, 20), color.red)
    else if phase > 0 and not (is_sweep_low or is_sweep_high)
        if not na(micro_last_event_bar) and bar_index - micro_last_event_bar < micro_cooldown
            phase := phase
        else
            phase := 0

// --- POI Drawing & Management ---
f_draw_poi_box(p_top, p_bottom, p_color, p_style, p_is_bull) =>
    is_contextual = (p_is_bull and phase == 2) or (not p_is_bull and phase == 3)
    final_color = highlight_context_poi and is_contextual ? p_color : color.new(color.gray, 70)
    b = box.new(bar_index[1], p_top, bar_index + poi_extend_bars, p_bottom, border_color=final_color, border_style=p_style, bgcolor=color.new(final_color, 85))
    array.push(box_array, b)
    array.push(box_is_bull_array, p_is_bull)
    if array.size(box_array) > poi_max_active_zones
        old_box = array.shift(box_array)
        array.shift(box_is_bull_array)
        box.delete(old_box)

// Evaluate ta.* on every bar and extract function calls from problematic scopes
kv_zone_len_local = is_scalping ? 3 : 5
spread = math.max(high - low, syminfo.mintick)
kv_lowest_prev = ta.lowest(low, kv_zone_len_local)[1]
kv_highest_prev = ta.highest(high, kv_zone_len_local)[1]
kv_cross_under = ta.crossunder(low, kv_lowest_prev)
kv_cross_over  = ta.crossover(high, kv_highest_prev)
kv_bull = kv_cross_under and close > open and (math.min(open, close) - low) / spread >= kv_wick_mult
kv_bear = kv_cross_over  and close < open and (high - math.max(open, close)) / spread >= kv_wick_mult
do_draw_kv_bull = show_kv_zones and bar_index > kv_zone_len_local and kv_bull
do_draw_kv_bear = show_kv_zones and bar_index > kv_zone_len_local and kv_bear

// Always call f_draw_poi_box, but only draw when flag is true
f_draw_poi_box(high[1], low[1], color.new(color.blue, 75), line.style_dashed, true)  // Bull KV zone
f_draw_poi_box(high[1], low[1], color.new(color.orange, 75), line.style_dashed, false) // Bear KV zone

// OB zones: compute indices first, then draw
int ob_bear_idx = na
if not na(last_sos_bar)
    last_bear_idx = -1
    for i = 1 to 20
        if i < last_sos_bar and close[last_sos_bar - i] < open[last_sos_bar - i]
            last_bear_idx := last_sos_bar - i
        else
            if last_bear_idx != -1
                break
    ob_bear_idx := last_bear_idx

int ob_bull_idx = na
if not na(last_sow_bar)
    last_bull_idx = -1
    for i = 1 to 20
        if i < last_sow_bar and close[last_sow_bar - i] > open[last_sow_bar - i]
            last_bull_idx := last_sow_bar - i
        else
            if last_bull_idx != -1
                break
    ob_bull_idx := last_bull_idx

if show_ob_zones and not na(last_sos_bar) and ob_bear_idx != -1
    f_draw_poi_box(high[ob_bear_idx], low[ob_bear_idx], color.new(color.teal, 75), line.style_solid, true)
    last_sos_bar := na
if show_ob_zones and not na(last_sow_bar) and ob_bull_idx != -1
    f_draw_poi_box(high[ob_bull_idx], low[ob_bull_idx], color.new(color.purple, 75), line.style_solid, false)
    last_sow_bar := na

// --- Structural Analysis ---
p_high = ta.pivothigh(high, pivot_len, pivot_len)
p_low = ta.pivotlow(low, pivot_len, pivot_len)
if show_sw_hl and bar_index > pivot_len
    if not na(p_high)
        is_strong_h = not na(strong_high) and math.abs(p_high - strong_high) < atr_val * 0.1
        label.new(bar_index - pivot_len, p_high, is_strong_h ? "S-H" : "W-H 🎯", style=label.style_label_down, color=is_strong_h ? color.new(color.maroon, 20) : color.new(color.red, 20), textcolor=color.white, size=size.tiny)
    if not na(p_low)
        is_strong_l = not na(strong_low) and math.abs(p_low - strong_low) < atr_val * 0.1
        label.new(bar_index - pivot_len, p_low, is_strong_l ? "S-L" : "W-L 🎯", style=label.style_label_up, color=is_strong_l ? color.new(color.navy, 20) : color.new(color.green, 20), textcolor=color.white, size=size.tiny)

// --- Traps & Entry Signals ---
htf_is_bull = request.security(syminfo.tickerid, htf_confirm_tf, close > ta.ema(close, 50))
htf_is_bear = request.security(syminfo.tickerid, htf_confirm_tf, close < ta.ema(close, 50))
var int last_buy_bar = 0
var int last_sell_bar = 0
is_no_supply = show_traps and bar_index > 1 and close < open and volume < volume[1] and volume < volume[2]
is_no_demand = show_traps and bar_index > 1 and close > open and volume < volume[1] and volume < volume[2]
if is_no_supply
    label.new(bar_index, low - atr_val * 0.2, "NS", style=label.style_none, textcolor=color.green, size=size.tiny)
if is_no_demand
    label.new(bar_index, high + atr_val * 0.2, "ND", style=label.style_none, textcolor=color.red, size=size.tiny)

if show_entries
    is_in_bull_poi = false
    is_in_bear_poi = false
    if array.size(box_array) > 0
        for i = array.size(box_array) - 1 to 0
            bx = array.get(box_array, i)
            if box.get_bottom(bx) < high and box.get_top(bx) > low
                if array.get(box_is_bull_array, i)
                    is_in_bull_poi := true
                else
                    is_in_bear_poi := true

    momentum_ok_bull = not use_momentum_filter or close > ema21
    buy_context = phase == 2 and not na(last_spring_bar) and (bar_index - last_spring_bar < 50) and htf_is_bull
    if buy_context and is_in_bull_poi and is_no_supply and momentum_ok_bull and bar_index > last_buy_bar + entry_throttle
        label.new(bar_index, low, "BUY", style=label.style_label_up, color=color.new(color.lime, 20), textcolor=color.white, size=size.normal)
        last_buy_bar := bar_index
        if show_risk_levels
            sl = low - atr_val * sl_atr_mult
            tp1 = close + atr_val * tp1_atr_mult
            line.new(bar_index, sl, bar_index + 50, sl, color=color.red, style=line.style_dashed)
            label.new(bar_index + 50, sl, "SL", style=label.style_label_right, textcolor=color.red)
            line.new(bar_index, tp1, bar_index + 50, tp1, color=color.green, style=line.style_dashed)
            label.new(bar_index + 50, tp1, "TP1", style=label.style_label_right, textcolor=color.green)

    momentum_ok_bear = not use_momentum_filter or close < ema21
    sell_context = phase == 3 and not na(last_ut_bar) and (bar_index - last_ut_bar < 50) and htf_is_bear
    if sell_context and is_in_bear_poi and is_no_demand and momentum_ok_bear and bar_index > last_sell_bar + entry_throttle
        label.new(bar_index, high, "SELL", style=label.style_label_down, color=color.new(color.red, 20), textcolor=color.white, size=size.normal)
        last_sell_bar := bar_index
        if show_risk_levels
            sl = high + atr_val * sl_atr_mult
            tp1 = close - atr_val * tp1_atr_mult
            line.new(bar_index, sl, bar_index + 50, sl, color=color.red, style=line.style_dashed)
            label.new(bar_index + 50, sl, "SL", style=label.style_label_right, textcolor=color.red)
            line.new(bar_index, tp1, bar_index + 50, tp1, color=color.green, style=line.style_dashed)
            label.new(bar_index + 50, tp1, "TP1", style=label.style_label_right, textcolor=color.green)

// --- Visualization ---
bg_c = phase == 2 ? color.new(color.green, 85) : phase == 3 ? color.new(color.red, 85) : phase == 1 ? color.new(color.gray, 90) : na
// Remove invalid string arg; bgcolor only accepts color (and optional offset)
bgcolor(show_bg ? bg_c : na)
barcolor(color_candles ? (close > ema21 ? color.new(color.green, 70) : color.new(color.red, 70)) : na)

var box tr_box = na
if analysis_mode == "Macro" and phase >= 1 and not na(tr_high)
    if na(tr_box)
        tr_box := box.new(tr_start_bar, tr_high, bar_index, tr_low, border_color=color.new(color.gray, 50), bgcolor=na)
    else
        box.set_left(tr_box, tr_start_bar)
        box.set_top(tr_box, tr_high)
        box.set_bottom(tr_box, tr_low)
        box.set_right(tr_box, bar_index)
else
    if not na(tr_box)
        box.delete(tr_box)
        tr_box := na