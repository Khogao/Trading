//@version=5
// Wyckoff-SMC Hybrid v5.1 — Scalper Edition (keeps Wyckoff narrative, adds scalper filters)
indicator("Wyckoff-SMC Hybrid [v5.1] — Scalper", "WSH v5.1 (Scalper)", overlay=true, max_labels_count=500, max_boxes_count=200)

// =============================================================================
// I. INPUTS — GIỮ NGUYÊN CỐT LÕI WSH + THÊM NHẸ CHO SCALPER
// =============================================================================

// --- 1. Wyckoff Core Engine (GIỮ NGUYÊN) ---
core_group = "1. Wyckoff Core Engine"
show_bg    = input.bool(true,  "Show Phase Background", group=core_group)
show_wyckoff_labels= input.bool(true, "Show Event Labels", group=core_group)
vol_lookback   = input.int(50, "Volume Lookback", minval=10, group=core_group)
vol_mult       = input.float(3.0, "Volume Spike Multiplier (Crypto)", minval=1.0, step=0.1, group=core_group)
range_mult     = input.float(2.0, "Climax Candle Range Multiplier (Crypto)", minval=1.0, step=0.1, group=core_group)
atr_len        = input.int(14, "ATR Length", group=core_group)

// --- 2. Points of Interest (POI) (GIỮ NGUYÊN) ---
poi_group = "2. Points of Interest (POI)"
show_kv_zones = input.bool(true, "Show Key Level (KV) Zones", group=poi_group)
show_ob_zones = input.bool(true, "Show Order Block (OB) Zones", group=poi_group)
highlight_context_poi = input.bool(true, "Highlight Contextual POIs", group=poi_group)
poi_extend_bars       = input.int(100, "Extend POI (bars)", group=poi_group)
poi_max_active_zones  = input.int(10, "Max Active POI zones", group=poi_group, tooltip="Số lượng vùng POI gần nhất được giữ lại để tránh làm chậm chart.")
kv_zone_len    = input.int(20, "KV Zone Lookback", minval=2, group=poi_group)
kv_wick_mult   = input.float(1.0, "KV Wick/Body Min Ratio", minval=0.1, step=0.1, group=poi_group)

// --- 3. Structural & Liquidity Analysis (GIỮ NGUYÊN) ---
struct_group = "3. Structural & Liquidity Analysis"
show_sw_hl = input.bool(true, "Show Strong/Weak Highs & Lows", group=struct_group)
show_liquidity = input.bool(true, "Show Liquidity Pools (EQH/EQL)", group=struct_group)
pivot_len  = input.int(5, "Pivot Lookback", minval=2, group=struct_group)
liquidity_atr_mult = input.float(0.1, "Liquidity Proximity (x ATR)", group=struct_group)

// --- 4. Traps & Entry Signals (GIỮ NGUYÊN KHUNG, SẼ BỔ SUNG ĐIỀU KIỆN) ---
signal_group = "4. Traps & Entry Signals"
show_traps   = input.bool(true, "Show Trap/Confirmation Signals (NS/ND)", group=signal_group)
show_entries = input.bool(true, "Show Final Buy/Sell Entries", group=signal_group)
entry_throttle = input.int(8, "Entry Signal Throttle (bars)", group=signal_group)
htf_confirm_tf = input.string("240", "Confirmation Timeframe", group=signal_group, options=["60", "240", "D"])

// --- 5. Risk Management (GIỮ NGUYÊN) ---
risk_group = "5. Risk Management"
show_risk_levels = input.bool(true, "Show SL/TP Levels on Signal", group=risk_group)
sl_atr_mult  = input.float(1.5, "Stop Loss ATR Multiplier", group=risk_group, step=0.1)
tp1_atr_mult = input.float(2.0, "Take Profit 1 ATR Multiplier", group=risk_group, step=0.1)
tp2_atr_mult = input.float(4.0, "Take Profit 2 ATR Multiplier", group=risk_group, step=0.1)
tp3_atr_mult = input.float(6.0, "Take Profit 3 ATR Multiplier", group=risk_group, step=0.1)

// --- 6. SCALPER ADD-ONS (MỚI, TẬP TRUNG HIỆU QUẢ) ---
scalp_group = "6. Scalper Add-ons"
// 6.1 Regime & Session
useRegime   = input.bool(true,  "Regime filter (ATR% + optional ADX)", group=scalp_group)
minATRpct   = input.float(0.50, "Min ATR14 % price (crypto scalp)", step=0.05, group=scalp_group)
useADX      = input.bool(false, "Require ADX(14) ≥", group=scalp_group)
minADX      = input.int(18,     "ADX threshold", minval=10, maxval=50, group=scalp_group)
useSession  = input.bool(false, "Session filter (UTC hours)", group=scalp_group)
sessStartH  = input.int(13,     "Session start (UTC)", minval=0, maxval=23, group=scalp_group)
sessEndH    = input.int(20,     "Session end (UTC)",   minval=1, maxval=24, group=scalp_group)

// 6.2 Liquidity Sweep + Volume Delta
useSweep    = input.bool(true,  "Liquidity sweep (reject at HH/LL)", group=scalp_group)
sweepWickK  = input.float(0.6,  "Min wick ratio on sweep", step=0.05, group=scalp_group)
useDelta    = input.bool(true,  "Volume Delta (tick-proxy) confirm", group=scalp_group)
deltaLen    = input.int(50,     "Delta Z lookback", minval=20, group=scalp_group)

// 6.3 Micro BOS
useMicroBOS = input.bool(true,  "Micro BOS/CHoCH (fast structure)", group=scalp_group)
lk_micro    = input.int(4,      "Micro lookback", minval=2, group=scalp_group)

// 6.4 Top-down Gate (MA50 bias)
useGate     = input.bool(true,  "Top-down Gate (MA50 bias)", group=scalp_group)
useD        = input.bool(true,  "Use 1D", group=scalp_group)
use4H       = input.bool(true,  "Use 4H", group=scalp_group)
use1H       = input.bool(true,  "Use 1H", group=scalp_group)
use30m      = input.bool(true,  "Use 30m", group=scalp_group)
wD          = input.float(2.0,  "Weight 1D", step=0.5, group=scalp_group)
w4H         = input.float(2.0,  "Weight 4H", step=0.5, group=scalp_group)
w1H         = input.float(1.5,  "Weight 1H", step=0.5, group=scalp_group)
w30         = input.float(1.0,  "Weight 30m", step=0.5, group=scalp_group)
gateLongThr = input.float(2.5,  "Gate Long ≥ Σ", step=0.5, group=scalp_group)
gateShortThr= input.float(2.5,  "Gate Short ≥ |Σ|", step=0.5, group=scalp_group)

// 6.5 Confluence Scoring (nhẹ, chỉ cho entry)
score_group = "7. Confluence (Entry Score — light)"
useScore    = input.bool(true,  "Use entry confluence score", group=score_group)
w_inPOI     = input.float(1.5,  "In POI", step=0.5, group=score_group)
w_NSND      = input.float(1.0,  "NS/ND (đúng hướng)", step=0.5, group=score_group)
w_momentum  = input.float(1.0,  "EMA21 momentum", step=0.5, group=score_group)
w_sweep     = input.float(1.5,  "Liquidity sweep", step=0.5, group=score_group)
w_delta     = input.float(1.0,  "Δ confirm (SPR/UT)", step=0.5, group=score_group)
w_micro     = input.float(0.8,  "Micro BOS", step=0.2, group=score_group)
w_gate      = input.float(1.0,  "Gate alignment", step=0.5, group=score_group)
longThr     = input.float(4.0,  "Long score ≥", step=0.5, group=score_group)
shortThr    = input.float(4.0,  "Short score ≥", step=0.5, group=score_group)

// 6.6 Alerts
alert_group = "8. Alerts"
enableAlerts= input.bool(true,  "Enable alerts for high-prob setups", group=alert_group)

// =============================================================================
// II. CORE LOGIC & STATE (GIỮ KHUNG WSH, THÊM TÍNH NĂNG SCALPER)
// =============================================================================
mid(h,l) => (h+l)/2.0
clamp(v,a,b) => math.max(a, math.min(b,v))

// ADX fallback (for environments where ta.adx is unavailable)
f_adx(len) =>
    up = ta.change(high)
    down = -ta.change(low)
    plusDM  = (up > down and up > 0)   ? up   : 0.0
    minusDM = (down > up and down > 0) ? down : 0.0
    tr = ta.tr(true)
    trRma    = ta.rma(tr, len)
    plusRma  = ta.rma(plusDM, len)
    minusRma = ta.rma(minusDM, len)
    plusDI   = 100 * plusRma  / nz(trRma, 1)
    minusDI  = 100 * minusRma / nz(trRma, 1)
    dx = 100 * math.abs(plusDI - minusDI) / math.max(plusDI + minusDI, 1e-10)
    ta.rma(dx, len)

// --- Data & State (WSH) ---
vol_sma = ta.sma(volume, vol_lookback)
atr_val = ta.atr(atr_len)
is_vol_spike = volume > vol_sma * vol_mult
is_wide_range_bear = close < open and (open - close) > atr_val * range_mult
is_wide_range_bull = close > open and (close - open) > atr_val * range_mult

var int   phase = 0 // 0:Neutral, 1:TR, 2:Accum, 3:Distrib
var float tr_high = na
var float tr_low = na
var int   tr_start_bar = na
var int   last_event_bar = na
var int   last_spring_bar = na
var int   last_ut_bar = na
var int   last_sos_bar = na
var int   last_sow_bar = na
var float strong_high = na
var float strong_low = na
var box[]   box_array = array.new_box(0)
var bool[]  box_is_bull = array.new_bool(0)

// guard helpers
bars_ready(n) => bar_index >= n

// Precompute safe lookbacks
lowest20_raw  = ta.lowest(low, 20)
highest20_raw = ta.highest(high, 20)
lowest20_1    = bars_ready(1) ? lowest20_raw[1]  : na
highest20_1   = bars_ready(1) ? highest20_raw[1] : na
ema21         = ta.ema(close, 21)
lookback_len  = na(tr_start_bar) ? na : math.max(1, bar_index - tr_start_bar)
len_clamped   = na(lookback_len) ? 1 : math.min(lookback_len, bar_index + 1)
range_lowest  = ta.lowest(low, len_clamped)
range_highest = ta.highest(high, len_clamped)

// HTF confirmation (WSH gốc)
htf_close  = request.security(syminfo.tickerid, htf_confirm_tf, close, barmerge.gaps_off, barmerge.lookahead_off)
htf_ema50  = request.security(syminfo.tickerid, htf_confirm_tf, ta.ema(close, 50), barmerge.gaps_off, barmerge.lookahead_off)
htf_is_bull = htf_close > htf_ema50
htf_is_bear = htf_close < htf_ema50

// --- Helpers WSH ---
f_add_label(bar, price, txt, style, clr, txt_color) =>
    if show_wyckoff_labels
        label.new(bar, price, txt, style=style, color=clr, textcolor=txt_color, size=size.small)

f_draw_poi_box(float p_top, float p_bottom, p_color, p_style, string p_label) =>
    if na(p_top) or na(p_bottom)
        na
    else
        is_contextual = (str.contains(p_label, "Bull") and phase == 2) or (str.contains(p_label, "Bear") and phase == 3)
        final_color = highlight_context_poi and is_contextual ? p_color : color.new(color.gray, 70)
        left_x  = bar_index > 0 ? bar_index - 1 : 0
        right_x = bar_index + poi_extend_bars
        b = box.new(left_x, p_top, right_x, p_bottom, border_color=final_color, border_style=p_style, bgcolor=color.new(final_color, 85))
        array.push(box_array, b)
        array.push(box_is_bull, str.contains(p_label, "Bull"))
        if array.size(box_array) > poi_max_active_zones
            old_box = array.shift(box_array)
            old_flag = array.shift(box_is_bull)
            if box.get_bottom(old_box) > high or box.get_top(old_box) < low
                box.delete(old_box)
            else
                array.unshift(box_array, old_box)
                array.unshift(box_is_bull, old_flag)

// call once per bar to satisfy compiler
f_draw_poi_box(na, na, color.gray, line.style_solid, "")

// --- Wyckoff Phase & Events (WSH gốc) ---
if phase == 0
    if is_wide_range_bear and is_vol_spike and low < lowest20_1
        phase := 1, tr_low := low, tr_high := high, tr_start_bar := bar_index, last_event_bar := bar_index
        f_add_label(bar_index, low, "SC", label.style_label_up, color.new(color.red, 20), color.red)
    if is_wide_range_bull and is_vol_spike and high > highest20_1
        phase := 1, tr_high := high, tr_low := low, tr_start_bar := bar_index, last_event_bar := bar_index
        f_add_label(bar_index, high, "BC", label.style_label_down, color.new(color.green, 20), color.green)

if phase == 1
    tr_high := math.max(tr_high, high)
    tr_low  := math.min(tr_low, low)
    is_st_bear = math.abs(high - tr_high) < atr_val * 0.2 and volume < vol_sma
    is_st_bull = math.abs(low - tr_low)  < atr_val * 0.2 and volume < vol_sma
    if is_st_bear
        f_add_label(bar_index, high, "ST", label.style_label_down, color.new(color.gray, 20), color.gray)
    if is_st_bull
        f_add_label(bar_index, low,  "ST", label.style_label_up,   color.new(color.gray, 20), color.gray)

if phase >= 1 and not na(tr_low)
    // Spring
    is_spring_vol_ok = volume > vol_sma * 1.5 or volume < vol_sma * 0.8
    if low < tr_low and close > tr_low and is_spring_vol_ok and bar_index > last_event_bar + 5
        phase := 2, last_event_bar := bar_index, last_spring_bar := bar_index
        f_add_label(bar_index, low, "SP", label.style_label_up, color.new(color.green, 20), color.green)
    // Upthrust
    is_ut_vol_ok = volume > vol_sma * 1.5
    if high > tr_high and close < tr_high and is_ut_vol_ok and bar_index > last_event_bar + 5
        phase := 3, last_event_bar := bar_index, last_ut_bar := bar_index
        f_add_label(bar_index, high, "UT", label.style_label_down, color.new(color.red, 20), color.red)
    // SOS/SOW
    is_sos = close > tr_high and close > open and volume > vol_sma * 1.5
    is_sow = close < tr_low  and close < open and volume > vol_sma * 1.5
    if is_sos and phase < 3
        strong_low := range_lowest
        f_add_label(bar_index, high, "SOS", label.style_label_up, color.new(color.blue, 20), color.blue)
        phase := 0, tr_high := na, tr_low := na, last_spring_bar := na, last_ut_bar := na, last_sos_bar := na, last_sow_bar := na
    if is_sow and phase < 2
        strong_high := range_highest
        f_add_label(bar_index, low, "SOW", label.style_label_down, color.new(color.purple, 20), color.purple)
        phase := 0, tr_high := na, tr_low := na, last_spring_bar := na, last_ut_bar := na, last_sos_bar := na, last_sow_bar := na

// --- POI (KV/OB) (WSH gốc) ---
if show_kv_zones and bars_ready(1)
    kv_low_prev  = ta.lowest(low, kv_zone_len)[1]
    kv_high_prev = ta.highest(high, kv_zone_len)[1]
    is_kv_bull = ta.crossunder(low, kv_low_prev) and close > open and (math.min(open, close) - low) / math.max(math.abs(open - close), syminfo.mintick) >= kv_wick_mult
    if is_kv_bull
        f_draw_poi_box(high[1], low[1], color.blue, line.style_dashed, "KV Bull")
    is_kv_bear = ta.crossover(high, kv_high_prev) and close < open and (high - math.max(open, close)) / math.max(math.abs(open - close), syminfo.mintick) >= kv_wick_mult
    if is_kv_bear
        f_draw_poi_box(high[1], low[1], color.orange, line.style_dashed, "KV Bear")

if show_ob_zones
    var int last_bear_off = na
    var int last_bull_off = na
    if not na(last_sos_bar)
        bars_since_sos = bar_index - last_sos_bar
        for i = 1 to math.min(20, bar_index)
            off = bars_since_sos + i
            if off <= bar_index
                if close[off] < open[off]
                    last_bear_off := na(last_bear_off) ? off : last_bear_off
                else if not na(last_bear_off)
                    break
        if not na(last_bear_off)
            f_draw_poi_box(high[last_bear_off], low[last_bear_off], color.teal, line.style_solid, "OB Bull")
            last_sos_bar := na, last_bear_off := na
    if not na(last_sow_bar)
        bars_since_sow = bar_index - last_sow_bar
        for i = 1 to math.min(20, bar_index)
            off2 = bars_since_sow + i
            if off2 <= bar_index
                if close[off2] > open[off2]
                    last_bull_off := na(last_bull_off) ? off2 : last_bull_off
                else if not na(last_bull_off)
                    break
        if not na(last_bull_off)
            f_draw_poi_box(high[last_bull_off], low[last_bull_off], color.purple, line.style_solid, "OB Bear")
            last_sow_bar := na, last_bull_off := na

// --- Structural S/W labels (WSH gốc) ---
p_high = ta.pivothigh(high, pivot_len, pivot_len)
p_low  = ta.pivotlow(low,  pivot_len, pivot_len)
if show_sw_hl
    if not na(p_high) and bars_ready(pivot_len)
        is_strong_h = not na(strong_high) and math.abs(p_high - strong_high) < atr_val * 0.1
        label.new(bar_index - pivot_len, p_high, is_strong_h ? "S-H" : "W-H 🎯", style=label.style_label_down, color=is_strong_h ? color.new(color.maroon, 20) : color.new(color.red, 20), textcolor=color.white, size=size.tiny)
    if not na(p_low) and bars_ready(pivot_len)
        is_strong_l = not na(strong_low) and math.abs(p_low - strong_low) < atr_val * 0.1
        label.new(bar_index - pivot_len, p_low, is_strong_l ? "S-L" : "W-L 🎯", style=label.style_label_up, color=is_strong_l ? color.new(color.navy, 20) : color.new(color.green, 20), textcolor=color.white, size=size.tiny)

// --- Liquidity lines (WSH gốc, nhẹ) ---
if show_liquidity
    for i = 1 to 50
        if i <= bar_index
            if math.abs(high[i] - high) < atr_val * liquidity_atr_mult
                line.new(bar_index[i], high[i], bar_index, high, color=color.new(color.yellow, 50), style=line.style_dotted, width=1)

// =============================================================================
// III. SCALPER ENGINES — Sweep / Delta / MicroBOS / Gate / Score
// =============================================================================
spread   = high - low
atrPct   = atr_val / math.max(nz(close,1.0), 1e-6) * 100.0
adx14    = f_adx(14)
barHour  = hour(time)

// Regime & Session
regimeOK = not useRegime or (atrPct >= minATRpct and (not useADX or adx14 >= minADX))
sessOK() =>
    if not useSession
        true
    else
        barHour >= sessStartH and barHour < sessEndH

// Liquidity Sweep
upperWickRatio = (high - math.max(open, close)) / math.max(spread, 1e-6)
lowerWickRatio = (math.min(open, close) - low) / math.max(spread, 1e-6)
ph = ta.pivothigh(high, pivot_len, pivot_len)
pl = ta.pivotlow(low,  pivot_len, pivot_len)
var float lastPH = na
var float lastPL = na
if not na(ph)
    lastPH := ph
if not na(pl)
    lastPL := pl
sweepHigh = useSweep and not na(lastPH) and high > lastPH and close < lastPH and upperWickRatio >= sweepWickK
sweepLow  = useSweep and not na(lastPL) and low  < lastPL  and close > lastPL  and lowerWickRatio >= sweepWickK

// Volume Delta (tick-proxy)
spreadSafe = math.max(spread, 1e-6)
upFrac   = clamp((close - low) / spreadSafe,  0.0, 1.0)
downFrac = clamp((high  - close) / spreadSafe, 0.0, 1.0)
buyVol   = useDelta ? volume * upFrac   : na
sellVol  = useDelta ? volume * downFrac : na
volDelta = useDelta ? (buyVol - sellVol) : na
zDelta   = useDelta ? (volDelta - ta.sma(volDelta, deltaLen)) / math.max(ta.stdev(volDelta, deltaLen), 1e-6) : na
deltaPos = useDelta and (nz(zDelta, 0.0) > 0)
deltaNeg = useDelta and (nz(zDelta, 0.0) < 0)

// Micro BOS
hhMicro = ta.highest(high, lk_micro)[1]
llMicro = ta.lowest(low,  lk_micro)[1]
microUp = useMicroBOS and close > hhMicro
microDown = useMicroBOS and close < llMicro

// Top-down Gate (MA50 bias)
f_bias(tf) =>
    c  = request.security(syminfo.tickerid, tf, close,             barmerge.gaps_off, barmerge.lookahead_off)
    ma = request.security(syminfo.tickerid, tf, ta.sma(close, 50), barmerge.gaps_off, barmerge.lookahead_off)
    c > ma ? 1.0 : c < ma ? -1.0 : 0.0

float gateScore = 0.0
if useGate
    if useD
        gateScore += wD   * f_bias("D")
    if use4H
        gateScore += w4H  * f_bias("240")
    if use1H
        gateScore += w1H  * f_bias("60")
    if use30m
        gateScore += w30  * f_bias("30")
canLongGate  = not useGate or gateScore >=  gateLongThr
canShortGate = not useGate or gateScore <= -gateShortThr

// =============================================================================
// IV. ENTRY (giữ logic WSH, thêm confluence cho scalper)
// =============================================================================
var int last_buy_bar = 0
var int last_sell_bar = 0
enough_vol_hist = bars_ready(2)
is_no_supply = show_traps and enough_vol_hist and close < open and volume < volume[1] and volume < volume[2]
is_no_demand = show_traps and enough_vol_hist and close > open and volume < volume[1] and volume < volume[2]

// In-POI check (scan newest → oldest)
in_bull_poi = false
in_bear_poi = false
if array.size(box_array) > 0
    for i = array.size(box_array) - 1 to 0
        bx = array.get(box_array, i)
        if box.get_bottom(bx) < high and box.get_top(bx) > low
            if array.get(box_is_bull, i)
                in_bull_poi := true
            else
                in_bear_poi := true

// Momentum & Wyckoff context (WSH gốc)
momentum_bull = close > ema21
momentum_bear = close < ema21
buy_context  = phase == 2 and not na(last_spring_bar) and (bar_index - last_spring_bar < 25) and htf_is_bull
sell_context = phase == 3 and not na(last_ut_bar)      and (bar_index - last_ut_bar   < 25) and htf_is_bear

// Confluence score (nhẹ)
float longScore = 0.0
float shortScore = 0.0
if useScore
    longScore  += (in_bull_poi   ? w_inPOI    : 0)
    longScore  += (is_no_supply  ? w_NSND     : 0)
    longScore  += (momentum_bull ? w_momentum : 0)
    longScore  += (sweepLow      ? w_sweep    : 0)
    longScore  += (deltaPos      ? w_delta    : 0)
    longScore  += (microUp       ? w_micro    : 0)
    longScore  += (canLongGate   ? w_gate     : 0)

    shortScore += (in_bear_poi   ? w_inPOI    : 0)
    shortScore += (is_no_demand  ? w_NSND     : 0)
    shortScore += (momentum_bear ? w_momentum : 0)
    shortScore += (sweepHigh     ? w_sweep    : 0)
    shortScore += (deltaNeg      ? w_delta    : 0)
    shortScore += (microDown     ? w_micro    : 0)
    shortScore += (canShortGate  ? w_gate     : 0)

// Final entry gates (scalper: nhanh, rõ)
canBuy  = show_entries and buy_context  and (not useScore or longScore  >= longThr) and regimeOK and sessOK() and bar_index > last_buy_bar  + entry_throttle
canSell = show_entries and sell_context and (not useScore or shortScore >= shortThr) and regimeOK and sessOK() and bar_index > last_sell_bar + entry_throttle

// Plot & SL/TP
if canBuy
    label.new(bar_index, low, "BUY" + (useScore ? " S="+str.tostring(longScore, format.mintick) : ""), style=label.style_label_up, color=color.new(color.lime, 20), textcolor=color.white, size=size.normal)
    if show_risk_levels
        sl = low - atr_val * sl_atr_mult
        tp1 = close + atr_val * tp1_atr_mult
        tp2 = close + atr_val * tp2_atr_mult
        line.new(bar_index, sl,  bar_index + 50, sl,  color=color.red,   style=line.style_dashed)
        label.new(bar_index + 50, sl,  "SL",  style=label.style_label_right, textcolor=color.red,   color=color.new(color.gray, 100))
        line.new(bar_index, tp1, bar_index + 50, tp1, color=color.green, style=line.style_dashed)
        label.new(bar_index + 50, tp1, "TP1", style=label.style_label_right, textcolor=color.green, color=color.new(color.gray, 100))
    last_buy_bar := bar_index

if canSell
    label.new(bar_index, high, "SELL" + (useScore ? " S="+str.tostring(shortScore, format.mintick) : ""), style=label.style_label_down, color=color.new(color.red, 20), textcolor=color.white, size=size.normal)
    if show_risk_levels
        sl = high + atr_val * sl_atr_mult
        tp1 = close - atr_val * tp1_atr_mult
        line.new(bar_index, sl,  bar_index + 50, sl,  color=color.red,   style=line.style_dashed)
        label.new(bar_index + 50, sl,  "SL",  style=label.style_label_right, textcolor=color.red,   color=color.new(color.gray, 100))
        line.new(bar_index, tp1, bar_index + 50, tp1, color=color.green, style=line.style_dashed)
        label.new(bar_index + 50, tp1, "TP1", style=label.style_label_right, textcolor=color.green, color=color.new(color.gray, 100))
    last_sell_bar := bar_index

// =============================================================================
// V. Visualization (WSH gốc)
// =============================================================================
bg_c = phase == 2 ? color.new(color.green, 85) : phase == 3 ? color.new(color.red, 85) : phase == 1 ? color.new(color.gray, 90) : na
bgcolor(show_bg ? bg_c : na)
var box tr_box = na
if phase >= 1 and not na(tr_high)
    if na(tr_box)
        tr_box := box.new(tr_start_bar, tr_high, bar_index, tr_low, border_color=color.new(color.gray, 50), bgcolor=na)
    else
        box.set_left(tr_box, tr_start_bar), box.set_top(tr_box, tr_high), box.set_bottom(tr_box, tr_low), box.set_right(tr_box, bar_index)
else
    if not na(tr_box)
        box.delete(tr_box), tr_box := na

// =============================================================================
// VI. Alerts
// =============================================================================
alertcondition(enableAlerts and canBuy,  "WSH BUY (Scalper)",  "WSH v5.1: BUY setup (scalper).")
alertcondition(enableAlerts and canSell, "WSH SELL (Scalper)", "WSH v5.1: SELL setup (scalper).")
alertcondition(canSell, "WSH SELL (Scalper)", "WSH v5.1: SELL setup (scalper).")