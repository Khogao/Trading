// ¬© 2025 Gemini AI - ScalpPro (SP) Ultimate v2.2
//@version=5
indicator("ScalpPro (SP) Ultimate v2.2", shorttitle="SP Ultimate", overlay=true, max_boxes_count=8, max_labels_count=100)

// === INPUTS ===
group_tf = "üïí Timeframe"
enable_m5   = input.bool(true,  "Khung 5m", group=group_tf)
enable_m15  = input.bool(true,  "Khung 15m", group=group_tf)
enable_h1   = input.bool(false, "Khung 1h", group=group_tf)

group_trend = "üîó Trend Alignment"
alignment_mode = input.string("Strict", "Trend Align Mode", options=["Strict", "Moderate", "Relaxed"], group=group_trend)
allow_counter_trap = input.bool(true, "Trap SELL ng∆∞·ª£c trend?", group=group_trend)

group_sr = "üéØ Key S/R"
key_tol = input.float(0.3, "ƒê·ªô s√°t S/R (%)", minval=0.1, maxval=2.0, group=group_sr)
show_sr = input.bool(true, "Show Auto S/R", group=group_sr)

group_trap = "üîç Trap Logic"
vol_mult = input.float(2.0, "Vol Spike Multiplier", minval=1.0, group=group_trap)
trap_len = input.int(3, "Trap Zone Length", minval=1, group=group_trap)
lookback = input.int(20, "Vol Lookback", minval=5, group=group_trap)

group_conf = "üíé Confluence"
min_confluence = input.int(3, "Min Confluence", minval=1, maxval=8, group=group_conf)
rr_min = input.float(1.5, "Min R:R", minval=1.0, group=group_conf)

group_session = "üïí Session"
enable_session = input.bool(true, "Enable Session Filter", group=group_session)
asia_sess = input.bool(true, "Asia (21:00-06:00 GMT)", group=group_session)
london_sess = input.bool(true, "London (07:00-16:00 GMT)", group=group_session)
ny_sess = input.bool(true, "NY (12:00-21:00 GMT)", group=group_session)

// === MULTI-TF CONTEXT ===
current_tf = timeframe.period
is_m5   = (current_tf == "5")
is_m15  = (current_tf == "15")
is_h1   = (current_tf == "60")
active_tf = (enable_m5 and is_m5) or (enable_m15 and is_m15) or (enable_h1 and is_h1)

get_gmt_time() =>
    timestamp = time("GMT")
    hour_gmt = hour(timestamp, "GMT")
    [hour_gmt, timestamp]
[current_hour_gmt, _] = get_gmt_time()
is_asia = current_hour_gmt >= 21 or current_hour_gmt < 6
is_london = current_hour_gmt >= 7 and current_hour_gmt < 16
is_ny = current_hour_gmt >= 12 and current_hour_gmt < 21
session_allowed = not enable_session or
  (asia_sess and is_asia) or
  (london_sess and is_london) or
  (ny_sess and is_ny)

// === TREND ALIGN ===
get_trend(tf) =>
    ema21 = request.security(syminfo.tickerid, tf, ta.ema(close, 21))
    ema50 = request.security(syminfo.tickerid, tf, ta.ema(close, 50))
    c = request.security(syminfo.tickerid, tf, close)
    bull = c > ema21 and ema21 > ema50
    bear = c < ema21 and ema21 < ema50
    [bull, bear]
[d1_bull, d1_bear] = get_trend("D")
[h4_bull, h4_bear] = get_trend("240")
[h1_bull, h1_bear] = get_trend("60")

trend_bull_cnt = (d1_bull ? 1 : 0) + (h4_bull ? 1 : 0) + (h1_bull ? 1 : 0)
trend_bear_cnt = (d1_bear ? 1 : 0) + (h4_bear ? 1 : 0) + (h1_bear ? 1 : 0)
trend_ok_bull = alignment_mode == "Strict" ? trend_bull_cnt == 3 : alignment_mode == "Moderate" ? trend_bull_cnt >= 2 : trend_bull_cnt >= 1
trend_ok_bear = alignment_mode == "Strict" ? trend_bear_cnt == 3 : alignment_mode == "Moderate" ? trend_bear_cnt >= 2 : trend_bear_cnt >= 1

// === AUTO SR (ALL TF) ===
sr_len = 40
get_sr(tf) =>
    sup = request.security(syminfo.tickerid, tf, ta.lowest(low, sr_len))
    res = request.security(syminfo.tickerid, tf, ta.highest(high, sr_len))
    [sup, res]
[sup_d, res_d]     = get_sr("D")
[sup_h4, res_h4]   = get_sr("240")
[sup_h1, res_h1]   = get_sr("60")
[sup_m15, res_m15] = get_sr("15")
[sup_m5, res_m5]   = get_sr("5")

show_this_sr = show_sr and (is_m5 or is_m15 or is_h1)
plot(show_this_sr ? sup_d : na, color=color.new(color.lime, 85), linewidth=1, style=plot.style_line, title="Sup D")
plot(show_this_sr ? res_d : na, color=color.new(color.red, 85), linewidth=1, style=plot.style_line, title="Res D")
plot(show_this_sr ? sup_h4 : na, color=color.new(color.lime, 80), linewidth=1, style=plot.style_line, title="Sup H4")
plot(show_this_sr ? res_h4 : na, color=color.new(color.red, 80), linewidth=1, style=plot.style_line, title="Res H4")
plot(show_this_sr ? sup_h1 : na, color=color.new(color.lime, 70), linewidth=1, style=plot.style_line, title="Sup H1")
plot(show_this_sr ? res_h1 : na, color=color.new(color.red, 70), linewidth=1, style=plot.style_line, title="Res H1")
plot(show_this_sr ? sup_m15 : na, color=color.new(color.lime, 50), linewidth=1, style=plot.style_line, title="Sup M15")
plot(show_this_sr ? res_m15 : na, color=color.new(color.red, 50), linewidth=1, style=plot.style_line, title="Res M15")
plot(show_this_sr ? sup_m5 : na, color=color.new(color.lime, 30), linewidth=1, style=plot.style_line, title="Sup M5")
plot(show_this_sr ? res_m5 : na, color=color.new(color.red, 30), linewidth=1, style=plot.style_line, title="Res M5")

// === G·∫¶N SR (CROSS CHECK T·∫§T C·∫¢ TF) ===
is_near_any_sup = (math.abs(low-sup_d)/sup_d < key_tol/100) or (math.abs(low-sup_h4)/sup_h4 < key_tol/100) or (math.abs(low-sup_h1)/sup_h1 < key_tol/100) or (math.abs(low-sup_m15)/sup_m15 < key_tol/100) or (math.abs(low-sup_m5)/sup_m5 < key_tol/100)
is_near_any_res = (math.abs(high-res_d)/res_d < key_tol/100) or (math.abs(high-res_h4)/res_h4 < key_tol/100) or (math.abs(high-res_h1)/res_h1 < key_tol/100) or (math.abs(high-res_m15)/res_m15 < key_tol/100) or (math.abs(high-res_m5)/res_m5 < key_tol/100)

// === TRAP / ENTRY LOGIC ===
vol_ma = ta.sma(volume, lookback)
vol_spike = volume > vol_ma * vol_mult
swing_high = ta.highest(high, lookback)
swing_low = ta.lowest(low, lookback)
range_sz = swing_high - swing_low
pb_buy = close <= (swing_high - range_sz*0.382) and close > swing_low
pb_sell = close >= (swing_low + range_sz*0.382) and close < swing_high
fakebreak_dn = low < sup_m5 and close > sup_m5 and vol_spike
fakebreak_up = high > res_m5 and close < res_m5 and vol_spike
long_squeeze = close < close[1] and close[1] < close[2] and volume > vol_ma * 1.6
short_squeeze = close > close[1] and close[1] > close[2] and volume > vol_ma * 1.6

rr_buy = (res_m5 - close)/ta.atr(14)
rr_sell = (close - sup_m5)/ta.atr(14)
conf_buy = (trend_ok_bull ? 1 : 0) + (is_near_any_sup ? 1 : 0) + (vol_spike ? 1 : 0) + (pb_buy ? 1 : 0) + (fakebreak_dn ? 1 : 0) + (short_squeeze ? 1 : 0)
conf_sell = ((trend_ok_bear or allow_counter_trap) ? 1 : 0) + (is_near_any_res ? 1 : 0) + (vol_spike ? 1 : 0) + (pb_sell ? 1 : 0) + (fakebreak_up ? 1 : 0) + (long_squeeze ? 1 : 0)

// === EMOJI CONFLUENCE ===
emoji_buy = (conf_buy >= 6 ? "üíé" : conf_buy >= 4 ? "üéØ" : "") + (vol_spike ? "üí•" : "") + (pb_buy ? "üìà" : "") + (fakebreak_dn ? "ü¶à" : "") + (short_squeeze ? "üöÄ" : "")
emoji_sell = (conf_sell >= 6 ? "üíé" : conf_sell >= 4 ? "üéØ" : "") + (vol_spike ? "üí•" : "") + (pb_sell ? "üìâ" : "") + (fakebreak_up ? "ü¶à" : "") + (long_squeeze ? "üîª" : "")

// === ENTRY / PERFECT ENTRY ===
entry_buy  = active_tf and trend_ok_bull and is_near_any_sup and vol_spike and conf_buy >= min_confluence and rr_buy >= rr_min and pb_buy and session_allowed
entry_sell = active_tf and (trend_ok_bear or allow_counter_trap) and is_near_any_res and vol_spike and conf_sell >= min_confluence and rr_sell >= rr_min and pb_sell and session_allowed

perfect_buy = entry_buy and conf_buy >= 6
perfect_sell = entry_sell and conf_sell >= 6

color_buy = conf_buy >= 6 ? color.new(color.lime, 0) : conf_buy >= 4 ? color.new(color.green, 30) : color.new(color.green, 75)
color_sell = conf_sell >= 6 ? color.new(color.red, 0) : conf_sell >= 4 ? color.new(color.red, 30) : color.new(color.red, 75)

// === PLOT SIGNALS ===
plotshape(perfect_buy, title="PERFECT BUY", style=shape.triangleup, location=location.belowbar, color=color.new(color.lime, 0), size=size.normal, text="üîºüíé‚ö°")
plotshape(perfect_sell, title="PERFECT SELL", style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), size=size.normal, text="üîΩüíé‚ö°")

// Use constant text for plotshape to satisfy Pine's const-string requirement
plotshape(entry_buy and not perfect_buy,  title="BUY",  style=shape.triangleup,   location=location.belowbar, color=color_buy,  size=size.tiny, text="üîº")
plotshape(entry_sell and not perfect_sell, title="SELL", style=shape.triangledown, location=location.abovebar, color=color_sell, size=size.tiny, text="üîΩ")

// Add labels to show dynamic emoji strings
if (entry_buy and not perfect_buy)
    label.new(bar_index, low, "üîº" + emoji_buy, style=label.style_label_up, textcolor=color.white, size=size.tiny, color=color.new(color_buy, 0))
if (entry_sell and not perfect_sell)
    label.new(bar_index, high, "üîΩ" + emoji_sell, style=label.style_label_down, textcolor=color.white, size=size.tiny, color=color.new(color_sell, 0))

// === C·∫¢NH B√ÅO ƒêA KHUNG S/R ===
plotshape(is_near_any_sup or is_near_any_res, style=shape.circle, location=location.top, color=color.yellow, size=size.tiny, title="‚ö†Ô∏è Near Any S/R")

// === ALERTS ===
alertcondition(perfect_buy, "PERFECT BUY", "üö®üíé PERFECT BUY Signal!")
alertcondition(perfect_sell, "PERFECT SELL", "üö®üíé PERFECT SELL Signal!")
alertcondition(entry_buy, "BUY Signal", "Trap Zone BUY Signal!")
alertcondition(entry_sell, "SELL Signal", "Trap Zone SELL Signal!")
alertcondition(is_near_any_sup or is_near_any_res, "‚ö†Ô∏è Near Any S/R", "‚ö†Ô∏è Price near any support/resistance zone!")

