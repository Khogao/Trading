//@version=6
indicator("VSA Volume + CVD (Analysis Engine)", "VSA+CVD v2.5", format=format.volume, precision=0)

import TradingView/ta/8

// ==============================================================================================
// VSA & VAD SETTINGS
// ==============================================================================================
var string GRP_VSA = "VSA Volume Settings"
lengthVolumeMA = input.int(20, title="Length of Volume MA", minval=1, group=GRP_VSA)
vsa_zscore_sensitivity = input.float(1.8, title="VSA Z-score Sensitivity", minval=0.5, maxval=4.0, step=0.1, group=GRP_VSA, tooltip="NgÆ°á»¡ng Z-score cho 'High Volume'. Ultra High = 1.5x ngÆ°á»¡ng. Very High = 1.2x.")

// ==============================================================================================
// CVD SETTINGS
// ==============================================================================================
var string GRP_CVD = "CVD Settings"
anchorInput = input.timeframe("1D", "Anchor period (Reset point)", group=GRP_CVD)
cvdLookback    = input.int(50, "CVD Scaling Lookback", group=GRP_CVD, tooltip="Sá»‘ náº¿n Ä‘á»ƒ scale lá»›p phá»§ CVD.")
cvdTransparency = input.int(80, "CVD Transparency", minval=0, maxval=100, group=GRP_CVD)
cvdBullColor   = input.color(color.new(color.blue, 0), "CVD Bull Color", group=GRP_CVD)
cvdBearColor   = input.color(color.new(color.orange, 0), "CVD Bear Color", group=GRP_CVD)

// ==============================================================================================
// ANALYSIS & DASHBOARD SETTINGS
// ==============================================================================================
var string GRP_ANALYSIS = "ðŸ§  Analysis Engine"
showDashboard = input.bool(true, title="Show Dashboard", group=GRP_ANALYSIS)

// Add persistent table handle (init on demand)
var table dashboard = na

// ==============================================================================================
// CORE CALCULATIONS
// ==============================================================================================

// --- VSA Z-Score Engine ---
f_calculateZScore(value, length) =>
    mean = ta.sma(value, length)
    std_dev = ta.stdev(value, length)
    std_dev > 0 ? (value - mean) / std_dev : 0

vol_zscore = f_calculateZScore(volume, lengthVolumeMA)
volumeMA = ta.sma(volume, lengthVolumeMA)

bool isUltraHigh = vol_zscore >= vsa_zscore_sensitivity * 1.5
bool isVeryHigh  = vol_zscore >= vsa_zscore_sensitivity * 1.2 and vol_zscore < vsa_zscore_sensitivity * 1.5
bool isHigh      = vol_zscore >= vsa_zscore_sensitivity
bool isNormal    = vol_zscore >= vsa_zscore_sensitivity * 0.5 and vol_zscore < vsa_zscore_sensitivity
bool isLow       = vol_zscore > 0 and vol_zscore < vsa_zscore_sensitivity * 0.5
bool isVeryLow   = vol_zscore <= 0

// --- CVD Data Engine ---
[openVolume, maxVolume, minVolume, lastVolume] = ta.requestVolumeDelta(timeframe.period, anchorInput)
// Intrabar CVD (reset táº¡i má»—i bar) - dÃ¹ng riÃªng Ä‘á»ƒ tÃ­nh delta intrabar chÃ­nh xÃ¡c
[barOpen, barMax, barMin, barLast] = ta.requestVolumeDelta(timeframe.period, timeframe.period)

// --- CVD DELTA CALCULATION ---
cvd_delta_current_bar = barLast - barOpen
cvd_delta_since_anchor = lastVolume - openVolume

// --- Simplified Accumulation/Distribution Detection for Alerts ---
bool isAccumulationBar = close > open and (high - close) / (high - low) < 0.4 and (close - low) / (high - low) > 0.6 and isHigh
bool isDistributionBar = close < open and (close - low) / (high - low) < 0.4 and (high - close) / (high - low) > 0.6 and isHigh

// --- Plot Ä‘á»ƒ hiá»ƒn thá»‹ Ä‘Ãºng giÃ¡ trá»‹ trong Indicator Status (status line) ---
plot(nz(volume), title="Vol_status", color=color.gray, display=display.status_line)
// removed CVD status plots (CVD last status, CVD anchor delta status)

// ==============================================================================================
// PLOTTING & DASHBOARD
// ==============================================================================================

// 1. VSA Volume
vsaColor = isUltraHigh ? color.new(color.purple, 20) : isVeryHigh  ? color.new(color.red, 20) : isHigh ? color.new(color.orange, 20) : isNormal ? color.new(color.green, 20) : isLow ? color.new(color.blue, 20) : color.new(color.gray, 20)
plot(volume, color=vsaColor, style=plot.style_columns, title="VSA Volume")

// 2. CVD Cumulative Overlay
volumeScaleMax = ta.highest(volume, cvdLookback)
cvdMax = ta.highest(lastVolume, cvdLookback)
cvdMin = ta.lowest(lastVolume, cvdLookback)
cvdRange = cvdMax - cvdMin
scaleFactor = cvdRange > 0 ? volumeScaleMax / cvdRange * 0.8 : 1
scaledOpen = (openVolume - cvdMin) * scaleFactor
scaledHigh = (maxVolume - cvdMin) * scaleFactor
scaledLow = (minVolume - cvdMin) * scaleFactor
scaledClose = (lastVolume - cvdMin) * scaleFactor
cvdIsBull = lastVolume >= openVolume
cvdBodyColor = cvdIsBull ? color.new(cvdBullColor, cvdTransparency) : color.new(cvdBearColor, cvdTransparency)
plotcandle(scaledOpen, scaledHigh, scaledLow, scaledClose, title="CVD Cumulative Overlay", color=cvdBodyColor, bordercolor=na, wickcolor=cvdBodyColor)
hline(0, title="Baseline", color=color.new(color.white, 80), linestyle=hline.style_dashed)

// 3. Divergence Signals and logic REMOVED (no pivots, no div plots)

// 4. Dashboard (UPDATED)
if showDashboard and barstate.islast
    if na(dashboard)
        dashboard := table.new(position.top_right, 2, 6, border_width=1, border_color=color.new(color.gray, 50))
    table.clear(dashboard, 0, 0, 1, 5)

    // CVD values
    float cvd_current = nz(lastVolume)
    float cvd_anchor = nz(openVolume)
    float cvd_delta_perbar = nz(cvd_delta_current_bar)
    float cvd_total_delta = nz(cvd_delta_since_anchor)

    string cvdText = str.tostring(math.round(cvd_current, 0))
    string cvdDeltaPerBarText = (cvd_delta_perbar > 0 ? "+" : "") + str.tostring(math.round(cvd_delta_perbar, 0))
    string cvdDeltaAnchorText = (cvd_total_delta > 0 ? "+" : "") + str.tostring(math.round(cvd_total_delta, 0))

    // Volume strength / classification
    float curVol = nz(volume)
    string volText = str.tostring(math.round(curVol, 0))
    string volConfirm = isUltraHigh ? "ULTRA HIGH" : isVeryHigh ? "VERY HIGH" : isHigh ? "HIGH" : "LOW"
    string volInfo = volText + " | " + volConfirm

    // Priority / highlight (no divergence dependency)
    string volPrioText = isUltraHigh ? "â˜…â˜…â˜…" : isVeryHigh ? "â˜…â˜…" : isHigh ? "â˜…" : " "
    color volPrioColor = color.blue
    bgcolor_ultra = isUltraHigh ? (isAccumulationBar ? color.new(color.lime, 85) : isDistributionBar ? color.new(color.orange, 85) : color.new(color.gray, 90)) : na

    // Header
    table.cell(dashboard, 0, 0, "VSA+CVD ANALYSIS", bgcolor=color.new(color.black, 20), text_color=color.white, text_size=size.small)
    table.cell(dashboard, 1, 0, "Value", bgcolor=color.new(color.black, 20), text_color=color.white, text_size=size.small)

    dataTextColor = not na(bgcolor_ultra) ? color.white : color.black

    // Row 1: Volume Strength
    table.cell(dashboard, 0, 1, "Volume:", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 1, volInfo, text_halign=text.align_right, text_color=not na(bgcolor_ultra) ? color.white : color.black, bgcolor=bgcolor_ultra, text_size=size.small)

    // Row 2: Priority
    table.cell(dashboard, 0, 2, "Priority:", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 2, volPrioText, text_halign=text.align_right, text_color=not na(bgcolor_ultra) ? color.white : volPrioColor, bgcolor=bgcolor_ultra, text_size=size.small)

    // Row 3: CVD and per-bar delta
    table.cell(dashboard, 0, 3, "CVD (Î”bar):", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 3, cvdText + " (" + cvdDeltaPerBarText + ")", text_halign=text.align_right, text_color=not na(bgcolor_ultra) ? color.white : (cvd_delta_perbar >= 0 ? color.green : color.red), bgcolor=na, text_size=size.small)

    // Row 4: Confidence
    string confidenceText = isUltraHigh ? "High" : isVeryHigh ? "Medium" : isHigh ? "Low" : "Very Low"
    table.cell(dashboard, 0, 4, "Confidence:", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 4, confidenceText, text_halign=text.align_right, text_color=dataTextColor, bgcolor=bgcolor_ultra, text_size=size.small)

// ==============================================================================================
// ALERTS (UPDATED - divergence alerts removed)
// ==============================================================================================
// Accumulation / Distribution: split into two const alerts each (ULTRA / VERY)
alertcondition(isAccumulationBar and isUltraHigh, "â˜…â˜… Accumulation (ULTRA)", "Accumulation | ULTRA HIGH | Confidence: High")
alertcondition(isAccumulationBar and isVeryHigh, "â˜…â˜… Accumulation (VERY HIGH)", "Accumulation | VERY HIGH | Confidence: Medium")
alertcondition(isDistributionBar and isUltraHigh, "â˜…â˜… Distribution (ULTRA)", "Distribution | ULTRA HIGH | Confidence: High")
alertcondition(isDistributionBar and isVeryHigh, "â˜…â˜… Distribution (VERY HIGH)", "Distribution | VERY HIGH | Confidence: Medium")