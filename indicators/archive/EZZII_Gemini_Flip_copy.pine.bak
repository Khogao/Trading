//@version=5
indicator("EZZ1 KV-TF v1.0", overlay=true, max_boxes_count=120, max_labels_count=200)

// =============================================================================================
// 5W1H — WHAT/WHY/WHEN/HOW/WHERE (tóm tắt trong code)
// WHAT  : KV Zones đa-TF (5m, 15m, và Chart‑TF) + tín hiệu entry (retest/BO) + risk overlay
// WHY   : Giảm nhiễu, có bối cảnh top‑down; zone có vòng đời (throttle/invalidate/max-age)
// WHEN  : Dùng cho crypto (BTC/ETH/Alts) phong cách scalping/day-trading
// HOW   : Triggers (body vs ATR, wick/body, confirm on close), vẽ box cho từng TF, confluence score
// WHERE : Hiển thị: 1m = 5m+15m; 5m = 5m; 15m = 15m; TF khác = chính TF chart
// =============================================================================================

// ============================= Inputs — KV • Detection & Visuals ===============================
string grp_kv = "KV • Detection & Visuals"
kv_show_zones       = input.bool(true,  "Show KV Zones", group=grp_kv)
kv_zone_len         = input.int(3,      "KV zone swing len (bars)", minval=1, maxval=10, group=grp_kv)
kv_zone_atr         = input.float(0.8,  "KV zone height (x ATR)",   minval=0.1, step=0.1, group=grp_kv)
kv_zone_extend      = input.int(120,    "KV zone extend (bars)",    minval=10,  maxval=500, group=grp_kv)
kv_zone_alpha       = input.int(85,     "KV zone transparency (0–100)", minval=0, maxval=100, group=grp_kv)
kv_pad_bear_atr     = input.float(0.20, "KV Bear pad (x ATR)",      minval=0, step=0.05, group=grp_kv)
kv_pad_bull_atr     = input.float(0.20, "KV Bull pad (x ATR)",      minval=0, step=0.05, group=grp_kv)
kv_swing_lb         = input.int(60,     "KV swing lookback (LTF bars)", minval=5, maxval=400, group=grp_kv)
kv_throttle_bars    = input.int(5,      "KV throttle bars",         minval=1, group=grp_kv)
kv_show_labels      = input.bool(true,  "Show KV Zone Labels",      group=grp_kv)
kv_zone_invalidate  = input.bool(true,  "Invalidate KV Zone on TF close cross", group=grp_kv)
kv_invalidate_delete= input.bool(false, "Delete zone on invalidation", group=grp_kv)
kv_max_age_htf      = input.int(10,     "KV Zone Max Age (TF bars, 0=off)", minval=0, group=grp_kv)
kv_debug_events     = input.bool(false, "Show KV debug triangles",   group=grp_kv)
kv_confirm_on_close = input.bool(true,  "KV confirm on close",       group=grp_kv)
kv_atr_len          = input.int(14,     "KV ATR length",             minval=1, group=grp_kv)
kv_min_body_atr     = input.float(0.10, "KV min body vs ATR",        minval=0.0, step=0.01, group=grp_kv)
kv_wick_mult        = input.float(1.5,  "KV wick/body ratio",        minval=0.5, step=0.1,  group=grp_kv)

// ============================= Inputs — Signals • Entries =====================================
string grp_sig = "Signals • Entries"
sig_show           = input.bool(true,  "Show Buy/Sell",                   group=grp_sig)
sig_retest_only    = input.bool(true,  "Only take retest inside KV",      group=grp_sig)
sig_min_body_atr   = input.float(0.20, "Signal: min body vs ATR",  step=0.01, minval=0.0, group=grp_sig)
sig_wick_rej_mult  = input.float(1.5,  "Signal: wick/body ratio",  step=0.1,  minval=0.5, group=grp_sig)
sig_use_volume     = input.bool(true,  "Require volume spike",            group=grp_sig)
sig_throttle_bars  = input.int(6,      "Signal throttle (bars)",   minval=1,  group=grp_sig)

// Volume filter
string grp_vol = "Volume Filter"
vol_multiplier = input.float(2.0, "Volume Spike Multiplier", minval=1.0, group=grp_vol)
lookback       = input.int(20,    "Volume Lookback Period",             group=grp_vol)

// ============================= TF flags =========================================================
int SEC_1  = 60
int SEC_5  = 60 * 5
int SEC_15 = 60 * 15
tfsec     = timeframe.in_seconds(timeframe.period)
is_1m     = tfsec == SEC_1
show_5m   = is_1m or tfsec == SEC_5
show_15m  = is_1m or tfsec == SEC_15
show_curr = not show_5m and not show_15m   // TF khác → dùng chính TF chart

// ============================= Helper: Unified trigger =========================================
kv_trigger(_close, _open, _hl, _is_bull, _confirm_close, _zone_len, _min_body_atr, _atr_len, _wick_mult, _mintick) =>
    level   = _is_bull ? ta.lowest(_close, _zone_len)[1] : ta.highest(_close, _zone_len)[1]
    src     = _confirm_close ? _close : _hl
    crossed = _is_bull ? ta.crossunder(src, level) : ta.crossover(src, level)
    atrv    = ta.atr(_atr_len)
    body    = math.abs(_close - _open)
    wick    = _is_bull ? (math.min(_open, _close) - _hl) : (_hl - math.max(_open, _close))
    strong  = (body >= _min_body_atr * atrv) or (wick / math.max(body, _mintick) >= _wick_mult * 0.75)
    crossed and strong

// ============================= Pull HTF data via tuples ========================================
f_kv_tuple(_zone_len, _min_body_atr, _atr_len, _wick_mult, _mintick, _swing_lb) =>
    // Remove tuple assignment, just return the tuple as a list
    [
        high,
        low,
        ta.atr(_atr_len),
        bar_index,
        close,
        kv_trigger(close, open, high, false, kv_confirm_on_close, _zone_len, _min_body_atr, _atr_len, _wick_mult, _mintick),
        kv_trigger(close, open, low,  true,  kv_confirm_on_close, _zone_len, _min_body_atr, _atr_len, _wick_mult, _mintick),
        ta.highest(high, _swing_lb),
        ta.lowest(low, _swing_lb)
    ]

[h5, l5, atr5, seq5, cls5, evt5Bear, evt5Bull, sw5Hi, sw5Lo] = request.security(
    syminfo.tickerid, "5",
    f_kv_tuple(kv_zone_len, kv_min_body_atr, kv_atr_len, kv_wick_mult, syminfo.mintick, kv_swing_lb),
    barmerge.gaps_off, barmerge.lookahead_off
)

[h15, l15, atr15, seq15, cls15, evt15Bear, evt15Bull, sw15Hi, sw15Lo] = request.security(
    syminfo.tickerid, "15",
    f_kv_tuple(kv_zone_len, kv_min_body_atr, kv_atr_len, kv_wick_mult, syminfo.mintick, kv_swing_lb),
    barmerge.gaps_off, barmerge.lookahead_off
)

[hC, lC, atrC, seqC, clsC, evtCBear, evtCBull, swCHi, swCLo] = request.security(
    syminfo.tickerid, timeframe.period,
    f_kv_tuple(kv_zone_len, kv_min_body_atr, kv_atr_len, kv_wick_mult, syminfo.mintick, kv_swing_lb),
    barmerge.gaps_off, barmerge.lookahead_off
)

// ============================= Debug triggers ===================================================
plotshape(kv_debug_events and evt5Bear,  title="KV5 bear",  style=shape.triangledown, location=location.abovebar, color=color.new(color.red,   40), size=size.tiny)
plotshape(kv_debug_events and evt5Bull,  title="KV5 bull",  style=shape.triangleup,   location=location.belowbar, color=color.new(color.green, 40), size=size.tiny)
plotshape(kv_debug_events and evt15Bear, title="KV15 bear", style=shape.triangledown, location=location.top,      color=color.new(color.red,   0),  size=size.tiny)
plotshape(kv_debug_events and evt15Bull, title="KV15 bull", style=shape.triangleup,   location=location.bottom,   color=color.new(color.green, 0),  size=size.tiny)

// ============================= Zone state per TF ===============================================
// 5m
var box   kv5_bear_box = na
var box   kv5_bull_box = na
var float kv5_bear_top = na
var float kv5_bear_bot = na
var float kv5_bull_top = na
var float kv5_bull_bot = na
var int   kv5_bear_seq = na
var int   kv5_bull_seq = na
var label kv5_bear_lbl = na
var label kv5_bull_lbl = na
// 15m
var box   kv15_bear_box = na
var box   kv15_bull_box = na
var float kv15_bear_top = na
var float kv15_bear_bot = na
var float kv15_bull_top = na
var float kv15_bull_bot = na
var int   kv15_bear_seq = na
var int   kv15_bull_seq = na
var label kv15_bear_lbl = na
var label kv15_bull_lbl = na
// Chart‑TF
var box   kvC_bear_box = na
var box   kvC_bull_box = na
var float kvC_bear_top = na
var float kvC_bear_bot = na
var float kvC_bull_top = na
var float kvC_bull_bot = na
var int   kvC_bear_seq = na
var int   kvC_bull_seq = na
var label kvC_bear_lbl = na
var label kvC_bull_lbl = na

// ============================= Helper: in-zone check ===========================================
f_in_zone(_hi, _lo, _top, _bot) => not na(_top) and not na(_bot) and _hi >= _bot and _lo <= _top

// ============================= Unified zone update =============================================
f_update_kv(tf_is_active, evtBear, evtBull, h, l, atrv, swingHi, swingLo, seq, cls,
            bear_box, bull_box, bear_top, bear_bot, bull_top, bull_bot, bear_seq, bull_seq,
            lab_on, lab_txt_bear, lab_txt_bull, bear_lbl, bull_lbl) =>
    // Create BEAR
    if tf_is_active and evtBear and kv_show_zones
        top = math.max(h, swingHi) + atrv * kv_pad_bear_atr
        bot = top - atrv * kv_zone_atr
        can_new = na(bear_seq) or (seq - bear_seq >= kv_throttle_bars)
        if can_new
            if not na(bear_box)
                box.delete(bear_box)
                if not na(bear_lbl)
                    label.delete(bear_lbl)
            bear_box := box.new(bar_index, top, bar_index + kv_zone_extend, bot)
            box.set_border_color(bear_box, color.red)
            box.set_bgcolor(bear_box, color.new(color.red, kv_zone_alpha))
            if lab_on
                bear_lbl := label.new(bar_index, top, lab_txt_bear, style=label.style_label_down, textcolor=color.red, color=color.new(color.red, 90), size=size.tiny)
            bear_top := top
            bear_bot := bot
            bear_seq := seq
    // Create BULL
    if tf_is_active and evtBull and kv_show_zones
        bot2 = math.min(l, swingLo) - atrv * kv_pad_bull_atr
        top2 = bot2 + atrv * kv_zone_atr
        can_new2 = na(bull_seq) or (seq - bull_seq >= kv_throttle_bars)
        if can_new2
            if not na(bull_box)
                box.delete(bull_box)
                if not na(bull_lbl)
                    label.delete(bull_lbl)
            bull_box := box.new(bar_index, top2, bar_index + kv_zone_extend, bot2)
            box.set_border_color(bull_box, color.green)
            box.set_bgcolor(bull_box, color.new(color.green, kv_zone_alpha))
            if lab_on
                bull_lbl := label.new(bar_index, bot2, lab_txt_bull, style=label.style_label_up, textcolor=color.green, color=color.new(color.green, 90), size=size.tiny)
            bull_top := top2
            bull_bot := bot2
            bull_seq := seq
    // Invalidate by TF close (only after creation)
    if tf_is_active and kv_zone_invalidate
        // Bear fail
        if not na(bear_box) and not na(bear_top) and seq > bear_seq and cls > bear_top
            if kv_invalidate_delete
                box.delete(bear_box)
                bear_box := na
                bear_top := na
                bear_bot := na
                bear_seq := na
                if not na(bear_lbl)
                    label.delete(bear_lbl)
                    bear_lbl := na
            else
                box.set_right(bear_box, bar_index)
        // Bull fail
        if not na(bull_box) and not na(bull_bot) and seq > bull_seq and cls < bull_bot
            if kv_invalidate_delete
                box.delete(bull_box)
                bull_box := na
                bull_top := na
                bull_bot := na
                bull_seq := na
                if not na(bull_lbl)
                    label.delete(bull_lbl)
                    bull_lbl := na
            else
                box.set_right(bull_box, bar_index)
    // Keep extending & move labels with last bar
    if not na(bear_box)
        box.set_right(bear_box, bar_index + kv_zone_extend)
        if lab_on and not na(bear_lbl)
            label.set_x(bear_lbl, bar_index)
            label.set_y(bear_lbl, bear_top)
    if not na(bull_box)
        box.set_right(bull_box, bar_index + kv_zone_extend)
        if lab_on and not na(bull_lbl)
            label.set_x(bull_lbl, bar_index)
            label.set_y(bull_lbl, bull_bot)
    // Max age (if enabled)
    if kv_show_zones and kv_max_age_htf > 0
        if not na(bear_seq) and (seq - bear_seq > kv_max_age_htf)
            if not na(bear_box)
                box.delete(bear_box)
            if not na(bear_lbl)
                label.delete(bear_lbl)
            bear_box := na
            bear_lbl := na
            bear_top := na
            bear_bot := na
            bear_seq := na
        if not na(bull_seq) and (seq - bull_seq > kv_max_age_htf)
            if not na(bull_box)
                box.delete(bull_box)
            if not na(bull_lbl)
                label.delete(bull_lbl)
            bull_box := na
            bull_lbl := na
            bull_top := na
            bull_bot := na
            bull_seq := na
    [bear_box, bull_box, bear_top, bear_bot, bull_top, bull_bot, bear_seq, bull_seq, bear_lbl, bull_lbl]

// ============================= Update per TF ====================================================
[kv5_bear_box, kv5_bull_box, kv5_bear_top, kv5_bear_bot, kv5_bull_top, kv5_bull_bot, kv5_bear_seq, kv5_bull_seq, kv5_bear_lbl, kv5_bull_lbl] :=
    f_update_kv(show_5m, evt5Bear, evt5Bull, h5, l5, atr5, sw5Hi, sw5Lo, seq5, cls5,
                kv5_bear_box, kv5_bull_box, kv5_bear_top, kv5_bear_bot, kv5_bull_top, kv5_bull_bot, kv5_bear_seq, kv5_bull_seq,
                kv_show_labels, "KV 5m (Bear)", "KV 5m (Bull)", kv5_bear_lbl, kv5_bull_lbl)

[kv15_bear_box, kv15_bull_box, kv15_bear_top, kv15_bear_bot, kv15_bull_top, kv15_bull_bot, kv15_bear_seq, kv15_bull_seq, kv15_bear_lbl, kv15_bull_lbl] :=
    f_update_kv(show_15m, evt15Bear, evt15Bull, h15, l15, atr15, sw15Hi, sw15Lo, seq15, cls15,
                kv15_bear_box, kv15_bull_box, kv15_bear_top, kv15_bear_bot, kv15_bull_top, kv15_bull_bot, kv15_bear_seq, kv15_bull_seq,
                kv_show_labels, "KV 15m (Bear)", "KV 15m (Bull)", kv15_bear_lbl, kv15_bull_lbl)

[kvC_bear_box, kvC_bull_box, kvC_bear_top, kvC_bear_bot, kvC_bull_top, kvC_bull_bot, kvC_bear_seq, kvC_bull_seq, kvC_bear_lbl, kvC_bull_lbl] :=
    f_update_kv(show_curr, evtCBear, evtCBull, hC, lC, atrC, swCHi, swCLo, seqC, clsC,
                kvC_bear_box, kvC_bull_box, kvC_bear_top, kvC_bear_bot, kvC_bull_top, kvC_bull_bot, kvC_bear_seq, kvC_bull_seq,
                kv_show_labels, "KV "+timeframe.period+" (Bear)", "KV "+timeframe.period+" (Bull)", kvC_bear_lbl, kvC_bull_lbl)

// ============================= Signals ===========================================================
// Throttle per side
var int last_b_bar = na
var int last_s_bar = na

// Pick active zones for breakout checks (1m ưu tiên 5m; nếu không có thì 15m; TF khác dùng chính TF)
bool use5  = tfsec == SEC_5 or (is_1m and not na(kv5_bull_top) and not na(kv5_bear_top))
bool use15 = tfsec == SEC_15 or (is_1m and not use5 and (not na(kv15_bull_top) or not na(kv15_bear_top)))

float act_bear_top = use5 ? kv5_bear_top : use15 ? kv15_bear_top : kvC_bear_top
float act_bear_bot = use5 ? kv5_bear_bot : use15 ? kv15_bear_bot : kvC_bear_bot
float act_bull_top = use5 ? kv5_bull_top : use15 ? kv15_bull_top : kvC_bull_top
float act_bull_bot = use5 ? kv5_bull_bot : use15 ? kv15_bull_bot : kvC_bull_bot

// Volume & candle features (current TF)
float vol_ma = ta.sma(volume, lookback)
bool  vol_ok = not sig_use_volume or (volume > vol_ma * vol_multiplier)
float body   = math.abs(close - open)
float upW    = high - math.max(open, close)
float dnW    = math.min(open, close) - low
float atrSig = ta.atr(kv_atr_len)
bool  body_ok = body >= atrSig * sig_min_body_atr

// In-zone checks: 1m xem cả 5m & 15m; TF khác theo TF tương ứng
bool in_bull_5  = f_in_zone(high, low, kv5_bull_top, kv5_bull_bot)
bool in_bear_5  = f_in_zone(high, low, kv5_bear_top, kv5_bear_bot)
bool in_bull_15 = f_in_zone(high, low, kv15_bull_top, kv15_bull_bot)
bool in_bear_15 = f_in_zone(high, low, kv15_bear_top, kv15_bear_bot)
bool in_bull_C  = f_in_zone(high, low, kvC_bull_top, kvC_bull_bot)
bool in_bear_C  = f_in_zone(high, low, kvC_bear_top, kvC_bear_bot)

bool in_bull_zone = is_1m ? (in_bull_5 or in_bull_15) : (tfsec==SEC_5 ? in_bull_5 : tfsec==SEC_15 ? in_bull_15 : in_bull_C)
bool in_bear_zone = is_1m ? (in_bear_5 or in_bear_15) : (tfsec==SEC_5 ? in_bear_5 : tfsec==SEC_15 ? in_bear_15 : in_bear_C)

// Rejection patterns
bool bull_reject = (close > open) and (dnW / math.max(body, syminfo.mintick) >= sig_wick_rej_mult)
bool bear_reject = (close < open) and (upW / math.max(body, syminfo.mintick) >= sig_wick_rej_mult)

// Breakout edge (nếu không bắt buộc retest)
bool bull_break = not na(act_bull_top) and ta.crossover(close, act_bull_top)
bool bear_break = not na(act_bear_bot) and ta.crossunder(close, act_bear_bot)

bool bull_setup = (sig_retest_only ? (in_bull_zone and bull_reject) : ((in_bull_zone and bull_reject) or bull_break)) and body_ok and vol_ok
bool bear_setup = (sig_retest_only ? (in_bear_zone and bear_reject) : ((in_bear_zone and bear_reject) or bear_break)) and body_ok and vol_ok

// Session & bias
int hr = hour(time)
float liq_mult = hr < 8 ? 0.7 : hr < 16 ? 1.0 : hr < 22 ? 1.2 : 0.8
float conf_thr_hi = liq_mult >= 1.1 ? 2.5 : 3.0
ema50_15 = request.security(syminfo.tickerid, "15", ta.ema(close, 50), barmerge.gaps_off, barmerge.lookahead_off)
bool biasUp = close > ema50_15

// Confluence scoring (WHAT: tổng hợp in-zone/volume/wick/bias; WHY: nâng chất lượng tín hiệu)
f_conf_score(in_zone, vol_spike, wick_ok, trend_align, rsi_div) =>
    score = 0.0
    if in_zone
        score += 2.0
    if vol_spike
        score += 1.5
    if wick_ok
        score += 1.0
    if trend_align
        score += 1.0
    if rsi_div
        score += 1.5
    score

float confL = f_conf_score(in_bull_zone, vol_ok, bull_reject, biasUp, false)
float confS = f_conf_score(in_bear_zone, vol_ok, bear_reject, not biasUp, false)

// Throttle + priority
var bool buy_signal  = false
var bool sell_signal = false
bool can_b = na(last_b_bar) or (bar_index - last_b_bar >= sig_throttle_bars)
bool can_s = na(last_s_bar) or (bar_index - last_s_bar >= sig_throttle_bars)

buy_signal  := bull_setup and can_b and (confL >= conf_thr_hi)
sell_signal := bear_setup and can_s and (confS >= conf_thr_hi)

if buy_signal and sell_signal
    buy_signal  := confL > confS
    sell_signal := not buy_signal

if buy_signal
    last_b_bar := bar_index
if sell_signal
    last_s_bar := bar_index

// Plot signals
plotshape(sig_show and buy_signal,  title="B", style=shape.triangleup,   location=location.belowbar, color=color.lime, text="B", size=size.small)
plotshape(sig_show and sell_signal, title="S", style=shape.triangledown, location=location.abovebar,  color=color.red,  text="S", size=size.small)

// ============================= Risk overlay (optional) ==========================================
if sig_show and buy_signal
    float slB = na(act_bull_bot) ? low : act_bull_bot
    float riskB = close - slB
    float tp1B = close + riskB * 1.5
    float tp2B = close + riskB * 2.5
    line.new(bar_index, slB, bar_index+1, slB, extend=extend.right, color=color.new(color.red, 70))
    line.new(bar_index, tp1B, bar_index+1, tp1B, extend=extend.right, color=color.new(color.green, 40))
    line.new(bar_index, tp2B, bar_index+1, tp2B, extend=extend.right, color=color.new(color.green, 20))

if sig_show and sell_signal
    float slS = na(act_bear_top) ? high : act_bear_top
    float riskS = slS - close
    float tp1S = close - riskS * 1.5
    float tp2S = close - riskS * 2.5
    line.new(bar_index, slS, bar_index+1, slS, extend=extend.right, color=color.new(color.red, 70))
    line.new(bar_index, tp1S, bar_index+1, tp1S, extend=extend.right, color=color.new(color.green, 40))
    line.new(bar_index, tp2S, bar_index+1, tp2S, extend=extend.right, color=color.new(color.green, 20))
    line.new(bar_index, tp2S, bar_index+1, tp2S, extend=extend.right, color=color.new(color.green, 20))
    line.new(bar_index, tp2S, bar_index+1, tp2S, extend=extend.right, color=color.new(color.green, 20))
    line.new(bar_index, tp2S, bar_index+1, tp2S, extend=extend.right, color=color.new(color.green, 20))
    float tp2S = close - riskS * 2.5
    line.new(bar_index, slS, bar_index+1, slS, extend=extend.right, color=color.new(color.red, 70))
    line.new(bar_index, tp1S, bar_index+1, tp1S, extend=extend.right, color=color.new(color.green, 40))
    line.new(bar_index, tp2S, bar_index+1, tp2S, extend=extend.right, color=color.new(color.green, 20))
    line.new(bar_index, tp2S, bar_index+1, tp2S, extend=extend.right, color=color.new(color.green, 20))
    line.new(bar_index, tp2S, bar_index+1, tp2S, extend=extend.right, color=color.new(color.green, 20))
    line.new(bar_index, tp2S, bar_index+1, tp2S, extend=extend.right, color=color.new(color.green, 20))
