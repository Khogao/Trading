// ============================================================================

// PROFESSIONAL VSA ENGINE - STRICT VSA / WYCKOFF DNA

//@version=5
indicator("Professional VSA Engine (Strict VSA)", shorttitle="VSA Pro (Strict)", overlay=true, max_labels_count=500)

// === CORE VSA PARAMETERS ===
var string GRP_VSA = "📊 VSA Core Settings"
    volLookback      = input.int(20, "Volume Analysis Period", group=GRP_VSA, minval=5, maxval=100) // ...existing code...
rangeLookback    = input.int(12, "Range Analysis Period", group=GRP_VSA, minval=5, maxval=50)
swingLookback    = input.int(10, "Swing High/Low Period", group=GRP_VSA, minval=3, maxval=30)
climaxLookback   = input.int(40, "Climax Detection Period", group=GRP_VSA, minval=10, maxval=200)

// === THRESHOLDS (no presets, explicit controls) ===
var string GRP_THRESHOLDS = "⚙️ VSA Thresholds"
volThresholdMethod = input.string("Robust Z-score", "Volume Threshold Method", options=["Percentile", "Z-score", "Robust Z-score"], group=GRP_THRESHOLDS)

// Spread multipliers (simple VSA-style)
wideSpreadMultiplier  = input.float(1.30, "Wide Spread Multiplier", group=GRP_THRESHOLDS, step=0.05)
narrowSpreadMultiplier= input.float(0.55, "Narrow Spread Multiplier", group=GRP_THRESHOLDS, step=0.05)

// Percentile thresholds (if using Percentile)
highVolumePercentile    = input.float(82, "High Volume Percentile", group=GRP_THRESHOLDS, minval=50, maxval=99)
lowVolumePercentile     = input.float(18, "Low Volume Percentile", group=GRP_THRESHOLDS, minval=1, maxval=50)
climaxVolumePercentile  = input.float(96, "Climax Volume Percentile", group=GRP_THRESHOLDS, minval=80, maxval=99)

// Z-score thresholds (used when method == Z-score or Robust)
zHighThreshold    = input.float(1.5, "High Volume Z-score", group=GRP_THRESHOLDS, step=0.1)
zClimaxThreshold  = input.float(2.5, "Climax Volume Z-score", group=GRP_THRESHOLDS, step=0.1)
zLowThreshold     = input.float(-0.8, "Low Volume Z-score", group=GRP_THRESHOLDS, step=0.1)

// Display / misc
var string GRP_DISPLAY = "🎨 Display Options"
showDebugInfo       = input.bool(false, "Show Debug Dashboard", group=GRP_DISPLAY)
showVolumeAnalysis  = input.bool(true, "Show Volume Analysis", group=GRP_DISPLAY)
showSignalLabels    = input.bool(true, "Show Signal Labels", group=GRP_DISPLAY)
showLabelOnConfirmed= input.bool(true, "Show labels only on confirmed bars", group=GRP_DISPLAY)
alertCooldownBars   = input.int(3, "Alert cooldown (bars)", group=GRP_DISPLAY, minval=0)

// === UTILITY ===
f_percentileRank(_series, _length) =>
    rank = 0
    current = _series
    for i = 1 to _length
        rank := rank + (_series[i] < current ? 1 : 0)
    _length == 0 ? 0.0 : rank / _length * 100.0

f_safeDiv(n, d) => d != 0 ? n / d : 0

// === CORE VSA ANALYSIS ===
f_analyzeBar() =>
    currentSpread = high - low
    avgSpread = ta.sma(high - low, rangeLookback)
    isWide = currentSpread > avgSpread * wideSpreadMultiplier
    isNarrow = currentSpread < avgSpread * narrowSpreadMultiplier

    // percentile
    volPercentile = f_percentileRank(volume, volLookback)

    // standard z-score (mean/std)
    volMean = ta.sma(volume, volLookback)
    volStd  = ta.stdev(volume, volLookback)
    volZ    = volStd != 0 ? (volume - volMean) / volStd : 0.0

    // robust z-score (median / MAD scaled)
    volMedian = ta.median(volume, volLookback)
    absDev = math.abs(volume - volMedian)
    mad = ta.median(absDev, volLookback)
    madScaled = mad * 1.4826
    robustZ = madScaled != 0 ? (volume - volMedian) / madScaled : volZ

    // collapsed nested ternaries onto single lines to avoid line-continuation parse error
    isHighVol = volThresholdMethod == "Percentile" ? (volPercentile >= highVolumePercentile) : (volThresholdMethod == "Z-score" ? (volZ >= zHighThreshold) : (robustZ >= zHighThreshold))
    isLowVol  = volThresholdMethod == "Percentile" ? (volPercentile <= lowVolumePercentile)  : (volThresholdMethod == "Z-score" ? (volZ <= zLowThreshold)  : (robustZ <= zLowThreshold))
    isClimaxVol = volThresholdMethod == "Percentile" ? (volPercentile >= climaxVolumePercentile) : (volThresholdMethod == "Z-score" ? (volZ >= zClimaxThreshold) : (robustZ >= zClimaxThreshold))

    closeLocation = currentSpread > 0 ? (close - low) / currentSpread : 0.5
    effort = volume
    result = math.abs(close - open)

    isUpBar = close > open
    isDownBar = close < open
    isDoji = math.abs(close - open) <= currentSpread * 0.1

    [isUpBar, isDownBar, isDoji, isWide, isNarrow, isHighVol, isLowVol, isClimaxVol, closeLocation, currentSpread, effort, result, volPercentile, robustZ]

// === MARKET CONTEXT (swing-based, no EMA/ATR) ===
f_getMarketContext() =>
    recentHigh = ta.highest(high, swingLookback)
    recentLow  = ta.lowest(low, swingLookback)
    closeSmaSwing = ta.sma(close, swingLookback)
    // trend by price relative to swing SMA + structure
    uptrend = close > closeSmaSwing and close > recentLow
    downtrend = close < closeSmaSwing and close < recentHigh

    // proximity to swing S/R (percent of swing range)
    swingRange = recentHigh - recentLow
    nearRes = swingRange == 0 ? false : (recentHigh - high) <= swingRange * 0.15
    nearSup = swingRange == 0 ? false : (low - recentLow) <= swingRange * 0.15

    [uptrend, downtrend, nearSup, nearRes, recentLow, recentHigh]

// === MAIN CALC ===
volSma = ta.sma(volume, volLookback)
closeSma10 = ta.sma(close, 10)

// analyze + context
[bar_isUp, bar_isDown, bar_isDoji, bar_isWideSpread, bar_isNarrowSpread, bar_isHighVolume, bar_isLowVolume, bar_isClimaxVolume, bar_closeLocation, bar_spread, bar_effort, bar_result, bar_volPercentile, bar_robustZ] = f_analyzeBar()
[ctx_inUptrend, ctx_inDowntrend, ctx_nearSupport, ctx_nearResistance, ctx_supportLevel, ctx_resistanceLevel] = f_getMarketContext()

// === VSA PATTERN DETECTION (core Wyckoff / VSA) ===
// Spring
isSpring = (low < ctx_supportLevel) and (close > ctx_supportLevel) and (bar_isHighVolume or bar_isClimaxVolume) and (ctx_inDowntrend or ctx_nearSupport)

// Upthrust
isUpthrust = (high > ctx_resistanceLevel) and (close < ctx_resistanceLevel) and (bar_isHighVolume or bar_isClimaxVolume) and (ctx_inUptrend or ctx_nearResistance)

// Selling Climax
hasClimaxVolume_sc = bar_isClimaxVolume or (bar_isHighVolume and volume > ta.highest(volume, climaxLookback) * 0.9)
hasWideSpread_sc = bar_isWideSpread
nearLows_sc = ctx_nearSupport or low <= ta.lowest(low, climaxLookback) * 1.03
goodCloseLocation_sc = bar_closeLocation > 0.25

recentSelling = 0
for i = 1 to 3
    recentSelling += (close[i] < open[i] and volume[i] > volSma[i] * 1.5) ? 1 : 0

isSellingClimax = bar_isDown and hasClimaxVolume_sc and hasWideSpread_sc and nearLows_sc and goodCloseLocation_sc and recentSelling >= 1

// Buying Climax
hasClimaxVolume_bc = bar_isClimaxVolume or (bar_isHighVolume and volume > ta.highest(volume, climaxLookback) * 0.9)
hasWideSpread_bc = bar_isWideSpread
nearHighs_bc = ctx_nearResistance or high >= ta.highest(high, climaxLookback) * 0.97
poorCloseLocation_bc = bar_closeLocation < 0.75

recentBuying = 0
for i = 1 to 3
    recentBuying += (close[i] > open[i] and volume[i] > volSma[i] * 1.5) ? 1 : 0

isBuyingClimax = bar_isUp and hasClimaxVolume_bc and hasWideSpread_bc and nearHighs_bc and poorCloseLocation_bc and recentBuying >= 1

// No Supply
noRecentHeavySelling = true
for i = 1 to 3
    if volume[i] > volSma[i] * 1.5 and close[i] < open[i]
        noRecentHeavySelling := false

isNoSupply = bar_isDown and bar_isNarrowSpread and bar_isLowVolume and (ctx_inDowntrend or close < closeSma10) and bar_closeLocation > 0.4 and noRecentHeavySelling

// No Demand
noRecentHeavyBuying = true
for i = 1 to 3
    if volume[i] > volSma[i] * 1.5 and close[i] > open[i]
        noRecentHeavyBuying := false

isNoDemand = bar_isUp and bar_isNarrowSpread and bar_isLowVolume and (ctx_inUptrend or close > closeSma10) and bar_closeLocation < 0.6 and noRecentHeavyBuying

// Stopping Volume
isStoppingVolume = bar_isDown and (bar_isHighVolume or bar_isClimaxVolume) and bar_closeLocation > 0.6 and (ctx_inDowntrend or ctx_nearSupport)

// Effort vs Result
isEffortVsResult = (bar_isHighVolume or bar_isClimaxVolume) and bar_isNarrowSpread and math.abs(close - open) < bar_spread * 0.3

// === VISUALIZATION / LABELS ===
var label[] vsaLabels = array.new_label()
// replace function to avoid assigning to a mutable parameter; return updated array instead
f_create_or_push_label(_labels, _text, _y, _style, _bgcolor, _textcolor, _size) =>
    lbls = _labels
    if na(lbls)
        lbls := array.new_label()
    // create a new label at current bar index and push it to the array
    l = label.new(x=bar_index, y=_y, xloc=xloc.bar_index, text=_text, style=_style, color=_bgcolor, textcolor=_textcolor, size=_size)
    array.push(lbls, l)
    lbls

if showSignalLabels and (not showLabelOnConfirmed or barstate.isconfirmed)
    // Bullish (green)
    if isSpring
        vsaLabels := f_create_or_push_label(vsaLabels, "SPRING", low, label.style_label_up, color.green, color.white, size.normal)
    if isSellingClimax
        vsaLabels := f_create_or_push_label(vsaLabels, "SC", low, label.style_label_up, color.green, color.black, size.small)
    if isNoSupply
        vsaLabels := f_create_or_push_label(vsaLabels, "NS", low, label.style_label_up, color.green, color.white, size.tiny)
    if isStoppingVolume
        vsaLabels := f_create_or_push_label(vsaLabels, "SV", low, label.style_label_up, color.green, color.black, size.tiny)

    // Bearish (red)
    if isUpthrust
        vsaLabels := f_create_or_push_label(vsaLabels, "UPTHRUST", high, label.style_label_down, color.red, color.white, size.normal)
    if isBuyingClimax
        vsaLabels := f_create_or_push_label(vsaLabels, "BC", high, label.style_label_down, color.red, color.white, size.small)
    if isNoDemand
        vsaLabels := f_create_or_push_label(vsaLabels, "ND", high, label.style_label_down, color.red, color.white, size.tiny)
    if isEffortVsResult
        vsaLabels := f_create_or_push_label(vsaLabels, "EVR", high + bar_spread * 0.5, label.style_none, color.red, color.black, size.tiny)

// === DEBUG (simple) ===
if showDebugInfo and barstate.islast
    var table dbg = table.new(position.top_right, 3, 8, bgcolor=color.white, border_width=1)
    table.cell(dbg, 0, 0, "VSA Strict", bgcolor=color.blue, text_color=color.white)
    table.cell(dbg, 0, 1, "Trend")
    table.cell(dbg, 1, 1, ctx_inUptrend ? "UP" : ctx_inDowntrend ? "DOWN" : "SIDE")
    table.cell(dbg, 0, 2, "VolPct")
    table.cell(dbg, 1, 2, str.tostring(bar_volPercentile, "#") + "%")
    table.cell(dbg, 0, 3, "RobustZ")
    table.cell(dbg, 1, 3, str.tostring(bar_robustZ, "#.##"))
    table.cell(dbg, 0, 4, "Spread")
    table.cell(dbg, 1, 4, bar_isWideSpread ? "WIDE" : bar_isNarrowSpread ? "NARROW" : "NORMAL")
    table.cell(dbg, 0, 5, "CloseLoc")
    table.cell(dbg, 1, 5, str.tostring(bar_closeLocation, "#.##"))

// === ALERTS ===
var int _lastEnsembleAlertBar = na
robustClimax = bar_robustZ >= zClimaxThreshold
percClimax   = bar_volPercentile >= climaxVolumePercentile
strongEnsemble = robustClimax and percClimax
ensembleReady = strongEnsemble and (na(_lastEnsembleAlertBar) or bar_index - _lastEnsembleAlertBar > alertCooldownBars)
if ensembleReady
    _lastEnsembleAlertBar := bar_index

// Define alerts once (remove duplicates)
alertcondition(isSpring,        "Spring Detected",                "VSA Spring - potential bullish reversal")
alertcondition(isUpthrust,      "Upthrust Detected",              "VSA Upthrust - potential bearish reversal")
alertcondition(isSellingClimax, "Selling Climax",                 "VSA Selling Climax - potential bottom")
alertcondition(isBuyingClimax,  "Buying Climax",                  "VSA Buying Climax - potential top")
alertcondition(isNoSupply,      "No Supply",                      "VSA No Supply - bearish exhaustion absent")
alertcondition(isNoDemand,      "No Demand",                      "VSA No Demand - bullish exhaustion absent")
alertcondition(ensembleReady,   "Strong VSA (Robust+Perc)",       "Strong VSA: Robust Z and Percentile both indicate climax (throttled)")
