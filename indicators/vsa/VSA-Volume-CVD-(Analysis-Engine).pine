//@version=6
indicator("VSA Volume + CVD (Analysis Engine)", "VSA+CVD v2.5", format=format.volume, precision=0)

import TradingView/ta/8

// ==============================================================================================
// VSA & VAD SETTINGS
// ==============================================================================================
var string GRP_VSA = "VSA Volume Settings"
lengthVolumeMA = input.int(20, title="Length of Volume MA", minval=1, group=GRP_VSA)
vsa_zscore_sensitivity = input.float(1.8, title="VSA Z-score Sensitivity", minval=0.5, maxval=4.0, step=0.1, group=GRP_VSA, tooltip="NgÆ°á»¡ng Z-score cho 'High Volume'. Ultra High = 1.5x ngÆ°á»¡ng. Very High = 1.2x.")

// ==============================================================================================
// CVD SETTINGS
// ==============================================================================================
var string GRP_CVD = "CVD Settings"
anchorInput = input.timeframe("1D", "Anchor period (Reset point)", group=GRP_CVD)
cvdLookback    = input.int(50, "CVD Scaling Lookback", group=GRP_CVD, tooltip="Sá»‘ náº¿n Ä‘á»ƒ scale lá»›p phá»§ CVD.")
cvdTransparency = input.int(80, "CVD Transparency", minval=0, maxval=100, group=GRP_CVD)
cvdBullColor   = input.color(color.new(color.blue, 0), "CVD Bull Color", group=GRP_CVD)
cvdBearColor   = input.color(color.new(color.orange, 0), "CVD Bear Color", group=GRP_CVD)

// ==============================================================================================
// DIVERGENCE & ANALYSIS SETTINGS (NEW)
// ==============================================================================================
var string GRP_ANALYSIS = "ðŸ§  Analysis Engine"
showDivergence = input.bool(true, title="Show Divergence Signals", group=GRP_ANALYSIS)
divLookback = input.int(5, "Divergence Pivot Lookback", minval=3, maxval=15, group=GRP_ANALYSIS)
showDashboard = input.bool(true, title="Show Dashboard", group=GRP_ANALYSIS)

// Add persistent table handle (init on demand)
var table dashboard = na

// ==============================================================================================
// CORE CALCULATIONS
// ==============================================================================================

// --- VSA Z-Score Engine ---
f_calculateZScore(value, length) =>
    mean = ta.sma(value, length)
    std_dev = ta.stdev(value, length)
    std_dev > 0 ? (value - mean) / std_dev : 0

vol_zscore = f_calculateZScore(volume, lengthVolumeMA)
volumeMA = ta.sma(volume, lengthVolumeMA)

bool isUltraHigh = vol_zscore >= vsa_zscore_sensitivity * 1.5
bool isVeryHigh  = vol_zscore >= vsa_zscore_sensitivity * 1.2 and vol_zscore < vsa_zscore_sensitivity * 1.5
bool isHigh      = vol_zscore >= vsa_zscore_sensitivity
bool isNormal    = vol_zscore >= vsa_zscore_sensitivity * 0.5 and vol_zscore < vsa_zscore_sensitivity
bool isLow       = vol_zscore > 0 and vol_zscore < vsa_zscore_sensitivity * 0.5
bool isVeryLow   = vol_zscore <= 0

// --- CVD Data Engine ---
[openVolume, maxVolume, minVolume, lastVolume] = ta.requestVolumeDelta(timeframe.period, anchorInput)
// removed intrabar requestVolumeDelta(..., timeframe.period)
// True intrabar delta trÃªn cÃ¹ng scale cá»§a anchor: thay Ä‘á»•i so vá»›i giÃ¡ trá»‹ táº¡i Ä‘Ã³ng náº¿n trÆ°á»›c
cvd_delta_current_bar = nz(lastVolume) - nz(lastVolume[1])

cvdMax = ta.highest(lastVolume, cvdLookback)
cvdMin = ta.lowest(lastVolume, cvdLookback)

cvdRange = cvdMax - cvdMin
scaleFactor = cvdRange > 0 ? (volumeScaleMax / cvdRange) * 0.8 : 1

scaledOpen = (openVolume - cvdMin) * scaleFactor
scaledHigh = (maxVolume - cvdMin) * scaleFactor
scaledLow = (minVolume - cvdMin) * scaleFactor
scaledClose = (lastVolume - cvdMin) * scaleFactor
