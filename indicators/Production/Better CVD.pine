//@version=6
// ============================================================================
// TITLE: Pure CVD Divergence Engine (C+P & C+V)
// AUTHOR: Khogao + AI Assistant (100% our code)
// INSPIRATION: Greg's philosophy - "Simple, data-driven, order flow first"
// ============================================================================
// DESC: A pure order flow divergence indicator. It combines clean UI with 
// a dual divergence engine to detect both Price vs. CVD (C+P) and Volume vs. 
// CVD (C+V) divergences. Features DGT Z-Score normalization (unbounded indicator 
// methodology) and Luc_Trader volume confirmation filters.
// 
// AUTHORSHIP NOTE:
// - Greg provided: Trading philosophy (patience, risk management)
// - We built: 100% of this indicator code, research, and implementation
// ============================================================================
indicator("Pure CVD Divergence Engine", "CVD Div Engine", overlay=false)

// ==============================================================================================
// IMPORTS
// ==============================================================================================
import TradingView/ta/8

// ==============================================================================================
// INPUTS
// ==============================================================================================
// --- 1. CVD Calculation ---
const string GRP_CVD = "1. CVD Calculation"
anchorInput = input.timeframe("D", "CVD Anchor Period", group = GRP_CVD, tooltip = "The timeframe to reset the CVD calculation. 'D' is recommended for intraday analysis.")
useCustomTimeframeInput = input.bool(false, "Use Custom Lower Timeframe", group = GRP_CVD)
lowerTimeframeInput = input.timeframe("1", "Lower Timeframe", group = GRP_CVD)

// --- 2. MA & Bollinger Bands ---
const string GRP_MA_BB = "2. MA & BB Settings"
maTypeInput = input.string("SMA", "MA Type", options=["SMA", "EMA", "WMA", "VWMA"], group = GRP_MA_BB)
maLengthInput = input.int(20, "MA Length", group = GRP_MA_BB)
bbMultInput = input.float(2.0, "BB StdDev", minval=0.001, maxval=50, group = GRP_MA_BB)
showBollingerBands = input.bool(true, "Show Bollinger Bands", group = GRP_MA_BB)

// --- 3. Divergence Engine ---
const string GRP_DIVERGENCE = "3. Divergence Engine"
// C+P
showRegular = input.bool(true, "C+P: Show Regular Divergence", group = GRP_DIVERGENCE, inline="cp_div")
showHidden = input.bool(true, "C+P: Show Hidden Divergence", group = GRP_DIVERGENCE, inline="cp_div")
// C+V
showCvdVolRegular = input.bool(true, "C+V: Show Regular Divergence", group = GRP_DIVERGENCE, inline="cv_div")
showCvdVolHidden = input.bool(false, "C+V: Show Hidden Divergence", group = GRP_DIVERGENCE, inline="cv_div", tooltip="Hidden Volume divergences are experimental and often noisy. Use with caution.")
// Z-Score Normalization (DGT Method for unbounded indicators)
useZScorePivots = input.bool(true, "🎓 Use Z-Score Normalized Pivots", group = GRP_DIVERGENCE, tooltip="Professional approach from 'Enhanced Divergence Indicator' by DGT. Normalizes CVD to detect statistically significant pivots across all market conditions. Recommended for CVD (unbounded indicator).")
zScoreLength = input.int(20, "Z-Score Length", group = GRP_DIVERGENCE, tooltip="Lookback period for Z-Score calculation. Default 20 bars.")
// Pivot Settings
lookbackLeft = input.int(5, "Pivot Lookback Left", group = GRP_DIVERGENCE)
lookbackRight = input.int(5, "Pivot Lookback Right", group = GRP_DIVERGENCE)
rangeLower = input.int(5, "Min Bars Between Pivots", group = GRP_DIVERGENCE)
rangeUpper = input.int(60, "Max Bars Between Pivots", group = GRP_DIVERGENCE)
maxDivergences = input.int(15, "Max Divergence Lines", group = GRP_DIVERGENCE, tooltip="Limits the number of divergence lines/labels to keep the chart clean.")

// --- 3.5 Volume Confirmation Filter ---
const string GRP_VOL_FILTER = "3.5 Volume Filter (Optional)"
enableVolumeFilter = input.bool(false, "Enable Volume Confirmation", group = GRP_VOL_FILTER, tooltip="Filter divergences based on volume behavior. Regular: requires volume exhaustion. Hidden Bear: requires volume trap.")
volumeMA_Length = input.int(20, "Volume MA Length", group = GRP_VOL_FILTER)
volumeThreshold = input.float(1.2, "Volume Threshold Multiplier", minval=0.5, maxval=3.0, step=0.1, group = GRP_VOL_FILTER, tooltip="Regular: Volume < (MA / threshold) for exhaustion. Hidden Bear: Volume > (MA * threshold) for trap.")
enablePivotStrengthFilter = input.bool(false, "Enable Pivot Strength Filter", group = GRP_VOL_FILTER, tooltip="Only show divergences where CVD pivot move is significant (> 0.5 ATR).")
pivotStrengthThreshold = input.float(0.5, "Pivot Strength (ATR Multiple)", minval=0.1, maxval=2.0, step=0.1, group = GRP_VOL_FILTER, tooltip="Minimum CVD pivot change required, measured in ATR multiples.")

// --- 4. Display & Styling ---
const string GRP_DISPLAY = "4. Display & Styling"
plotStyle = input.string("Line with MA", "Plot Style", options=["Line with MA", "Candles"], group = GRP_DISPLAY)
showZScorePlot = input.bool(false, "Show Z-Score CVD Overlay", group = GRP_DISPLAY, tooltip="Display normalized Z-Score CVD (gray line) to see statistical deviations from mean. Useful for understanding pivot significance.")
showTable = input.bool(true, "Show Multi-TF CVD Table", group = GRP_DISPLAY, tooltip="Display CVD trend across multiple timeframes (5m, 15m, 1H, 4H)")
tablePosition = input.string("top_right", "Table Position", options=["top_left", "top_right", "bottom_left", "bottom_right"], group = GRP_DISPLAY)
// C+P Colors
bullColor = input.color(color.new(#2962FF, 0), "C+P Bull", group = GRP_DISPLAY, inline="cp_col")
bearColor = input.color(color.new(#FF1744, 0), "C+P Bear", group = GRP_DISPLAY, inline="cp_col")
hiddenBullColor = input.color(color.new(#2962FF, 50), "C+P Hidden Bull", group = GRP_DISPLAY, inline="cph_col")
hiddenBearColor = input.color(color.new(#FF1744, 50), "C+P Hidden Bear", group = GRP_DISPLAY, inline="cph_col")
// C+V Colors
cvdVolBullColor = input.color(color.new(color.teal, 0), "C+V Bull", group = GRP_DISPLAY, inline="cv_col")
cvdVolBearColor = input.color(color.new(color.maroon, 0), "C+V Bear", group = GRP_DISPLAY, inline="cv_col")
cvdVolHiddenBullColor = input.color(color.new(color.teal, 60), "C+V Hidden Bull", group = GRP_DISPLAY, inline="cvh_col")
cvdVolHiddenBearColor = input.color(color.new(color.maroon, 60), "C+V Hidden Bear", group = GRP_DISPLAY, inline="cvh_col")
// BG Colors
bullAlertBG = input.color(color.new(color.green, 90), "Bull Alert BG", group = GRP_DISPLAY)
bearAlertBG = input.color(color.new(color.red, 90), "Bear Alert BG", group = GRP_DISPLAY)


// ==============================================================================================
// FUNCTIONS
// ==============================================================================================
// MA Calculation
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "WMA" => ta.wma(source, length)
        => ta.vwma(source, length)

// Lower Timeframe Resolution
f_lowerTf() =>
    string result = "60"
    if useCustomTimeframeInput
        result := lowerTimeframeInput
    else if timeframe.isseconds
        result := "1S"
    else if timeframe.isintraday
        result := "1"
    else if timeframe.isdaily
        result := "5"
    result

// CVD "Close" Value
f_cvdClose(string tf, string anchor) =>
    [_o, _h, _l, _c] = ta.requestVolumeDelta(tf, anchor)
    _c

// ==============================================================================================
// CORE CALCULATIONS
// ==============================================================================================
string lowerTimeframe = f_lowerTf()
[openVolume, maxVolume, minVolume, lastVolume] = ta.requestVolumeDelta(lowerTimeframe, anchorInput)
cvdSource = lastVolume
cvdMA = ma(cvdSource, maLengthInput, maTypeInput)

// Bollinger Bands
bbMA = ta.sma(cvdSource, maLengthInput)
bbStdDev = ta.stdev(cvdSource, maLengthInput) * bbMultInput
bbUpper = bbMA + bbStdDev
bbLower = bbMA - bbStdDev

// ==============================================================================================
// Z-SCORE NORMALIZATION (DGT Method for CVD)
// ==============================================================================================
// Formula: z = (CVD - Mean) / StdDev
// This normalizes unbounded CVD to standard deviations from mean
// Makes pivots meaningful across different market conditions and timeframes
cvd_zscore_ma = ta.sma(cvdSource, zScoreLength)
cvd_zscore_stdev = ta.stdev(cvdSource, zScoreLength)
cvd_zscore = cvd_zscore_stdev > 0 ? (cvdSource - cvd_zscore_ma) / cvd_zscore_stdev : 0

// Pivot detection source: Use Z-Score if enabled, otherwise raw CVD
pivotSource = useZScorePivots ? cvd_zscore : cvdSource

// ==============================================================================================
// VOLUME CONFIRMATION FILTER (Optional - Luc_Trader Method)
// ==============================================================================================
// Trading Logic:
//  - Regular Divergences: Cần volume CẠN KIỆT (exhaustion) → Xu hướng cũ yếu đi
//  - Hidden Bear: Cần volume BẪY (trap) → Fake breakout với volume cao
//  - Hidden Bull: Cần volume THẤP ở pullback → Healthy retracement, không có áp lực bán thực sự
//
// Tham khảo: HiveScale OP - "Low volume pullback = retail scared, institutions holding"
//            Greg's Rule #4 - "Volume tells you WHO is participating"
volumeMA = ta.sma(volume, volumeMA_Length)
atr_for_pivot_strength = ta.atr(14)

// Volume conditions (only used if enableVolumeFilter = true)
volume_at_current_pivot = volume[lookbackRight]
isVolumeExhaustion = volume_at_current_pivot < (volumeMA / volumeThreshold)     // Regular: Volume cạn kiệt = xu hướng cũ yếu
isVolumeTrap = volume_at_current_pivot > (volumeMA * volumeThreshold)           // Hidden Bear: Volume cao = bẫy tăng giá
isVolumeLowPullback = volume_at_current_pivot < (volumeMA / volumeThreshold)    // Hidden Bull: Volume thấp = pullback lành mạnh

// ==============================================================================================
// DIVERGENCE ENGINE (C+P and C+V)
// ==============================================================================================

// --- Pivot Detection ---
// Detect pivots on normalized source (Z-Score CVD) for statistically significant pivots
// or on raw CVD if Z-Score is disabled (traditional method)
plVal = ta.pivotlow(pivotSource, lookbackLeft, lookbackRight)
phVal = ta.pivothigh(pivotSource, lookbackLeft, lookbackRight)
plFound = not na(plVal)
phFound = not na(phVal)

// --- Store Raw CVD Values for Line Drawing ---
// When Z-Score is enabled, plVal/phVal are normalized values (-2 to +2)
// We need raw CVD values for accurate line positioning on CVD chart
pl_cvd_raw = plFound ? cvdSource[lookbackRight] : na
ph_cvd_raw = phFound ? cvdSource[lookbackRight] : na
prev_pl_cvd_raw = ta.valuewhen(plFound[1], pl_cvd_raw[1], 0)
prev_ph_cvd_raw = ta.valuewhen(phFound[1], ph_cvd_raw[1], 0)

// --- Previous Pivot Values ---
// We check for a pivot found on the *previous* bar (`[1]`) to ensure the pivot is confirmed.
pl_barssince_1 = ta.barssince(plFound[1])
ph_barssince_1 = ta.barssince(phFound[1])

// Value of the last confirmed pivot
prev_plVal = ta.valuewhen(plFound[1], plVal[1], 0)
prev_phVal = ta.valuewhen(phFound[1], phVal[1], 0)

// Bar index of the last confirmed pivot
// We need to subtract lookbackRight because the pivot was formed lookbackRight bars ago
prev_plBar = ta.valuewhen(plFound[1], bar_index[1] - lookbackRight, 0)
prev_phBar = ta.valuewhen(phFound[1], bar_index[1] - lookbackRight, 0)

// Price values at the last confirmed pivot
prev_low_at_pl = ta.valuewhen(plFound[1], low[lookbackRight+1], 0)
prev_high_at_ph = ta.valuewhen(phFound[1], high[lookbackRight+1], 0)

// Volume values at the last confirmed CVD pivot
prev_vol_at_pl = ta.valuewhen(plFound[1], volume[lookbackRight+1], 0)
prev_vol_at_ph = ta.valuewhen(phFound[1], volume[lookbackRight+1], 0)


// --- Condition Checks ---
// Check if the current pivot is within the allowed bar range from the previous one.
inRangePL = pl_barssince_1 >= rangeLower and pl_barssince_1 <= rangeUpper
inRangePH = ph_barssince_1 >= rangeLower and ph_barssince_1 <= rangeUpper

// --- C+P: CVD vs Price Divergence ---
// Regular Bullish: Price makes a Lower Low, CVD makes a Higher Low.
priceLL = low[lookbackRight] < prev_low_at_pl
cvdHL = plVal > prev_plVal
// Volume filter: Regular divergences benefit from volume exhaustion (sellers weakening)
volumeFilter_RegularBull = not enableVolumeFilter or isVolumeExhaustion
// Pivot strength filter: CVD pivot change must be significant
pivotStrength_Bull = math.abs(plVal - prev_plVal) / atr_for_pivot_strength
pivotStrengthFilter_Bull = not enablePivotStrengthFilter or (pivotStrength_Bull > pivotStrengthThreshold)
bullCond = showRegular and plFound and inRangePL and priceLL and cvdHL and volumeFilter_RegularBull and pivotStrengthFilter_Bull

// Regular Bearish: Price makes a Higher High, CVD makes a Lower High.
priceHH = high[lookbackRight] > prev_high_at_ph
cvdLH = phVal < prev_phVal
// Volume filter: Regular divergences benefit from volume exhaustion (buyers weakening)
volumeFilter_RegularBear = not enableVolumeFilter or isVolumeExhaustion
// Pivot strength filter: CVD pivot change must be significant
pivotStrength_Bear = math.abs(phVal - prev_phVal) / atr_for_pivot_strength
pivotStrengthFilter_Bear = not enablePivotStrengthFilter or (pivotStrength_Bear > pivotStrengthThreshold)
bearCond = showRegular and phFound and inRangePH and priceHH and cvdLH and volumeFilter_RegularBear and pivotStrengthFilter_Bear

// Hidden Bullish: Price makes a Higher Low, CVD makes a Lower Low.
priceHL = low[lookbackRight] > prev_low_at_pl
cvdLL = plVal < prev_plVal
// Volume filter: Hidden Bull benefits from low volume (healthy pullback, few sellers following)
volumeFilter_HiddenBull = not enableVolumeFilter or isVolumeLowPullback
pivotStrengthFilter_HiddenBull = not enablePivotStrengthFilter or (pivotStrength_Bull > pivotStrengthThreshold)
hiddenBullCond = showHidden and plFound and inRangePL and priceHL and cvdLL and volumeFilter_HiddenBull and pivotStrengthFilter_HiddenBull

// Hidden Bearish: Price makes a Lower High, CVD makes a Higher High.
priceLH = high[lookbackRight] < prev_high_at_ph
cvdHH = phVal > prev_phVal
// Volume filter: Hidden Bear benefits from high volume (trap: many buyers at fake breakout)
volumeFilter_HiddenBear = not enableVolumeFilter or isVolumeTrap
pivotStrengthFilter_HiddenBear = not enablePivotStrengthFilter or (pivotStrength_Bear > pivotStrengthThreshold)
hiddenBearCond = showHidden and phFound and inRangePH and priceLH and cvdHH and volumeFilter_HiddenBear and pivotStrengthFilter_HiddenBear

// --- C+V: CVD vs Volume Divergence ---
// Regular Bullish: CVD makes a Higher Low, but Volume at the pivot is lower. (Exhaustion)
volLL_at_pl = volume[lookbackRight] < prev_vol_at_pl
cvdVolBullRegular = showCvdVolRegular and plFound and inRangePL and cvdHL and volLL_at_pl and pivotStrengthFilter_Bull

// Regular Bearish: CVD makes a Lower High, but Volume at the pivot is lower. (Exhaustion)
volLL_at_ph = volume[lookbackRight] < prev_vol_at_ph
cvdVolBearRegular = showCvdVolRegular and phFound and inRangePH and cvdLH and volLL_at_ph and pivotStrengthFilter_Bear

// Hidden Bullish: CVD makes a Lower Low, and Volume is also lower. (Continuation - ít người bán theo)
cvdVolBullHidden = showCvdVolHidden and plFound and inRangePL and cvdLL and volLL_at_pl and pivotStrengthFilter_HiddenBull

// Hidden Bearish: CVD makes a Higher High, and Volume is HIGHER. (Continuation - nhiều người mua theo)
volHH_at_ph = volume[lookbackRight] > prev_vol_at_ph
cvdVolBearHidden = showCvdVolHidden and phFound and inRangePH and cvdHH and volHH_at_ph and pivotStrengthFilter_HiddenBear


// ==============================================================================================
// CONFLUENCE LEVELS FOR SIGNAL STRENGTH
// ==============================================================================================
// Level 2 (⚠️): Double Confluence - C+P and C+V divergence happening simultaneously
isDoubleConfluenceBull = (bullCond and cvdVolBullRegular) or (hiddenBullCond and cvdVolBullHidden)
isDoubleConfluenceBear = (bearCond and cvdVolBearRegular) or (hiddenBearCond and cvdVolBearHidden)

// Level 3 (⭐): BB Extreme + Divergence - CVD at Bollinger Band extremes (high conviction)
isBBExtremeBull = (cvdSource < bbLower) and (bullCond or hiddenBullCond or cvdVolBullRegular or cvdVolBullHidden)
isBBExtremeBear = (cvdSource > bbUpper) and (bearCond or hiddenBearCond or cvdVolBearRegular or cvdVolBearHidden)

// Aggregate markers for labels
hasWarning_Bull = isDoubleConfluenceBull and not isBBExtremeBull
hasWarning_Bear = isDoubleConfluenceBear and not isBBExtremeBear
hasStar_Bull = isBBExtremeBull
hasStar_Bear = isBBExtremeBear

// ==============================================================================================
// PLOTTING & UI
// ==============================================================================================
// --- Base Plots ---
hline(0, "Zero Line", color.new(color.gray, 50), linestyle=hline.style_dashed)

// Plot CVD Line/Candles
isLinePlot = plotStyle == "Line with MA"
cvdLineColor = cvdSource > cvdMA ? #2962FF : #FF6D00
pCVD = plot(cvdSource, "CVD", color=cvdLineColor, linewidth=2, display=isLinePlot ? display.all : display.none)
pMA  = plot(cvdMA, "CVD MA", color=color.new(color.gray, 20), linewidth=1, display=isLinePlot ? display.all : display.none)
fill(pCVD, pMA, color=isLinePlot ? (cvdSource > cvdMA ? color.new(color.blue, 85) : color.new(color.orange, 85)) : na)
cCol = lastVolume >= openVolume ? color.new(color.teal, 30) : color.new(color.red, 30)
plotcandle(openVolume, maxVolume, minVolume, lastVolume, "CVD Candles", color=cCol, bordercolor=cCol, wickcolor=cCol, display=not isLinePlot ? display.all : display.none)

// Plot Z-Score CVD (normalized, scaled to match raw CVD range for visual comparison)
// Scaled formula: zscore * current_stdev + current_mean (back to raw CVD scale)
cvd_zscore_scaled = cvd_zscore * cvd_zscore_stdev + cvd_zscore_ma
plot(showZScorePlot ? cvd_zscore_scaled : na, "Z-Score CVD", color=color.new(color.gray, 40), linewidth=1, style=plot.style_line, display=display.all)

// Plot Bollinger Bands
pUpper = plot(showBollingerBands ? bbUpper : na, "BB Upper", color.gray, style=plot.style_line)
pLower = plot(showBollingerBands ? bbLower : na, "BB Lower", color.gray, style=plot.style_line)
fill(pUpper, pLower, color=showBollingerBands ? color.new(color.gray, 95) : na)

// --- Divergence Drawing System (CVD+ Style) ---
// Arrays for line and label management
var array<line> divLines = array.new<line>()
var array<label> divLabels = array.new<label>()
var array<int> divLabelXs = array.new<int>()  // Track label x positions to prevent duplicates

// ATR for dynamic label offset (prevents overlap with price action)
atr_for_labels = ta.atr(14)
bullLabelOffset = 2.0  // Bull labels placed 2*ATR below pivot
bearLabelOffset = 2.0  // Bear labels placed 2*ATR above pivot

// Helper: Check if array contains value (duplicate prevention)
f_array_has_int(int[] _arr, int _val) =>
    _n = array.size(_arr)
    if _n == 0
        false
    else
        found = false
        for _i = 0 to _n - 1
            if array.get(_arr, _i) == _val
                found := true
                break
        found

// Professional label creation function (CVD+ style)
f_createDivLabel(int x, float y, string labelText, bool isBearish, color bgColor) =>
    labelStyle = isBearish ? label.style_label_down : label.style_label_up
    newLabel = label.new(x=x, y=y, text=labelText, style=labelStyle, color=bgColor, textcolor=color.white, size=size.tiny)
    array.unshift(divLabels, newLabel)
    array.unshift(divLabelXs, x)
    // Cleanup old labels
    if array.size(divLabels) > maxDivergences
        oldLabel = array.pop(divLabels)
        label.delete(oldLabel)
        array.pop(divLabelXs)
    newLabel

// Line creation with cleanup
f_createDivLine(int x1, float y1, int x2, float y2, color lineColor) =>
    newLine = line.new(x1, y1, x2, y2, color=lineColor, width=2)
    array.unshift(divLines, newLine)
    if array.size(divLines) > maxDivergences
        oldLine = array.pop(divLines)
        line.delete(oldLine)
    newLine

// Draw divergences with professional CVD+ style
pivotLabelX = bar_index - lookbackRight

// C+P Regular Bullish
if bullCond
    if not f_array_has_int(divLabelXs, pivotLabelX)
        labelText = hasStar_Bull ? "⭐Bull" : hasWarning_Bull ? "⚠️Bull" : "Bull"
        f_createDivLine(prev_plBar, prev_pl_cvd_raw, pivotLabelX, pl_cvd_raw, bullColor)
        f_createDivLabel(pivotLabelX, pl_cvd_raw - (atr_for_labels * bullLabelOffset), labelText, false, bullColor)

// C+P Regular Bearish
if bearCond
    if not f_array_has_int(divLabelXs, pivotLabelX)
        labelText = hasStar_Bear ? "⭐Bear" : hasWarning_Bear ? "⚠️Bear" : "Bear"
        f_createDivLine(prev_phBar, prev_ph_cvd_raw, pivotLabelX, ph_cvd_raw, bearColor)
        f_createDivLabel(pivotLabelX, ph_cvd_raw + (atr_for_labels * bearLabelOffset), labelText, true, bearColor)

// C+P Hidden Bullish
if hiddenBullCond
    if not f_array_has_int(divLabelXs, pivotLabelX)
        labelText = hasStar_Bull ? "⭐H.Bull" : hasWarning_Bull ? "⚠️H.Bull" : "H.Bull"
        f_createDivLine(prev_plBar, prev_pl_cvd_raw, pivotLabelX, pl_cvd_raw, hiddenBullColor)
        f_createDivLabel(pivotLabelX, pl_cvd_raw - (atr_for_labels * bullLabelOffset), labelText, false, hiddenBullColor)

// C+P Hidden Bearish
if hiddenBearCond
    if not f_array_has_int(divLabelXs, pivotLabelX)
        labelText = hasStar_Bear ? "⭐H.Bear" : hasWarning_Bear ? "⚠️H.Bear" : "H.Bear"
        f_createDivLine(prev_phBar, prev_ph_cvd_raw, pivotLabelX, ph_cvd_raw, hiddenBearColor)
        f_createDivLabel(pivotLabelX, ph_cvd_raw + (atr_for_labels * bearLabelOffset), labelText, true, hiddenBearColor)

// C+V Regular Bullish
if cvdVolBullRegular
    if not f_array_has_int(divLabelXs, pivotLabelX)
        labelText = hasStar_Bull ? "⭐V.Bull" : hasWarning_Bull ? "⚠️V.Bull" : "V.Bull"
        f_createDivLine(prev_plBar, prev_pl_cvd_raw, pivotLabelX, pl_cvd_raw, cvdVolBullColor)
        f_createDivLabel(pivotLabelX, pl_cvd_raw - (atr_for_labels * bullLabelOffset), labelText, false, cvdVolBullColor)

// C+V Regular Bearish
if cvdVolBearRegular
    if not f_array_has_int(divLabelXs, pivotLabelX)
        labelText = hasStar_Bear ? "⭐V.Bear" : hasWarning_Bear ? "⚠️V.Bear" : "V.Bear"
        f_createDivLine(prev_phBar, prev_ph_cvd_raw, pivotLabelX, ph_cvd_raw, cvdVolBearColor)
        f_createDivLabel(pivotLabelX, ph_cvd_raw + (atr_for_labels * bearLabelOffset), labelText, true, cvdVolBearColor)

// C+V Hidden Bullish
if cvdVolBullHidden
    if not f_array_has_int(divLabelXs, pivotLabelX)
        labelText = hasStar_Bull ? "⭐V.H.Bull" : hasWarning_Bull ? "⚠️V.H.Bull" : "V.H.Bull"
        f_createDivLine(prev_plBar, prev_pl_cvd_raw, pivotLabelX, pl_cvd_raw, cvdVolHiddenBullColor)
        f_createDivLabel(pivotLabelX, pl_cvd_raw - (atr_for_labels * bullLabelOffset), labelText, false, cvdVolHiddenBullColor)

// C+V Hidden Bearish
if cvdVolBearHidden
    if not f_array_has_int(divLabelXs, pivotLabelX)
        labelText = hasStar_Bear ? "⭐V.H.Bear" : hasWarning_Bear ? "⚠️V.H.Bear" : "V.H.Bear"
        f_createDivLine(prev_phBar, prev_ph_cvd_raw, pivotLabelX, ph_cvd_raw, cvdVolHiddenBearColor)
        f_createDivLabel(pivotLabelX, ph_cvd_raw + (atr_for_labels * bearLabelOffset), labelText, true, cvdVolHiddenBearColor)

// --- Background Alerts ---
isBull = bullCond or hiddenBullCond or cvdVolBullRegular or cvdVolBullHidden
isBear = bearCond or hiddenBearCond or cvdVolBearRegular or cvdVolBearHidden

isBull_barssince = ta.barssince(isBull)
isBear_barssince = ta.barssince(isBear)

bgcolor(isBull and isBull_barssince == 0 ? bullAlertBG : na, title="Bullish Divergence BG Alert")
bgcolor(isBear and isBear_barssince == 0 ? bearAlertBG : na, title="Bearish Divergence BG Alert")

// ==============================================================================================
// MULTI-TF CVD TABLE
// ==============================================================================================
// Fetch CVD values from multiple timeframes
cvd_5m  = request.security(syminfo.tickerid, "5",  f_cvdClose(lowerTimeframe, anchorInput))
ma_5m   = request.security(syminfo.tickerid, "5",  ta.sma(f_cvdClose(lowerTimeframe, anchorInput), maLengthInput))
cvd_15m = request.security(syminfo.tickerid, "15", f_cvdClose(lowerTimeframe, anchorInput))
ma_15m  = request.security(syminfo.tickerid, "15", ta.sma(f_cvdClose(lowerTimeframe, anchorInput), maLengthInput))
cvd_1h  = request.security(syminfo.tickerid, "60", f_cvdClose(lowerTimeframe, anchorInput))
ma_1h   = request.security(syminfo.tickerid, "60", ta.sma(f_cvdClose(lowerTimeframe, anchorInput), maLengthInput))
cvd_4h  = request.security(syminfo.tickerid, "240", f_cvdClose(lowerTimeframe, anchorInput))
ma_4h   = request.security(syminfo.tickerid, "240", ta.sma(f_cvdClose(lowerTimeframe, anchorInput), maLengthInput))

// Color coding: Green if CVD > MA (bullish), Red if CVD < MA (bearish)
cell_col_5m  = cvd_5m  > ma_5m  ? color.new(color.green, 70) : color.new(color.red, 70)
cell_col_15m = cvd_15m > ma_15m ? color.new(color.green, 70) : color.new(color.red, 70)
cell_col_1h  = cvd_1h  > ma_1h  ? color.new(color.green, 70) : color.new(color.red, 70)
cell_col_4h  = cvd_4h  > ma_4h  ? color.new(color.green, 70) : color.new(color.red, 70)

// Render table on last bar
if showTable and barstate.islast
    table_pos = tablePosition == "top_right" ? position.top_right : tablePosition == "top_left" ? position.top_left : tablePosition == "bottom_left" ? position.bottom_left : position.bottom_right
    var table cvdTable = table.new(position=table_pos, columns=2, rows=5, bgcolor=color.new(color.gray, 80), border_width=2, frame_color=color.new(color.gray, 50))
    
    // Header row
    table.cell(cvdTable, 0, 0, "TF", text_size=size.small, bgcolor=color.new(color.gray, 60), text_color=color.white)
    table.cell(cvdTable, 1, 0, "CVD Trend", text_size=size.small, bgcolor=color.new(color.gray, 60), text_color=color.white)
    
    // Data rows
    table.cell(cvdTable, 0, 1, "5m", text_size=size.small)
    table.cell(cvdTable, 1, 1, str.tostring(cvd_5m, format.mintick), bgcolor=cell_col_5m, text_color=color.white, text_size=size.small)
    
    table.cell(cvdTable, 0, 2, "15m", text_size=size.small)
    table.cell(cvdTable, 1, 2, str.tostring(cvd_15m, format.mintick), bgcolor=cell_col_15m, text_color=color.white, text_size=size.small)
    
    table.cell(cvdTable, 0, 3, "1H", text_size=size.small)
    table.cell(cvdTable, 1, 3, str.tostring(cvd_1h, format.mintick), bgcolor=cell_col_1h, text_color=color.white, text_size=size.small)
    
    table.cell(cvdTable, 0, 4, "4H", text_size=size.small)
    table.cell(cvdTable, 1, 4, str.tostring(cvd_4h, format.mintick), bgcolor=cell_col_4h, text_color=color.white, text_size=size.small)

// --- Alerts ---
alertcondition(bullCond, "Regular Bullish Divergence (C+P)", "Regular Bullish Divergence found between Price and CVD.")
alertcondition(bearCond, "Regular Bearish Divergence (C+P)", "Regular Bearish Divergence found between Price and CVD.")
alertcondition(hiddenBullCond, "Hidden Bullish Divergence (C+P)", "Hidden Bullish Divergence found between Price and CVD.")
alertcondition(hiddenBearCond, "Hidden Bearish Divergence (C+P)", "Hidden Bearish Divergence found between Price and CVD.")

alertcondition(cvdVolBullRegular, "Regular Bullish Divergence (C+V)", "Regular Bullish Divergence found between Volume and CVD.")
alertcondition(cvdVolBearRegular, "Regular Bearish Divergence (C+V)", "Regular Bearish Divergence found between Volume and CVD.")
alertcondition(cvdVolBullHidden, "Hidden Bullish Divergence (C+V)", "Hidden Bullish Divergence found between Volume and CVD.")
alertcondition(cvdVolBearHidden, "Hidden Bearish Divergence (C+V)", "Hidden Bearish Divergence found between Volume and CVD.")
