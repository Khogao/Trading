// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © lenguyenphi
// © 2025 Pi 3.4 Professional - Clean Architecture (No Repainting)
//@version=5
indicator("Pi 3.4 Professional", shorttitle="PI 3.4 Pro", overlay=true, max_labels_count=300, max_boxes_count=300, max_lines_count=200)

// ============================================================================
// INPUT SECTIONS - Organized & Clean
// ============================================================================

// === MASTER PROFILE ===
var GRP_PROFILE = "🔥 1. Master Profile"
profile_selector = input.string("Day Trader", "Trading Profile", options=["Scalper", "Day Trader", "Swing Trader", "Position Trader"], group=GRP_PROFILE)

// === VPP CORE (Enhanced VPP5 Engine) ===
var GRP_VPP = "📊 2. Volume Profile"
vp_lookback = input.int(200, 'VP Lookback', minval=50, maxval=1000, group=GRP_VPP)
vp_levels = input.int(120, 'Price Levels', minval=50, maxval=200, group=GRP_VPP)
show_poc = input.bool(true, "POC", group=GRP_VPP, inline="vp1")
show_va = input.bool(true, "Value Area", group=GRP_VPP, inline="vp1")
show_va_lines = input.bool(true, "VA Lines", group=GRP_VPP, inline="vp2")
vp_volume_type = input.string("Both","Volume Type", options=["Both","Bullish","Bearish"], group=GRP_VPP)
vp_bar_width = input.int(40, "Bar Max Width (px)", minval=1, maxval=500, group=GRP_VPP)
vp_right_offset = input.int(20, "Right Offset (bars)", minval=0, maxval=300, group=GRP_VPP)

// === EXECUTION & PERFORMANCE ===
var GRP_EXEC = "⚡ 3. Execution & Performance"
execution_sensitivity = input.string("Medium", "Execution Sensitivity", options=["Ultra","High","Medium","Low"], group=GRP_EXEC)
auto_adjust_tf = input.bool(true, "Auto-adjust TF Mapping", group=GRP_EXEC)
intraday_mode_custom = input.bool(true, 'Intraday Mode', group=GRP_EXEC)
session_focus_custom = input.bool(true, 'Focus on Current Session', group=GRP_EXEC)
intraday_lookback_days = input.int(4, 'Intraday Lookback (days)', minval=1, maxval=30, group=GRP_EXEC)

// === HTF LEVELS ===
var GRP_HTF = "🔥 4. HTF Levels"
htf_enabled = input.bool(true, "Enable HTF", group=GRP_HTF)
htf_timeframe = input.timeframe("240", "HTF Period", group=GRP_HTF)
htf_show_poc = input.bool(true, "HTF POC", group=GRP_HTF, inline="htf1")
htf_show_va = input.bool(true, "HTF VA", group=GRP_HTF, inline="htf1")
htf_lookback = input.int(30, "HTF lookback (bars on HTF)", minval=5, maxval=200, group=GRP_HTF)
htf_levels = input.int(60, "HTF Price Levels", minval=20, maxval=200, group=GRP_HTF)
htf_va_percent = input.int(70, "HTF Value Area %", minval=10, maxval=99, group=GRP_HTF)

// === ADVANCED SESSION ===
var GRP_SESSION = "🕐 5. Advanced Session"
session_weight_custom = input.float(1.2, "Session Weight Factor", minval=0.1, maxval=5.0, step=0.1, group=GRP_SESSION)
intraday_start_hour = input.int(9,  "Intraday Start Hour",  minval=0, maxval=23, group=GRP_SESSION)
intraday_end_hour = input.int(17, "Intraday End Hour",    minval=0, maxval=23, group=GRP_SESSION)

// === VSA SIGNALS ===
var GRP_VSA = "🎯 6. VSA Analysis"
enable_vsa = input.bool(true, "Enable VSA", group=GRP_VSA)
vsa_sensitivity = input.string("Medium", "Sensitivity", options=["Low", "Medium", "High"], group=GRP_VSA)
show_spring = input.bool(true, "Spring", group=GRP_VSA, inline="sig1")
show_upthrust = input.bool(true, "Upthrust", group=GRP_VSA, inline="sig1")
show_climax = input.bool(true, "Climax", group=GRP_VSA, inline="sig2")
show_effort = input.bool(true, "Effort/Result", group=GRP_VSA, inline="sig2")

// === TREND CONTEXT ===
var GRP_TREND = "🌊 7. Trend Context"
show_ema = input.bool(true, "EMA Lines", group=GRP_TREND)
ema_fast = input.int(21, "Fast EMA", group=GRP_TREND, minval=5, maxval=50)
ema_slow = input.int(50, "Slow EMA", group=GRP_TREND, minval=20, maxval=100)
ema_long = input.int(200, "Long EMA", group=GRP_TREND, minval=100, maxval=300)
show_cloud = input.bool(true, "EMA Cloud", group=GRP_TREND)

// === DISPLAY ===
var GRP_DISPLAY = "📱 8. Display"
show_info = input.bool(true, "Info Panel", group=GRP_DISPLAY)
info_position = input.string("top_right", "Panel Position", 
     options=["top_left", "top_right", "bottom_left", "bottom_right"], group=GRP_DISPLAY)
show_background = input.bool(false, "VSA Background", group=GRP_DISPLAY)

// === COLORS ===
var GRP_COLORS = "🎨 9. Colors"
color_poc = input.color(color.new(color.orange, 0), "POC", group=GRP_COLORS, inline="c1")
color_va = input.color(color.new(color.teal, 70), "Value Area", group=GRP_COLORS, inline="c1")
color_htf_poc = input.color(color.new(color.orange, 0), "HTF POC", group=GRP_COLORS, inline="c2")
color_htf_va = input.color(color.new(color.teal, 0), "HTF VA", group=GRP_COLORS, inline="c2")
vp_vol_color = input.color(color.new(color.gray, 70), "Volume Bar Color", group=GRP_COLORS, inline="c3")
vp_hva_color = input.color(color.new(color.blue, 60), "HVA Fill Color", group=GRP_COLORS, inline="c3")

// ============================================================================
// ENHANCED PROFILE CONFIGURATION - VPP5 Logic
// ============================================================================

// Profile variables
var int lookback_bars = na
var bool intraday_mode = na
var bool session_focus = na
var float vol_threshold = 1.8
var float range_threshold = 0.7

// Enhanced profile logic
if profile_selector == "Scalper"
    lookback_bars := 100
    intraday_mode := true
    session_focus := true
    vol_threshold := 1.5
    range_threshold := 0.8
else if profile_selector == "Day Trader"
    lookback_bars := 200
    intraday_mode := true
    session_focus := true
    vol_threshold := 1.8
    range_threshold := 0.7
else if profile_selector == "Swing Trader"
    lookback_bars := 400
    intraday_mode := false
    session_focus := false
    vol_threshold := 2.0
    range_threshold := 0.6
else // Position Trader
    lookback_bars := 600
    intraday_mode := false
    session_focus := false
    vol_threshold := 2.2
    range_threshold := 0.5

// Use custom or profile settings
final_lookback = vp_lookback > 0 ? vp_lookback : lookback_bars
final_intraday_mode = intraday_mode
final_session_focus = session_focus

// Enhanced timeframe detection
f_get_timeframe_mode() =>
    string tf_str = 'Other'
    if not auto_adjust_tf
        tf_str := 'Manual'
    else if timeframe.isdaily
        tf_str := '1D'
    else if timeframe.isintraday
        if timeframe.multiplier >= 240
            tf_str := '4H'
        else if timeframe.multiplier >= 60
            tf_str := '1H'
        else if timeframe.multiplier >= 15
            tf_str := '15m'
        else if timeframe.multiplier >= 5
            tf_str := '5m'
        else
            tf_str := '1m'
    tf_str

// ============================================================================
// ADVANCED VP ENGINE - VPP5 Production
// ============================================================================

// Enhanced VP Variables
var array<float> volume_at_price = array.new<float>()
var array<box> volume_boxes = array.new<box>()
var float poc_price = na
var float va_high = na
var float va_low = na
var int last_calc_bar = 0
var float price_high = na
var float price_low = na
var float price_step = na

// Enhanced helper functions
f_price_to_index(price, local_price_low, local_price_step) =>
    local_price_step > 0 ? int(math.max(0, math.min(vp_levels - 1, math.floor((price - local_price_low) / local_price_step)))) : 0

f_calculate_value_area(poc_idx, total_vol, local_price_low, local_price_step, va_percentage) =>
    if poc_idx < 0 or total_vol <= 0
        [na, na]
    else
        target_volume = total_vol * va_percentage / 100
        va_volume = array.get(volume_at_price, poc_idx)
        va_upper = poc_idx
        va_lower = poc_idx
        while va_volume < target_volume and (va_upper < vp_levels - 1 or va_lower > 0)
            vol_above = va_upper < vp_levels - 1 ? array.get(volume_at_price, va_upper + 1) : 0.0
            vol_below = va_lower > 0 ? array.get(volume_at_price, va_lower - 1) : 0.0
            if vol_above >= vol_below and va_upper < vp_levels - 1
                va_upper += 1
                va_volume += vol_above
            else if va_lower > 0
                va_lower -= 1
                va_volume += vol_below
            else
                break
        [local_price_low + va_lower * local_price_step, local_price_low + va_upper * local_price_step]

// VP summary function for HTF analysis
f_vp_summary_local(vp_levels_local, lookback_local, va_pct_local) =>
    vol_local = array.new_float(0)
    for _ = 0 to vp_levels_local - 1
        array.push(vol_local, 0.0)
    ph = ta.highest(high, lookback_local)
    pl = ta.lowest(low, lookback_local)
    step = (ph - pl) / vp_levels_local
    if step <= 0
        [na, na, na]
    else
        for b = 0 to int(math.min(lookback_local - 1, bar_index))
            if volume[b] <= 0
                continue
            tp = (high[b] + low[b] + close[b]) / 3.0
            idx = step > 0 ? int(math.max(0, math.min(vp_levels_local - 1, math.floor((tp - pl) / step)))) : 0
            array.set(vol_local, idx, array.get(vol_local, idx) + volume[b])
        maxv = array.max(vol_local)
        if maxv <= 0
            [na, na, na]
        else
            poc_i = array.indexof(vol_local, maxv)
            total_vol = 0.0
            for i2 = 0 to vp_levels_local - 1
                total_vol += array.get(vol_local, i2)
            target = total_vol * va_pct_local / 100.0
            va_vol = array.get(vol_local, poc_i)
            va_up = poc_i
            va_dn = poc_i
            while va_vol < target and (va_up < vp_levels_local - 1 or va_dn > 0)
                vol_up = va_up < vp_levels_local - 1 ? array.get(vol_local, va_up + 1) : 0.0
                vol_dn = va_dn > 0 ? array.get(vol_local, va_dn - 1) : 0.0
                if vol_up >= vol_dn and va_up < vp_levels_local - 1
                    va_up += 1
                    va_vol += vol_up
                else if va_dn > 0
                    va_dn -= 1
                    va_vol += vol_dn
                else
                    break
            poc_price_local = pl + poc_i * step
            vah_local = pl + va_up * step
            val_local = pl + va_dn * step
            [poc_price_local, vah_local, val_local]

// ============================================================================
// HTF ANALYSIS - VPP5 Enhanced
// ============================================================================

// HTF line handles
var line htf_poc_line = na
var line htf_vah_line = na  
var line htf_val_line = na
var float poc_htf = na
var float vah_htf = na
var float val_htf = na

// Advanced execution logic from VPP5
tf_mode = f_get_timeframe_mode()
tf_minutes = timeframe.in_seconds(timeframe.period) / 60.0

base_update_freq = switch tf_mode
    '1D'  => math.max(10, final_lookback / 20)
    '4H'  => math.max(5, final_lookback / 30)
    '1H'  => math.max(3, final_lookback / 40)
    '15m' => math.max(2, final_lookback / 50)
    => 1

final_update_freq = switch execution_sensitivity
    'Ultra'  => 1
    'High'   => 2
    'Medium' => int(math.max(3, base_update_freq))
    => int(math.max(5, base_update_freq * 2))

// Enhanced volume and price movement detection
avg_len = int(math.min(50, bar_index + 1))
avg_vol_norm = ta.sma(volume, avg_len) / tf_minutes
cur_vol_norm = volume / tf_minutes

vol_thresh = switch execution_sensitivity
    'Ultra'  => 1.3
    'High'   => 1.7
    'Medium' => 2.5
    'Low'    => 4.0

move_thresh = switch execution_sensitivity
    'Ultra'  => 0.002
    'High'   => 0.003
    'Medium' => 0.005
    'Low'    => 0.01

vol_spike = cur_vol_norm > avg_vol_norm * vol_thresh and avg_vol_norm > 0
price_move = math.abs(close - nz(close[1])) / nz(close[1], 1) > move_thresh

// Enhanced update logic
needs_update = barstate.islast or (bar_index - last_calc_bar >= final_update_freq) or vol_spike or price_move

// Enhanced lookback calculation
new_day_flag_series = ta.change(time("D")) != 0
bars_since_new_day_series = ta.barssince(new_day_flag_series)
bars_per_day = 1440 / tf_minutes

int effective_lookback = na
if final_intraday_mode
    effective_lookback := int(math.min(final_lookback, intraday_lookback_days * bars_per_day))
else
    tmp_look = switch tf_mode
        '1D'  => math.min(final_lookback, 40)
        '4H'  => math.min(final_lookback, 120)
        '1H'  => math.min(final_lookback, 240)
        '15m' => math.min(final_lookback, 500)
        => math.min(final_lookback, 300)
    effective_lookback := int(tmp_look)

// HTF VP calculation
if htf_enabled
    [poc_htf_tmp, vah_htf_tmp, val_htf_tmp] = request.security(syminfo.tickerid, htf_timeframe, 
         f_vp_summary_local(htf_levels, htf_lookback, htf_va_percent), lookahead=barmerge.lookahead_off)
    if not na(poc_htf_tmp)
        poc_htf := poc_htf_tmp
        vah_htf := vah_htf_tmp
        val_htf := val_htf_tmp

// ============================================================================
// VSA ANALYSIS - Clean & Reliable
// ============================================================================

// Bar Analysis Type
type BarAnalysis
    bool is_up
    bool is_down
    bool high_volume
    bool low_volume
    bool wide_range
    bool narrow_range
    float close_position

// VSA Functions
f_analyze_bar() =>
    vol_ma = ta.sma(volume, 20)
    range_ma = ta.sma(high - low, 20)
    current_range = high - low
    
    // Volume analysis
    vol_ratio = vol_ma > 0 ? volume / vol_ma : 1.0
    is_high_vol = vol_ratio > vol_threshold
    is_low_vol = vol_ratio < (1.0 / vol_threshold)
    
    // Range analysis  
    range_ratio = range_ma > 0 ? current_range / range_ma : 1.0
    is_wide = range_ratio > (1.0 / range_threshold)
    is_narrow = range_ratio < range_threshold
    
    // Close position
    close_pos = current_range > 0 ? (close - low) / current_range : 0.5
    
    // Put constructor on one line to avoid line-continuation parse issues
    BarAnalysis.new(close > open, close < open, is_high_vol, is_low_vol, is_wide, is_narrow, close_pos)

// VSA Signals
bar_data = f_analyze_bar()

// Support/Resistance levels
support_level = ta.lowest(low, 20)[1]
resistance_level = ta.highest(high, 20)[1]

// VSA Patterns
is_spring = enable_vsa and show_spring and 
     bar_data.is_down and low <= support_level and 
     close > low + (high - low) * 0.3 and bar_data.high_volume

is_upthrust = enable_vsa and show_upthrust and 
     bar_data.is_up and high >= resistance_level and 
     close < high - (high - low) * 0.3 and bar_data.high_volume

is_selling_climax = enable_vsa and show_climax and 
     bar_data.is_down and bar_data.wide_range and bar_data.high_volume

is_buying_climax = enable_vsa and show_climax and 
     bar_data.is_up and bar_data.wide_range and bar_data.high_volume

is_effort_no_result = enable_vsa and show_effort and 
     bar_data.high_volume and bar_data.narrow_range

// Enhanced Spring (current logic is good but can be more precise)
is_spring_enhanced = enable_vsa and show_spring and 
     bar_data.low_volume and bar_data.narrow_range and
     close > (high + low) / 2 and  // Close in upper half
     close > open and               // Bullish close
     low <= ta.lowest(low, 10)[1]   // Testing previous lows

// Enhanced Upthrust
is_upthrust_enhanced = enable_vsa and show_upthrust and
     bar_data.high_volume and bar_data.narrow_range and
     close < (high + low) / 2 and  // Close in lower half  
     high >= ta.highest(high, 10)[1] // Testing previous highs

// VSA Score
vsa_score = 0.0
vsa_score += is_spring ? 3.0 : 0
vsa_score += is_selling_climax ? 2.0 : 0
vsa_score -= is_upthrust ? 3.0 : 0
vsa_score -= is_buying_climax ? 2.0 : 0
vsa_score -= is_effort_no_result ? 1.0 : 0

// ============================================================================
// MAIN VP CALCULATION & EXECUTION - VPP5 Enhanced
// ============================================================================

// Initialize volume array if needed
if array.size(volume_at_price) != vp_levels
    array.clear(volume_at_price)
    for i = 0 to vp_levels - 1
        array.push(volume_at_price, 0.0)

// Main VP Calculation
price_high_all = ta.highest(high, effective_lookback)
price_low_all = ta.lowest(low, effective_lookback)
price_step_all = (price_high_all - price_low_all) / vp_levels

if needs_update
    // Cleanup existing drawings
    for bx in volume_boxes
        box.delete(bx)
    array.clear(volume_boxes)

    // Recalculate volume profile
    array.fill(volume_at_price, 0.0)
    price_high := price_high_all
    price_low := price_low_all  
    price_step := price_step_all

    if price_step > 0
        for b = 0 to int(math.min(effective_lookback - 1, bar_index))
            if volume[b] <= 0
                continue
            
            // Enhanced volume filtering
            is_bullish = close[b] >= open[b]
            include_volume = vp_volume_type == 'Both' or (vp_volume_type == 'Bullish' and is_bullish) or (vp_volume_type == 'Bearish' and not is_bullish)
            if not include_volume
                continue

            // Advanced volume weighting
            normalized_vol = volume[b] / tf_minutes
            age_decay_tf = switch tf_mode
                '1D'  => 0.002
                '4H'  => 0.006
                '1H'  => 0.012
                '15m' => 0.03
                => 0.06
            age_decay = final_intraday_mode ? 0.03 : age_decay_tf
            age_weight = 1.0 / (1.0 + age_decay * b)
            
            // Session weight factor
            session_weight_factor = 1.0
            if final_session_focus
                if final_intraday_mode
                    h = hour(time[b], syminfo.timezone)
                    in_window = intraday_start_hour <= intraday_end_hour ? (h >= intraday_start_hour and h < intraday_end_hour) : (h >= intraday_start_hour or h < intraday_end_hour)
                    if in_window
                        session_weight_factor := session_weight_custom
                else
                    if bars_since_new_day_series[b] <= bars_per_day
                        session_weight_factor := session_weight_custom

            weighted_volume = normalized_vol * age_weight * session_weight_factor
            
            // Enhanced price distribution
            body_ratio = math.abs(close[b] - open[b]) / math.max(high[b] - low[b], price_step)
            typical_price = nz(body_ratio * (open[b] + close[b]) / 2 + (1 - body_ratio) * (high[b] + low[b]) / 2, close[b])
            price_range = high[b] - low[b]

            if price_range <= 0
                idx = f_price_to_index(typical_price, price_low, price_step)
                array.set(volume_at_price, idx, array.get(volume_at_price, idx) + weighted_volume * tf_minutes)
            else
                start_idx = f_price_to_index(low[b], price_low, price_step)
                end_idx = f_price_to_index(high[b], price_low, price_step)
                denom = math.max(1, end_idx - start_idx + 1)
                dist_denom = math.max(price_range / 2, price_step)
                for j = start_idx to end_idx
                    level_price = price_low + j * price_step
                    distance_factor = math.max(0.0, 1.0 - math.abs(level_price - typical_price) / dist_denom)
                    weight = math.max(0.05, distance_factor)
                    distributed_vol = weighted_volume * weight / denom
                    array.set(volume_at_price, j, array.get(volume_at_price, j) + distributed_vol * tf_minutes)

        // Calculate POC and VA
        max_vol = array.max(volume_at_price)
        if max_vol > 0
            poc_idx = array.indexof(volume_at_price, max_vol)
            poc_price := price_low + poc_idx * price_step
            va_percentage = final_intraday_mode ? 70 : 70
            [va_low_val, va_high_val] = f_calculate_value_area(poc_idx, array.sum(volume_at_price), price_low, price_step, va_percentage)
            va_low := va_low_val
            va_high := va_high_val

            // Draw volume profile bars
            x_base = bar_index + vp_right_offset
            for i = 0 to vp_levels - 1
                level_volume = array.get(volume_at_price, i)
                if level_volume > 0
                    bar_length = int(math.round(level_volume / max_vol * vp_bar_width))
                    if bar_length > 0
                        level_price = price_low + i * price_step
                        is_in_va = show_va and not na(va_low_val) and level_price >= va_low_val and level_price <= va_high_val
                        is_poc = i == poc_idx and show_poc
                        box_color = is_poc ? color_poc : is_in_va ? color_va : vp_vol_color
                        array.push(volume_boxes, box.new(x_base, level_price - price_step / 2, x_base + bar_length, level_price + price_step / 2, bgcolor=box_color, border_color=na))

    last_calc_bar := bar_index

// EMA Lines
ema_fast_value = ta.ema(close, ema_fast)
ema_slow_value = ta.ema(close, ema_slow) 
ema_long_value = ta.ema(close, ema_long)

// Precompute ATR each bar for consistency
atr_value = ta.atr(14)
bar_range = high - low
wide_range = bar_range > atr_value * range_threshold

// Enhanced range analysis
range_percentile = ta.percentrank(bar_range, 50)
ultra_wide_range = range_percentile > 95
ultra_narrow_range = range_percentile < 5

plot(show_ema ? ema_fast_value : na, "Fast EMA", color.aqua, 1)
plot(show_ema ? ema_slow_value : na, "Slow EMA", color.orange, 1)
plot(show_ema ? ema_long_value : na, "Long EMA", color.gray, 2)

// EMA Cloud
p1 = plot(show_ema ? ema_fast_value : na, color=na)
p2 = plot(show_ema ? ema_slow_value : na, color=na)
fill(p1, p2, 
     color=show_cloud and show_ema ? 
          (ema_fast_value > ema_slow_value ? color.new(color.green, 85) : color.new(color.red, 85)) : na)

// Enhanced HTF Lines with VPP5 logic
if htf_enabled and not na(poc_htf)
    poc_start_x = bar_index - nz(effective_lookback, 100)
    poc_end_x = bar_index + vp_right_offset + vp_bar_width

    // HTF POC Line
    if htf_show_poc
        if na(htf_poc_line)
            htf_poc_line := line.new(poc_start_x, poc_htf, poc_end_x, poc_htf, color=color_htf_poc, width=2)
        else
            line.set_xy1(htf_poc_line, poc_start_x, poc_htf)
            line.set_xy2(htf_poc_line, poc_end_x, poc_htf)

    // HTF VA Lines  
    if htf_show_va and not na(vah_htf) and not na(val_htf)
        if na(htf_vah_line)
            htf_vah_line := line.new(poc_start_x, vah_htf, poc_end_x, vah_htf, color=color_htf_va, width=1, style=line.style_dashed)
        else
            line.set_xy1(htf_vah_line, poc_start_x, vah_htf)
            line.set_xy2(htf_vah_line, poc_end_x, vah_htf)
        
        if na(htf_val_line)
            htf_val_line := line.new(poc_start_x, val_htf, poc_end_x, val_htf, color=color_htf_va, width=1, style=line.style_dashed)
        else
            line.set_xy1(htf_val_line, poc_start_x, val_htf)
            line.set_xy2(htf_val_line, poc_end_x, val_htf)

// Enhanced VA Lines with VPP5 styling
if show_va_lines and not na(va_high) and not na(va_low) and needs_update
    line.new(bar_index - effective_lookback, va_high, bar_index + vp_right_offset + vp_bar_width, va_high, 
         color=color_va, width=1, style=line.style_dashed, extend=extend.none)
    line.new(bar_index - effective_lookback, va_low, bar_index + vp_right_offset + vp_bar_width, va_low, 
         color=color_va, width=1, style=line.style_dashed, extend=extend.none)

// Enhanced POC Box  
if show_poc and not na(poc_price) and needs_update
    box.new(bar_index - effective_lookback, poc_price - price_step / 4, bar_index + vp_right_offset - 5, 
         poc_price + price_step / 4, bgcolor=color_poc, border_color=color_poc)

// Background
bgcolor(show_background and math.abs(vsa_score) > 2 ? 
     (vsa_score > 0 ? color.new(color.green, 90) : color.new(color.red, 90)) : na)

// VSA Labels
if barstate.isconfirmed and enable_vsa
    // Use precomputed ATR
    if is_spring
        label.new(bar_index, low - atr_value * 0.5, "Spring", 
             textcolor=color.green, style=label.style_none, size=size.small)
    if is_upthrust  
        label.new(bar_index, high + atr_value * 0.5, "Upthrust", 
             textcolor=color.red, style=label.style_none, size=size.small)
    if is_selling_climax
        label.new(bar_index, low - atr_value * 0.3, "SC", 
             textcolor=color.blue, style=label.style_none, size=size.tiny)
    if is_buying_climax
        label.new(bar_index, high + atr_value * 0.3, "BC", 
             textcolor=color.purple, style=label.style_none, size=size.tiny)

// Info Panel
var table info_table = na

if show_info and barstate.islast
    pos = switch info_position
        "top_left" => position.top_left
        "top_right" => position.top_right  
        "bottom_left" => position.bottom_left
        => position.bottom_right
    
    if na(info_table)
        info_table := table.new(pos, 2, 8, 
             bgcolor=color.new(color.white, 85), border_width=1)
    
    // Trend analysis
    trend_fast = close > ema_fast_value ? "↗" : "↘"
    trend_medium = ema_fast_value > ema_slow_value ? "BULL" : "BEAR"
    trend_long = close > ema_long_value ? "BULL" : "BEAR"
    
    table.cell(info_table, 0, 0, "PI 3.4 Pro", bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(info_table, 1, 0, profile_selector, text_color=color.gray)
    
    table.cell(info_table, 0, 1, "Trend Fast", text_color=color.black)
    table.cell(info_table, 1, 1, trend_fast, text_color=close > ema_fast_value ? color.green : color.red)
    
    table.cell(info_table, 0, 2, "Trend Med", text_color=color.black)
    table.cell(info_table, 1, 2, trend_medium, text_color=ema_fast_value > ema_slow_value ? color.green : color.red)
    
    table.cell(info_table, 0, 3, "Trend Long", text_color=color.black)  
    table.cell(info_table, 1, 3, trend_long, text_color=close > ema_long_value ? color.green : color.red)
    
    table.cell(info_table, 0, 4, "Volume", text_color=color.black)
    vol_status = bar_data.high_volume ? "HIGH" : bar_data.low_volume ? "LOW" : "NORMAL"
    table.cell(info_table, 1, 4, vol_status, 
         text_color=bar_data.high_volume ? color.red : bar_data.low_volume ? color.gray : color.blue)
    
    table.cell(info_table, 0, 5, "VSA Score", text_color=color.black)
    table.cell(info_table, 1, 5, str.tostring(vsa_score, "#.#"), 
         text_color=vsa_score > 0 ? color.green : vsa_score < 0 ? color.red : color.gray)
    
    table.cell(info_table, 0, 6, "POC", text_color=color.black)
    table.cell(info_table, 1, 6, not na(poc_price) ? str.tostring(poc_price, format.mintick) : "N/A", 
         text_color=color_poc)
    
    table.cell(info_table, 0, 7, "HTF POC", text_color=color.black)
    table.cell(info_table, 1, 7, not na(poc_htf) ? str.tostring(poc_htf, format.mintick) : "N/A", 
         text_color=color_htf_poc)

show_webhook_alerts = input.bool(true, "Enable Webhook Alerts", group=GRP_DISPLAY)

// ============================================================================
// ADVANCED WEBHOOK ALERTS - JSON PAYLOAD
// ============================================================================

// Helper function to build a structured JSON string for webhook alerts
f_build_alert_json(signal_type, signal_score) =>
    // Note: PineScript does not have a native JSON library. We build the string manually.
    // The receiving server (server.py) is expected to parse this string.
    string json_template = '{{"signal":"{}", "score":{}, "symbol":"{}", "timeframe":"{}", "price":{}, "volume":{}, "vsa_score":{}, "poc":{}, "va_high":{}, "va_low":{}, "htf_poc":{}, "source":"Pi-3.4-Pro"}}'
    str.format(json_template,
         signal_type,                                 // "Strong Bullish VSA", "Spring", etc.
         str.tostring(signal_score, "#.#"),           // The VSA score or a fixed value
         syminfo.ticker,                              // e.g. "BTCUSD"
         timeframe.period,                            // e.g. "60" for 1H chart
         str.tostring(close),                         // Current close price
         str.tostring(volume),                        // Current bar volume
         str.tostring(vsa_score, "#.#"),              // VSA score
         str.tostring(poc_price, format.mintick),     // Point of Control
         str.tostring(va_high, format.mintick),       // Value Area High
         str.tostring(va_low, format.mintick),        // Value Area Low
         str.tostring(poc_htf, format.mintick),       // Higher Timeframe POC
         "Pi-3.4-Pro"
    )

// Trigger alerts on confirmed bars
if barstate.isconfirmed and show_webhook_alerts
    string alert_message = na
    if vsa_score < -2.5
        alert_message := f_build_alert_json("Strong Bearish VSA", vsa_score)
    else if vsa_score > 2.5
        alert_message := f_build_alert_json("Strong Bullish VSA", vsa_score)
    else if is_spring
        alert_message := f_build_alert_json("Spring Signal", 3.0) // Assign a fixed score for event-based signals
    else if is_upthrust
        alert_message := f_build_alert_json("Upthrust Signal", -3.0) // Assign a fixed score

    if not na(alert_message)
        // This sends the JSON payload. In TradingView alerts, set the "Message" to {{plot("alert_json")}} and select the Webhook URL.
        alert(alert_message, freq = alert.freq_once_per_bar_close)

// Legacy alerts for users not using webhooks (optional)
alertcondition(is_spring, "Spring Signal", "Spring pattern detected")
alertcondition(is_upthrust, "Upthrust Signal", "Upthrust pattern detected") 
alertcondition(vsa_score > 2.5, "Strong Bullish VSA", "Strong bullish VSA confluence")
alertcondition(vsa_score < -2.5, "Strong Bearish VSA", "Strong bearish VSA confluence")