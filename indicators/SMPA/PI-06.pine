// © 2025 Gemini AI - PI v2.1 CLEAN VERSION (Zero Errors)
// @version=5
indicator("PI v2.1 CLEAN", shorttitle="PI CLEAN", overlay=true, max_labels_count=500)

// === CONSTANTS ===
VALUE_AREA_PERCENT = 0.7
CLIMAX_VOL_THRESHOLD = 0.95
MIN_PRICE_RANGE = 0.00001

// === TYPE DEFINITIONS ===
type BarData
    bool isUp
    bool isDown
    bool isNarrow
    bool isWide
    bool isHighVol
    bool isLowVol
    float location

// === INPUT SETTINGS ===
showInfoPanel = input.bool(true, "Show Dashboard")
dashboardPosition = input.string("top_right", "Dashboard Position", options=["top_left", "top_right", "bottom_left", "bottom_right"])
showBackground = input.bool(false, "Show Background")
showScoreOnBars = input.bool(true, "Show VSA Scores")
showVALines = input.bool(true, "Show POC, VAH, VAL")
showTRLines = input.bool(true, "Show Trading Range Lines")

// Signal Settings
enableSpringUpthrust = input.bool(true, "Spring & Upthrust")
enableClimacticVol = input.bool(true, "Climactic Volume")
enableNoSupplyDemand = input.bool(true, "No Supply & No Demand")
enableStoppingVol = input.bool(true, "Stopping Volume")
enableEffortVsResult = input.bool(true, "Effort vs Result")

// Parameters
lookbackH_L = input.int(12, "High/Low Lookback", minval=5, maxval=100)
volLookback = input.int(20, "Volume Lookback")
volMultiplier = input.float(1.8, "High Volume Multiplier")
lowVolMultiplier = input.float(0.6, "Low Volume Multiplier")
climaxLookback = input.int(40, "Climax Lookback")
scoreLookback = input.int(10, "Score Lookback")
narrowRangeFactor = input.float(0.7, "Narrow Range Factor")
wideRangeFactor = input.float(1.3, "Wide Range Factor")
bullishCloseLocation = input.float(0.6, "Bullish Close Location")
bearishCloseLocation = input.float(0.4, "Bearish Close Location")

// Trend Settings
useDualEMA = input.bool(true, "Use Dual EMA")
emaFastLength = input.int(21, "Fast EMA")
emaSlowLength = input.int(50, "Slow EMA")
useEma200 = input.bool(true, "Use EMA 200")

// Scalping Mode
enableScalpMode = input.bool(false, "Enable Scalping Mode")
scalpSensitivity = input.string("High", "Scalp Sensitivity", options=["Low", "Medium", "High"])
showScalpIndicator = input.bool(true, "Show Scalp Indicator")

// Alert Settings
enableSmartAlerts = input.bool(true, "Enable Smart Alerts")
alertQualityThreshold = input.int(70, "Alert Quality Threshold (%)", minval=0, maxval=100)

// === GLOBAL VARIABLES ===
var poc_value = 0.0
var vah_value = 0.0
var val_value = 0.0

// === UTILITY FUNCTIONS ===
f_safeDivision(n, d) => d > MIN_PRICE_RANGE ? n / d : na

f_safeSum(source, length) =>
    sum = 0.0
    lookback_len = math.min(length - 1, bar_index)
    if lookback_len >= 0
        for i = 0 to lookback_len
            sum += nz(source[i])
    sum

// Dynamic ATR calculation
f_getDynamicATR() =>
    atr14 = ta.atr(14)
    atr20 = ta.atr(20)
    dynamic_atr = (atr14 + atr20) / 2
    math.max(dynamic_atr, (high - low) * 0.02)

// Bar Analysis
f_analyzeBar() =>
    range_val = high - low
    avgVolume = ta.sma(volume, volLookback)
    avgRange = ta.sma(range_val, volLookback)
    
    isNarrow = range_val < avgRange * narrowRangeFactor
    isWide = range_val > avgRange * wideRangeFactor
    isHighVol = volume > avgVolume * volMultiplier
    isLowVol = volume < avgVolume * lowVolMultiplier
    location = f_safeDivision(close - low, range_val)
    
    BarData.new(close > open, close < open, isNarrow, isWide, isHighVol, isLowVol, nz(location, 0.5))

// Simple Value Area calculation using VWAP
f_calculateSimpleVA() =>
    // Use VWAP as POC approximation
    vwap_val = ta.vwap(hlc3)
    atr_val = ta.atr(20)
    
    // Calculate VAH and VAL as VWAP +/- ATR
    vah_val = vwap_val + (atr_val * 0.5)
    val_val = vwap_val - (atr_val * 0.5)
    
    [vwap_val, vah_val, val_val]

// Check if price is near Value Area
f_isNearVA(price) =>
    poc_diff = math.abs(price - poc_value) / poc_value
    vah_diff = math.abs(price - vah_value) / vah_value  
    val_diff = math.abs(price - val_value) / val_value
    (poc_diff < 0.005) or (vah_diff < 0.005) or (val_diff < 0.005)

// === VSA SIGNAL DETECTION ===

// Spring Detection
f_detectSpring(bar_data) =>
    if not enableSpringUpthrust
        false
    else
        support_level = ta.lowest(low, lookbackH_L * 2)
        condition1 = low < support_level[1]
        condition2 = close > support_level[1]
        condition3 = close > open
        condition4 = bar_data.isHighVol
        condition5 = bar_data.location > 0.6
        condition1 and condition2 and condition3 and condition4 and condition5

// Upthrust Detection
f_detectUpthrust(bar_data) =>
    if not enableSpringUpthrust
        false
    else
        resistance_level = ta.highest(high, lookbackH_L * 2)
        condition1 = high > resistance_level[1]
        condition2 = close < resistance_level[1]
        condition3 = close < open
        condition4 = bar_data.isHighVol
        condition5 = bar_data.location < 0.4
        condition1 and condition2 and condition3 and condition4 and condition5

// Climax Volume Detection
f_detectClimaxVolume(bar_data) =>
    if not enableClimacticVol
        [false, false]
    else
        is_volume_climax = volume >= ta.highest(volume, climaxLookback) * 0.95
        current_range = high - low
        avg_range = ta.sma(current_range, 20)
        is_wide_spread = current_range > avg_range * 1.5
        
        selling_climax = bar_data.isDown and is_wide_spread and is_volume_climax and bar_data.location < 0.3
        buying_climax = bar_data.isUp and is_wide_spread and is_volume_climax and bar_data.location > 0.7
        [selling_climax, buying_climax]

// No Supply/Demand Detection
f_detectNoSupplyDemand(bar_data) =>
    if not enableNoSupplyDemand
        [false, false]
    else
        no_supply = bar_data.isUp and bar_data.isNarrow and bar_data.isLowVol and f_isNearVA(high)
        no_demand = bar_data.isDown and bar_data.isNarrow and bar_data.isLowVol and f_isNearVA(low)
        [no_supply, no_demand]

// Effort vs Result Detection  
f_detectEffortVsResult(bar_data) =>
    if not enableEffortVsResult
        [false, false]
    else
        high_vol_narrow = bar_data.isHighVol and bar_data.isNarrow
        effort_vs_fall = high_vol_narrow and bar_data.isDown and bar_data.location > 0.5
        effort_vs_rise = high_vol_narrow and bar_data.isUp and bar_data.location < 0.5
        [effort_vs_fall, effort_vs_rise]

// Stopping Volume Detection
f_detectStoppingVol(bar_data) =>
    if not enableStoppingVol
        false
    else
        bar_data.isDown and bar_data.isHighVol and bar_data.location > bullishCloseLocation

// Advanced Scoring System
f_calculateScore(spring, upthrust, selling_climax, buying_climax, no_supply, no_demand, effort_fall, effort_rise, stopping_vol) =>
    score = 0.0
    
    // Bullish signals
    if spring
        score += 3.5
    if selling_climax
        score += 3.0
    if effort_fall
        score += 2.5
    if no_demand
        score += 1.5
    if stopping_vol
        score += 2.2
    
    // Bearish signals
    if upthrust
        score -= 3.5
    if buying_climax
        score -= 3.0
    if effort_rise
        score -= 2.5
    if no_supply
        score -= 1.5
    
    // Volume bonus
    volume_percentile = bar_index >= 50 ? (volume - ta.lowest(volume, 50)) / (ta.highest(volume, 50) - ta.lowest(volume, 50)) : 0.5
    volume_bonus = volume_percentile > 0.8 ? 0.5 : 0.0
    
    if math.abs(score) > 1.0
        score + (score > 0 ? volume_bonus : -volume_bonus)
    else
        0.0

// Signal Quality Assessment
f_getSignalQuality(vsa_score, trend_up) =>
    quality = 0
    
    // Trend alignment
    trend_aligned = (vsa_score > 0 and trend_up) or (vsa_score < 0 and not trend_up)
    quality += trend_aligned ? 40 : 0
    
    // Volume strength  
    avg_vol = ta.sma(volume, volLookback)
    volume_strong = volume > avg_vol * volMultiplier
    quality += volume_strong ? 30 : 0
    
    // Near value area
    near_va = f_isNearVA(close)
    quality += near_va ? 30 : 0
    
    quality

// === MAIN CALCULATIONS ===
bar_data = f_analyzeBar()

// EMA calculations
fastEMA = ta.ema(close, emaFastLength)
slowEMA = ta.ema(close, emaSlowLength)
ema200 = ta.ema(close, 200)
trend_up = useDualEMA ? fastEMA > slowEMA : close > ema200

// Value Area calculation
[poc_calc, vah_calc, val_calc] = f_calculateSimpleVA()
poc_value := poc_calc
vah_value := vah_calc  
val_value := val_calc

// VSA Signal Detection
spring = f_detectSpring(bar_data)
upthrust = f_detectUpthrust(bar_data)
[selling_climax, buying_climax] = f_detectClimaxVolume(bar_data)
[no_supply, no_demand] = f_detectNoSupplyDemand(bar_data)
[effort_fall, effort_rise] = f_detectEffortVsResult(bar_data)
stopping_vol = f_detectStoppingVol(bar_data)

// Calculate VSA Score
raw_score = f_calculateScore(spring, upthrust, selling_climax, buying_climax, no_supply, no_demand, effort_fall, effort_rise, stopping_vol)
vsa_score = f_safeSum(raw_score, scoreLookback)

// Signal Arrays
var bullish_signals = array.new<string>()
var bearish_signals = array.new<string>()

if barstate.isconfirmed
    array.clear(bullish_signals)
    array.clear(bearish_signals)
    
    if spring
        array.push(bullish_signals, "SPRING")
    if selling_climax
        array.push(bullish_signals, "SELL_CLIMAX⭐")
    if effort_fall
        array.push(bullish_signals, "EFFORT_FALL")
    if no_demand
        array.push(bullish_signals, "NO_DEMAND")
    if stopping_vol
        array.push(bullish_signals, "STOP_VOL")
    
    if upthrust
        array.push(bearish_signals, "UPTHRUST")
    if buying_climax
        array.push(bearish_signals, "BUY_CLIMAX⭐")
    if effort_rise
        array.push(bearish_signals, "EFFORT_RISE")
    if no_supply
        array.push(bearish_signals, "NO_SUPPLY")

// === DISPLAY ===

// EMA plots
p_fast = plot(useDualEMA ? fastEMA : na, "Fast EMA", color.aqua, 2)
p_slow = plot(useDualEMA ? slowEMA : na, "Slow EMA", color.orange, 2)
p_ema200 = plot(useEma200 ? ema200 : na, "EMA 200", color.gray, 2)

// EMA Cloud
cloud_color = useDualEMA ? (fastEMA > slowEMA ? color.new(color.green, 85) : color.new(color.red, 85)) : na
fill(p_fast, p_slow, color=cloud_color)

// Value Area Lines
plot(showVALines ? poc_value : na, "POC", color.red, 2)
plot(showVALines ? vah_value : na, "VAH", color.blue, 1)  
plot(showVALines ? val_value : na, "VAL", color.blue, 1)

// Background
bg_color = showBackground and math.abs(vsa_score) > 2.5 ? (vsa_score > 0 ? color.new(color.green, 90) : color.new(color.red, 90)) : na
bgcolor(bg_color)

// Spring/Upthrust markers
plotchar(showTRLines and spring, "Spring", "▲", location.belowbar, color.lime, size=size.small)
plotchar(showTRLines and upthrust, "Upthrust", "▼", location.abovebar, color.red, size=size.small)

// Scalping indicator
scalp_color = enableScalpMode and showScalpIndicator ? color.yellow : na
plotchar(enableScalpMode and showScalpIndicator, "Scalp Mode", "🎯", location.top, scalp_color, size=size.tiny)

// Signal Labels
dynamic_atr = f_getDynamicATR()

if array.size(bullish_signals) > 0 and barstate.isconfirmed
    signal_text = array.join(bullish_signals, "+")
    label_price = low - (dynamic_atr * 1.2)
    label_color = enableScalpMode ? color.new(color.lime, 20) : color.new(color.green, 30)
    label.new(bar_index, label_price, signal_text, style=label.style_label_down, size=size.small, color=label_color, textcolor=color.white)

if array.size(bearish_signals) > 0 and barstate.isconfirmed
    signal_text = array.join(bearish_signals, "+")
    label_price = high + (dynamic_atr * 1.2)
    label_color = enableScalpMode ? color.new(color.fuchsia, 20) : color.new(color.red, 30)
    label.new(bar_index, label_price, signal_text, style=label.style_label_up, size=size.small, color=label_color, textcolor=color.white)

// VSA Score Labels
if showScoreOnBars and vsa_score != 0 and barstate.isconfirmed
    score_offset = dynamic_atr * 2.0
    score_price = vsa_score > 0 ? low - score_offset : high + score_offset
    score_text = str.tostring(vsa_score, "#.#")
    quality = f_getSignalQuality(vsa_score, trend_up)
    quality_icon = quality >= 80 ? "🔥" : quality >= 60 ? "⚡" : "⚠️"
    
    label.new(bar_index, score_price, score_text + quality_icon, style=label.style_none, size=size.tiny, color=color.gray, textcolor=vsa_score > 0 ? color.green : color.red)

// Dashboard
var table dashboard = na
if showInfoPanel and barstate.islast
    pos = dashboardPosition == "top_right" ? position.top_right : 
          dashboardPosition == "top_left" ? position.top_left :
          dashboardPosition == "bottom_right" ? position.bottom_right : position.bottom_left
    
    if na(dashboard)
        dashboard := table.new(pos, 2, 8, bgcolor=color.new(color.black, 80), border_width=1)
    
    mode_text = enableScalpMode ? "SCALP " + scalpSensitivity : "STANDARD"
    quality = f_getSignalQuality(vsa_score, trend_up)
    strength = math.abs(vsa_score) > 4.0 ? "STRONG" : math.abs(vsa_score) > 2.0 ? "MODERATE" : "WEAK"
    
    table.cell(dashboard, 0, 0, "🎯 VSA ANALYSIS", text_color=color.yellow, bgcolor=color.blue)
    table.cell(dashboard, 1, 0, timeframe.period + " | " + mode_text, text_color=color.white, bgcolor=color.blue)
    table.cell(dashboard, 0, 1, "Trend:", text_color=color.white)
    table.cell(dashboard, 1, 1, trend_up ? "🔼 BULL" : "🔽 BEAR", text_color=trend_up ? color.lime : color.red)
    table.cell(dashboard, 0, 2, "VSA Score:", text_color=color.white)
    table.cell(dashboard, 1, 2, str.tostring(vsa_score, "#.##"), text_color=vsa_score > 0 ? color.green : color.red)
    table.cell(dashboard, 0, 3, "Quality:", text_color=color.white)
    table.cell(dashboard, 1, 3, str.tostring(quality) + "%", text_color=quality >= 80 ? color.lime : quality >= 60 ? color.yellow : color.orange)
    table.cell(dashboard, 0, 4, "Strength:", text_color=color.white)
    table.cell(dashboard, 1, 4, strength, text_color=strength == "STRONG" ? color.red : strength == "MODERATE" ? color.yellow : color.gray)
    table.cell(dashboard, 0, 5, "Volume:", text_color=color.white)
    table.cell(dashboard, 1, 5, bar_data.isHighVol ? "HIGH" : bar_data.isLowVol ? "LOW" : "NORMAL", text_color=bar_data.isHighVol ? color.red : color.blue)
    table.cell(dashboard, 0, 6, "Range:", text_color=color.white)
    table.cell(dashboard, 1, 6, bar_data.isWide ? "WIDE" : bar_data.isNarrow ? "NARROW" : "NORMAL", text_color=bar_data.isWide ? color.orange : color.blue)
    table.cell(dashboard, 0, 7, "Near VA:", text_color=color.white)
    table.cell(dashboard, 1, 7, f_isNearVA(close) ? "YES" : "NO", text_color=f_isNearVA(close) ? color.yellow : color.gray)

// Alert Logic
quality_current = f_getSignalQuality(vsa_score, trend_up)
should_alert = enableSmartAlerts and quality_current >= alertQualityThreshold and math.abs(vsa_score) > 2.5

// Pre-built Alert Messages (const strings)
bullish_alert_msg = "🔼 BULLISH VSA SIGNAL\nCheck dashboard for details\nSymbol: " + syminfo.ticker
bearish_alert_msg = "🔽 BEARISH VSA SIGNAL\nCheck dashboard for details\nSymbol: " + syminfo.ticker
premium_alert_msg = "🏆 PREMIUM VSA SIGNAL\nHigh quality signal detected\nSymbol: " + syminfo.ticker
structure_spring_msg = "🏗️ MARKET STRUCTURE\nSPRING at support\nPrice: " + str.tostring(close, "#.####")
structure_upthrust_msg = "🏗️ MARKET STRUCTURE\nUPTHRUST at resistance\nPrice: " + str.tostring(close, "#.####")
climax_selling_msg = "📢 VOLUME CLIMAX\nSELLING CLIMAX\nPrice: " + str.tostring(close, "#.####")
climax_buying_msg = "📢 VOLUME CLIMAX\nBUYING CLIMAX\nPrice: " + str.tostring(close, "#.####")

// Alert Conditions
alertcondition(should_alert and vsa_score > 0 and barstate.isconfirmed, "🔼 Smart Bullish Alert", bullish_alert_msg)

alertcondition(should_alert and vsa_score < 0 and barstate.isconfirmed, "🔽 Smart Bearish Alert", bearish_alert_msg)

alertcondition(should_alert and quality_current >= 80 and math.abs(vsa_score) > 4.0 and barstate.isconfirmed, "⭐ Premium Signal", premium_alert_msg)

alertcondition(spring and barstate.isconfirmed, "🏗️ Spring Signal", structure_spring_msg)

alertcondition(upthrust and barstate.isconfirmed, "🏗️ Upthrust Signal", structure_upthrust_msg)

alertcondition(selling_climax and barstate.isconfirmed, "📢 Selling Climax", climax_selling_msg)

alertcondition(buying_climax and barstate.isconfirmed, "📢 Buying Climax", climax_buying_msg)