//@version=5
indicator('SMPA+ Fixed', 'SMPA+', overlay = true, max_labels_count = 500, max_lines_count = 500, max_boxes_count = 500)

//---------------------------------------------------------------------------------------------------------------------}
//CONSTANTS & STRINGS & INPUTS
//---------------------------------------------------------------------------------------------------------------------{
BULLISH_LEG                     = 1
BEARISH_LEG                     = 0
BULLISH                         = +1
BEARISH                         = -1
GREEN                           = #089981
RED                             = #F23645
BLUE                            = #2157f3
GRAY                            = #878b94
MONO_BULLISH                    = #b2b5be
MONO_BEARISH                    = #5d606b
HISTORICAL                      = 'Historical'
PRESENT                         = 'Present'
COLORED                         = 'Colored'
MONOCHROME                      = 'Monochrome'
ALL                             = 'All'
BOS                             = 'BOS'
CHOCH                           = 'CHoCH'
TINY                            = size.tiny
SMALL                           = size.small
NORMAL                          = size.normal
ATR                             = 'Atr'
RANGE                           = 'Cumulative Mean Range'
CLOSE                           = 'Close'
HIGHLOW                         = 'High/Low'
SOLID                           = '⎯⎯⎯'
DASHED                          = '----'
DOTTED                          = '····'

SMART_GROUP                     = 'Smart Money Concepts'
INTERNAL_GROUP                  = 'Real Time Internal Structure'
SWING_GROUP                     = 'Real Time Swing Structure'
BLOCKS_GROUP                    = 'Order Blocks'
EQUAL_GROUP                     = 'EQH/EQL'
GAPS_GROUP                      = 'Fair Value Gaps'
LEVELS_GROUP                    = 'Highs & Lows MTF'
ZONES_GROUP                     = 'Premium & Discount Zones'

// INPUTS
modeInput                       = input.string( HISTORICAL, 'Mode',                     group = SMART_GROUP)
styleInput                      = input.string( COLORED,    'Style',                    group = SMART_GROUP)
showTrendInput                  = input(        false,      'Color Candles',            group = SMART_GROUP)

showInternalsInput              = input(        true,       'Show Internal Structure',  group = INTERNAL_GROUP)
showInternalBullInput           = input.string( ALL,        'Bullish Structure',        group = INTERNAL_GROUP, inline = 'ibull', options = [ALL,BOS,CHOCH])
internalBullColorInput          = input(        GREEN,      '',                         group = INTERNAL_GROUP, inline = 'ibull')
showInternalBearInput           = input.string( ALL,        'Bearish Structure' ,       group = INTERNAL_GROUP, inline = 'ibear', options = [ALL,BOS,CHOCH])
internalBearColorInput          = input(        RED,        '',                         group = INTERNAL_GROUP, inline = 'ibear')
internalFilterConfluenceInput   = input(        false,      'Confluence Filter',        group = INTERNAL_GROUP)
internalStructureSize           = input.string( TINY,       'Internal Label Size',      group = INTERNAL_GROUP, options = [TINY,SMALL,NORMAL])

showStructureInput              = input(        true,       'Show Swing Structure',     group = SWING_GROUP)
showSwingBullInput              = input.string( ALL,        'Bullish Structure',        group = SWING_GROUP,    inline = 'bull',    options = [ALL,BOS,CHOCH])
swingBullColorInput             = input(        GREEN,      '',                         group = SWING_GROUP,    inline = 'bull')
showSwingBearInput              = input.string( ALL,        'Bearish Structure',        group = SWING_GROUP,    inline = 'bear',    options = [ALL,BOS,CHOCH])
swingBearColorInput             = input(        RED,        '',                         group = SWING_GROUP,    inline = 'bear')
swingStructureSize              = input.string( SMALL,      'Swing Label Size',         group = SWING_GROUP,    options = [TINY,SMALL,NORMAL])
showSwingsInput                 = input(        false,      'Show Swings Points',       group = SWING_GROUP,                inline = 'swings')
swingsLengthInput               = input.int(    50,         '',                         group = SWING_GROUP,    minval = 10,                inline = 'swings')
showHighLowSwingsInput          = input(        true,       'Show Strong/Weak High/Low',group = SWING_GROUP)

showInternalOrderBlocksInput    = input(        true,       'Internal Order Blocks' ,   group = BLOCKS_GROUP,                   inline = 'iob')
internalOrderBlocksSizeInput    = input.int(    5,          '',                         group = BLOCKS_GROUP,   minval = 1, maxval = 20,                    inline = 'iob')
showSwingOrderBlocksInput       = input(        false,      'Swing Order Blocks',       group = BLOCKS_GROUP,                      inline = 'ob')
swingOrderBlocksSizeInput       = input.int(    5,          '',                         group = BLOCKS_GROUP,   minval = 1, maxval = 20,                    inline = 'ob') 
orderBlockFilterInput           = input.string( 'Atr',      'Order Block Filter',       group = BLOCKS_GROUP,          options = [ATR, RANGE])
orderBlockMitigationInput       = input.string( HIGHLOW,    'Order Block Mitigation',   group = BLOCKS_GROUP,      options = [CLOSE,HIGHLOW])
internalBullishOrderBlockColor  = input.color(color.new(#3179f5, 80), 'Internal Bullish OB',    group = BLOCKS_GROUP)
internalBearishOrderBlockColor  = input.color(color.new(#f77c80, 80), 'Internal Bearish OB',    group = BLOCKS_GROUP)
swingBullishOrderBlockColor     = input.color(color.new(#1848cc, 80), 'Bullish OB',             group = BLOCKS_GROUP)
swingBearishOrderBlockColor     = input.color(color.new(#b22833, 80), 'Bearish OB',             group = BLOCKS_GROUP)

showEqualHighsLowsInput         = input(        true,       'Equal High/Low',           group = EQUAL_GROUP)
equalHighsLowsLengthInput       = input.int(    3,          'Bars Confirmation',        group = EQUAL_GROUP,      minval = 1)
equalHighsLowsThresholdInput    = input.float(  0.1,        'Threshold',                group = EQUAL_GROUP,   minval = 0, maxval = 0.5, step = 0.1)
equalHighsLowsSizeInput         = input.string( TINY,       'Label Size',               group = EQUAL_GROUP,    options = [TINY,SMALL,NORMAL])

showFairValueGapsInput          = input(        false,      'Fair Value Gaps',          group = GAPS_GROUP)
fairValueGapsThresholdInput     = input(        true,       'Auto Threshold',           group = GAPS_GROUP)
fairValueGapsTimeframeInput     = input.timeframe('',       'Timeframe',                group = GAPS_GROUP)
fairValueGapsBullColorInput     = input.color(color.new(#00ff68, 70), 'Bullish FVG' , group = GAPS_GROUP)
fairValueGapsBearColorInput     = input.color(color.new(#ff0008, 70), 'Bearish FVG' , group = GAPS_GROUP)
fairValueGapsExtendInput        = input.int(    1,          'Extend FVG',               group = GAPS_GROUP,       minval = 0)

showDailyLevelsInput            = input(        false,      'Daily',    group = LEVELS_GROUP,   inline = 'daily')
dailyLevelsStyleInput           = input.string( SOLID,      '',         group = LEVELS_GROUP,   inline = 'daily',   options = [SOLID,DASHED,DOTTED])
dailyLevelsColorInput           = input(        BLUE,       '',         group = LEVELS_GROUP,   inline = 'daily')
showWeeklyLevelsInput           = input(        false,      'Weekly',   group = LEVELS_GROUP,   inline = 'weekly')
weeklyLevelsStyleInput          = input.string( SOLID,      '',         group = LEVELS_GROUP,   inline = 'weekly',  options = [SOLID,DASHED,DOTTED])
weeklyLevelsColorInput          = input(        BLUE,       '',         group = LEVELS_GROUP,   inline = 'weekly')
showMonthlyLevelsInput          = input(        false,      'Monthly',   group = LEVELS_GROUP,   inline = 'monthly')
monthlyLevelsStyleInput         = input.string( SOLID,      '',         group = LEVELS_GROUP,   inline = 'monthly', options = [SOLID,DASHED,DOTTED])
monthlyLevelsColorInput         = input(        BLUE,       '',         group = LEVELS_GROUP,   inline = 'monthly')

showPremiumDiscountZonesInput   = input(        false,      'Premium/Discount Zones',   group = ZONES_GROUP)
premiumDiscountMethodInput      = input.string('Fibonacci', 'P/D Method', group = ZONES_GROUP, options = ['Fibonacci', 'Percentage', 'ATR Based'])
premiumPercentageInput          = input.float(70.0, 'Premium %', group = ZONES_GROUP, minval = 50.0, maxval = 80.0, step = 5.0)
discountPercentageInput         = input.float(30.0, 'Discount %', group = ZONES_GROUP, minval = 20.0, maxval = 50.0, step = 5.0)
equilibriumWidthInput           = input.float(10.0, 'Equilibrium Width %', group = ZONES_GROUP, minval = 5.0, maxval = 20.0, step = 2.5)
lookbackPeriodInput             = input.int(100, 'Lookback Period', group = ZONES_GROUP, minval = 50, maxval = 500)
dynamicZonesInput               = input(true, 'Dynamic Zones', group = ZONES_GROUP)
showZoneLabelsInput             = input(true, 'Show Zone Labels', group = ZONES_GROUP)
showZoneMidlinesInput           = input(true, 'Show Zone Midlines', group = ZONES_GROUP)
showZoneTableInput              = input(false, 'Show Zone Info Table', group = ZONES_GROUP)
premiumZoneColorInput           = input.color(  RED,        'Premium Zone',             group = ZONES_GROUP)
equilibriumZoneColorInput       = input.color(  GRAY,       'Equilibrium Zone',         group = ZONES_GROUP)
discountZoneColorInput          = input.color(  GREEN,      'Discount Zone',            group = ZONES_GROUP)

//---------------------------------------------------------------------------------------------------------------------}
//DATA STRUCTURES
//---------------------------------------------------------------------------------------------------------------------{
type alerts
    bool internalBullishBOS         = false
    bool internalBearishBOS         = false
    bool internalBullishCHoCH       = false
    bool internalBearishCHoCH       = false
    bool swingBullishBOS            = false
    bool swingBearishBOS            = false
    bool swingBullishCHoCH          = false
    bool swingBearishCHoCH          = false
    bool internalBullishOrderBlock  = false
    bool internalBearishOrderBlock  = false
    bool swingBullishOrderBlock     = false
    bool swingBearishOrderBlock     = false
    bool equalHighs                 = false
    bool equalLows                  = false
    bool bullishFairValueGap        = false
    bool bearishFairValueGap        = false
    bool premiumZoneEntry           = false
    bool discountZoneEntry          = false
    bool equilibriumZoneEntry       = false

type premiumDiscountZone
    float premiumTop
    float premiumBottom
    float equilibriumTop
    float equilibriumBottom
    float discountTop
    float discountBottom
    float rangeHigh
    float rangeLow

//---------------------------------------------------------------------------------------------------------------------}
//VARIABLES
//---------------------------------------------------------------------------------------------------------------------{
var premiumDiscountZone currentZone = premiumDiscountZone.new()
var table zoneTable = na
var string previousZonePosition     = na
alerts currentAlerts                = alerts.new()
varip int currentBarIndex           = bar_index
varip int lastBarIndex              = bar_index

// Initialize table once
if barstate.isfirst and showZoneTableInput
    zoneTable := table.new(position.top_right, 2, 4, bgcolor = color.white, border_width = 1)

//---------------------------------------------------------------------------------------------------------------------}
//HELPER FUNCTIONS
//---------------------------------------------------------------------------------------------------------------------{
getRangeHighLow() =>
    rh = ta.highest(high, lookbackPeriodInput)
    rl = ta.lowest(low, lookbackPeriodInput)
    [rh, rl]

calculatePremiumDiscountZones(method, rangeHigh, rangeLow) =>
    span = math.max(rangeHigh - rangeLow, 0.0)
    mid  = rangeLow + span * 0.5
    float pTop = 0.0
    float pBottom = 0.0
    float eTop = 0.0
    float eBottom = 0.0
    float dTop = 0.0
    float dBottom = 0.0

    if method == 'Fibonacci'
        pTop     := rangeHigh
        pBottom  := rangeLow + span * 0.618
        halfW    = equilibriumWidthInput / 100.0 * span * 0.5
        eTop     := mid + halfW
        eBottom  := mid - halfW
        dTop     := rangeLow + span * 0.382
        dBottom  := rangeLow
    else if method == 'Percentage'
        premPct  = math.max(0.0, math.min(1.0, premiumPercentageInput   / 100.0))
        discPct  = math.max(0.0, math.min(1.0, discountPercentageInput  / 100.0))
        pTop     := rangeHigh
        pBottom  := rangeLow + span * premPct
        dTop     := rangeLow + span * discPct
        dBottom  := rangeLow
        halfW    = equilibriumWidthInput / 100.0 * span * 0.5
        eTop     := mid + halfW
        eBottom  := mid - halfW
    else
        atrV     = ta.atr(14)
        band     = math.max(atrV, span * 0.1)
        pTop     := rangeHigh
        pBottom  := mid + band * 0.5
        dTop     := mid - band * 0.5
        dBottom  := rangeLow
        eTop     := mid + band * 0.25
        eBottom  := mid - band * 0.25

    premiumDiscountZone.new(pTop, pBottom, eTop, eBottom, dTop, dBottom, rangeHigh, rangeLow)

drawPremiumDiscountZonesImproved(z) =>
    if not na(z)
        right = bar_index + math.max(1, fairValueGapsExtendInput)
        if not na(z.premiumTop) and not na(z.premiumBottom)
            box.new(bar_index, z.premiumTop, right, z.premiumBottom, bgcolor = color.new(premiumZoneColorInput, 90), border_color = premiumZoneColorInput)
            if showZoneMidlinesInput
                line.new(bar_index, (z.premiumTop + z.premiumBottom) / 2, right, (z.premiumTop + z.premiumBottom) / 2, color = premiumZoneColorInput)
            if showZoneLabelsInput
                label.new(bar_index, z.premiumTop, "Premium", style = label.style_label_down, color = premiumZoneColorInput, textcolor = color.white)
        if not na(z.equilibriumTop) and not na(z.equilibriumBottom)
            box.new(bar_index, z.equilibriumTop, right, z.equilibriumBottom, bgcolor = color.new(equilibriumZoneColorInput, 90), border_color = equilibriumZoneColorInput)
            if showZoneMidlinesInput
                line.new(bar_index, (z.equilibriumTop + z.equilibriumBottom) / 2, right, (z.equilibriumTop + z.equilibriumBottom) / 2, color = equilibriumZoneColorInput)
            if showZoneLabelsInput
                label.new(bar_index, z.equilibriumTop, "Equilibrium", style = label.style_label_left, color = equilibriumZoneColorInput, textcolor = color.white)
        if not na(z.discountTop) and not na(z.discountBottom)
            box.new(bar_index, z.discountTop, right, z.discountBottom, bgcolor = color.new(discountZoneColorInput, 90), border_color = discountZoneColorInput)
            if showZoneMidlinesInput
                line.new(bar_index, (z.discountTop + z.discountBottom) / 2, right, (z.discountTop + z.discountBottom) / 2, color = discountZoneColorInput)
            if showZoneLabelsInput
                label.new(bar_index, z.discountTop, "Discount", style = label.style_label_up, color = discountZoneColorInput, textcolor = color.white)

getCurrentZonePosition(z) =>
    if na(z)
        'Unknown'
    else
        c = close
        if c <= z.premiumTop and c >= z.premiumBottom
            'Premium'
        else if c <= z.discountTop and c >= z.discountBottom  
            'Discount'
        else
            'Equilibrium'

checkZoneLevelTouch(z) =>
    if na(z)
        false
    else
        p1 = low <= z.premiumTop and high >= z.premiumTop
        p2 = low <= z.premiumBottom and high >= z.premiumBottom
        p3 = low <= z.discountTop and high >= z.discountTop
        p4 = low <= z.discountBottom and high >= z.discountBottom
        p1 or p2 or p3 or p4

drawFairValueGaps() =>
    if showFairValueGapsInput
        gap_up = low > high[2] and close[1] > high[2]
        gap_down = high < low[2] and close[1] < low[2]
        if gap_up
            right_bar = bar_index + fairValueGapsExtendInput
            box.new(bar_index[2], high[2], right_bar, low, bgcolor=fairValueGapsBullColorInput, border_color=na)
        if gap_down
            right_bar = bar_index + fairValueGapsExtendInput
            box.new(bar_index[2], low[2], right_bar, high, bgcolor=fairValueGapsBearColorInput, border_color=na)

drawOrderBlocks(isInternal = false) =>
    // Pre-compute ta functions for consistency
    highest5 = ta.highest(high, 5)
    highest20 = ta.highest(high, 20)
    lowest3 = ta.lowest(low, 3)
    lowest10 = ta.lowest(low, 10)
    highest3 = ta.highest(high, 3)
    highest10 = ta.highest(high, 10)
    
    // Only draw if conditions are met and barstate allows
    shouldDraw = barstate.islastconfirmedhistory or barstate.islast
    
    if shouldDraw and isInternal and showInternalOrderBlocksInput
        if close > highest5[1]
            ob_low = lowest3[1]
            ob_high = highest3[1]
            box.new(bar_index-3, ob_low, bar_index, ob_high, bgcolor=internalBullishOrderBlockColor, border_color=na)
    else if shouldDraw and not isInternal and showSwingOrderBlocksInput
        if close > highest20[1]
            ob_low = lowest10[1] 
            ob_high = highest10[1]
            box.new(bar_index-10, ob_low, bar_index, ob_high, bgcolor=swingBullishOrderBlockColor, border_color=na)

drawLevels(tf, isCurrentTF, lineStyle, clr) =>
    // Always fetch data for consistency
    htf_high = request.security(syminfo.tickerid, tf, ta.highest(high, 1), lookahead=barmerge.lookahead_off)
    htf_low = request.security(syminfo.tickerid, tf, ta.lowest(low, 1), lookahead=barmerge.lookahead_off)
    
    // Only draw if not current timeframe and conditions are met
    shouldDrawTF = (tf == 'D' and showDailyLevelsInput) or (tf == 'W' and showWeeklyLevelsInput) or (tf == 'M' and showMonthlyLevelsInput)
    shouldDraw = not isCurrentTF and shouldDrawTF and (barstate.islastconfirmedhistory or (barstate.isrealtime and (bar_index != bar_index[1])))
    
    if shouldDraw
        style = lineStyle == SOLID ? line.style_solid : lineStyle == DASHED ? line.style_dashed : line.style_dotted
        if not na(htf_high)
            line.new(bar_index, htf_high, bar_index+50, htf_high, color=clr, style=style, width=1, extend=extend.right)
        if not na(htf_low)
            line.new(bar_index, htf_low, bar_index+50, htf_low, color=clr, style=style, width=1, extend=extend.right)

//---------------------------------------------------------------------------------------------------------------------}
//MAIN EXECUTION  
//---------------------------------------------------------------------------------------------------------------------{
// Calculate zones
[rangeHigh, rangeLow] = getRangeHighLow()
currentZone := calculatePremiumDiscountZones(premiumDiscountMethodInput, rangeHigh, rangeLow)

// Draw Fair Value Gaps
if showFairValueGapsInput
    drawFairValueGaps()

// Draw zones 
if showPremiumDiscountZonesInput
    drawPremiumDiscountZonesImproved(currentZone)

// Zone position tracking and alerts
currentPosition = getCurrentZonePosition(currentZone)
zoneLevelTouch = checkZoneLevelTouch(currentZone)

// Set alerts for zone changes
if not na(previousZonePosition)
    if currentPosition == 'Premium' and previousZonePosition != 'Premium'
        currentAlerts.premiumZoneEntry := true
    else if currentPosition == 'Discount' and previousZonePosition != 'Discount'
        currentAlerts.discountZoneEntry := true
    else if currentPosition == 'Equilibrium' and previousZonePosition != 'Equilibrium'
        currentAlerts.equilibriumZoneEntry := true

previousZonePosition := currentPosition

// Zone information table
if showZoneTableInput and showPremiumDiscountZonesInput and barstate.islast
    zoneColor = currentPosition == 'Premium' ? color.red : currentPosition == 'Discount' ? color.green : color.gray
    table.cell(zoneTable, 0, 0, "Zone Analysis", text_color = color.black, text_size = size.normal)
    table.cell(zoneTable, 1, 0, premiumDiscountMethodInput, text_color = color.black, text_size = size.normal)
    table.cell(zoneTable, 0, 1, "Current Position", text_color = color.black, text_size = size.small)
    table.cell(zoneTable, 1, 1, currentPosition, text_color = zoneColor, text_size = size.small)
    table.cell(zoneTable, 0, 2, "Range High", text_color = color.black, text_size = size.small)
    table.cell(zoneTable, 1, 2, str.tostring(rangeHigh, '#.##'), text_color = color.black, text_size = size.small)
    table.cell(zoneTable, 0, 3, "Range Low", text_color = color.black, text_size = size.small)
    table.cell(zoneTable, 1, 3, str.tostring(rangeLow, '#.##'), text_color = color.black, text_size = size.small)

// Draw Order Blocks - call unconditionally for consistency
drawOrderBlocks(true)
drawOrderBlocks(false)

// Update bar tracking
lastBarIndex    := currentBarIndex
currentBarIndex := bar_index
newBar          = currentBarIndex != lastBarIndex

// Draw MTF Levels - call unconditionally for consistency
drawLevels('D', timeframe.isdaily, dailyLevelsStyleInput, dailyLevelsColorInput)
drawLevels('W', timeframe.isweekly, weeklyLevelsStyleInput, weeklyLevelsColorInput)
drawLevels('M', timeframe.ismonthly, monthlyLevelsStyleInput, monthlyLevelsColorInput)

//---------------------------------------------------------------------------------------------------------------------}
//ALERTS
//---------------------------------------------------------------------------------------------------------------------{
alertcondition(currentAlerts.internalBullishBOS,        'Internal Bullish BOS',         'Internal Bullish BOS formed')
alertcondition(currentAlerts.internalBullishCHoCH,      'Internal Bullish CHoCH',       'Internal Bullish CHoCH formed')
alertcondition(currentAlerts.internalBearishBOS,        'Internal Bearish BOS',         'Internal Bearish BOS formed')
alertcondition(currentAlerts.internalBearishCHoCH,      'Internal Bearish CHoCH',       'Internal Bearish CHoCH formed')
alertcondition(currentAlerts.swingBullishBOS,           'Bullish BOS',                  'Internal Bullish BOS formed')
alertcondition(currentAlerts.swingBullishCHoCH,         'Bullish CHoCH',                'Internal Bullish CHoCH formed')
alertcondition(currentAlerts.swingBearishBOS,           'Bearish BOS',                  'Bearish BOS formed')
alertcondition(currentAlerts.swingBearishCHoCH,         'Bearish CHoCH',                'Bearish CHoCH formed')
alertcondition(currentAlerts.internalBullishOrderBlock, 'Bullish Internal OB Breakout', 'Price broke bullish internal OB')
alertcondition(currentAlerts.internalBearishOrderBlock, 'Bearish Internal OB Breakout', 'Price broke bearish internal OB')
alertcondition(currentAlerts.swingBullishOrderBlock,    'Bullish Swing OB Breakout',    'Price broke bullish swing OB')
alertcondition(currentAlerts.swingBearishOrderBlock,    'Bearish Swing OB Breakout',    'Price broke bearish swing OB')
alertcondition(currentAlerts.equalHighs,                'Equal Highs',                  'Equal highs detected')
alertcondition(currentAlerts.equalLows,                 'Equal Lows',                   'Equal lows detected')
alertcondition(currentAlerts.bullishFairValueGap,       'Bullish FVG',                  'Bullish FVG formed')
alertcondition(currentAlerts.bearishFairValueGap,       'Bearish FVG',                  'Bearish FVG formed')
alertcondition(currentAlerts.premiumZoneEntry,          'Price Entered Premium Zone',   'Price has entered the Premium zone')
alertcondition(currentAlerts.discountZoneEntry,         'Price Entered Discount Zone',  'Price has entered the Discount zone')
alertcondition(currentAlerts.equilibriumZoneEntry,      'Price Entered Equilibrium Zone', 'Price has entered the Equilibrium zone')
alertcondition(zoneLevelTouch,                          'Zone Level Touch',             'Price touched a significant zone level')