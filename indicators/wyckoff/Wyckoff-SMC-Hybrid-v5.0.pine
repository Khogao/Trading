//@version=5
// Wyckoff-SMC Hybrid v5.0 - The Architect's Edition
indicator("Wyckoff-SMC Hybrid [v5.0]", "WSH v5.0", overlay=true, max_labels_count=500, max_boxes_count=200)

// =============================================================================
// I. INPUTS - Bảng Điều Khiển Toàn Diện
// =============================================================================

// --- 1. Wyckoff Core Engine ---
core_group = "1. Wyckoff Core Engine"
show_bg    = input.bool(true, title="Show Phase Background", group=core_group)
show_wyckoff_labels= input.bool(true, title="Show Event Labels", group=core_group)
vol_lookback   = input.int(50, "Volume Lookback", minval=10, group=core_group)
vol_mult       = input.float(3.0, "Volume Spike Multiplier (Crypto)", minval=1.0, step=0.1, group=core_group)
range_mult     = input.float(2.0, "Climax Candle Range Multiplier (Crypto)", minval=1.0, step=0.1, group=core_group)
atr_len        = input.int(14, "ATR Length", group=core_group)

// --- 2. Points of Interest (POI) ---
poi_group = "2. Points of Interest (POI)"
show_kv_zones = input.bool(true, "Show Key Level (KV) Zones", group=poi_group)
show_ob_zones = input.bool(true, "Show Order Block (OB) Zones", group=poi_group)
highlight_context_poi = input.bool(true, "Highlight Contextual POIs", group=poi_group)
poi_extend_bars       = input.int(100, "Extend POI (bars)", group=poi_group)
poi_max_active_zones  = input.int(10, "Max Active POI zones", group=poi_group, tooltip="Số lượng vùng POI gần nhất được giữ lại để tránh làm chậm chart.")
kv_zone_len    = input.int(20, "KV Zone Lookback", minval=2, group=poi_group)
kv_wick_mult   = input.float(1.0, "KV Wick/Body Min Ratio", minval=0.1, step=0.1, group=poi_group)

// --- 3. Structural & Liquidity Analysis ---
struct_group = "3. Structural & Liquidity Analysis"
show_sw_hl = input.bool(true, "Show Strong/Weak Highs & Lows", group=struct_group)
show_liquidity = input.bool(true, "Show Liquidity Pools (EQH/EQL)", group=struct_group)
pivot_len  = input.int(5, "Pivot Lookback", minval=2, group=struct_group)
liquidity_atr_mult = input.float(0.1, "Liquidity Proximity (x ATR)", group=struct_group)

// --- 4. Traps & Entry Signals ---
signal_group = "4. Traps & Entry Signals"
show_traps   = input.bool(true, "Show Trap/Confirmation Signals (NS/ND)", group=signal_group)
show_entries = input.bool(true, "Show Final Buy/Sell Entries", group=signal_group)
entry_throttle = input.int(10, "Entry Signal Throttle (bars)", group=signal_group)
htf_confirm_tf = input.string("240", "Confirmation Timeframe", group=signal_group, options=["60", "240", "D"])

// --- 5. Risk Management ---
risk_group = "5. Risk Management"
show_risk_levels = input.bool(true, "Show SL/TP Levels on Signal", group=risk_group)
sl_atr_mult  = input.float(1.5, "Stop Loss ATR Multiplier", group=risk_group, step=0.1)
tp1_atr_mult = input.float(2.0, "Take Profit 1 ATR Multiplier", group=risk_group, step=0.1)
tp2_atr_mult = input.float(4.0, "Take Profit 2 ATR Multiplier", group=risk_group, step=0.1)
tp3_atr_mult = input.float(6.0, "Take Profit 3 ATR Multiplier", group=risk_group, step=0.1)

// =============================================================================
// II. CORE LOGIC & STATE MANAGEMENT
// =============================================================================
// --- Data & State ---
vol_sma = ta.sma(volume, vol_lookback)
atr_val = ta.atr(atr_len)
is_vol_spike = volume > vol_sma * vol_mult
is_wide_range_bear = close < open and (open - close) > atr_val * range_mult
is_wide_range_bull = close > open and (close - open) > atr_val * range_mult

// Precompute for consistency warnings
var int   phase = 0 // 0:Neutral, 1:TR, 2:Accum, 3:Distrib
var float tr_high = na
var float tr_low = na
var int   tr_start_bar = na
var int   last_event_bar = na
var int   last_spring_bar = na
var int   last_ut_bar = na
var int   last_sos_bar = na
var int   last_sow_bar = na
var float last_swing_high = na
var float last_swing_low = na
var float strong_high = na
var float strong_low = na
var box[]   box_array = array.new_box(0)
var bool[]  box_is_bull = array.new_bool(0)
var line[]  line_array = array.new_line(0)
var label[] label_array = array.new_label(0)
// giữ offset của nến đối hướng gần nhất khi tìm OB
var int last_bear_off = na
var int last_bull_off = na
var int last_buy_bar = na
var int last_sell_bar = na
// ---- moved here: Precompute for consistency warnings (called mỗi bar) ----
lowest20_raw     = ta.lowest(low, 20)
highest20_raw    = ta.highest(high, 20)
// dùng [1] an toàn khi đã có >=1 bar lịch sử
lowest20_1       = bar_index > 0 ? lowest20_raw[1]  : na
highest20_1      = bar_index > 0 ? highest20_raw[1] : na

ema21            = ta.ema(close, 21)
lookback_len     = na(tr_start_bar) ? na : math.max(1, bar_index - tr_start_bar)
len_eff          = nz(lookback_len, 1)
// clamp độ dài không vượt quá số bar đã có + 1
len_clamped      = math.min(len_eff, bar_index + 1)
range_lowest_all  = ta.lowest(low, len_clamped)
range_highest_all = ta.highest(high, len_clamped)
range_lowest     = na(lookback_len) ? na : range_lowest_all
range_highest    = na(lookback_len) ? na : range_highest_all
// --------------------------------------------------------------------------
// HTF confirmation (EMA50 trên TF xác nhận)
htf_close  = request.security(syminfo.tickerid, htf_confirm_tf, close, barmerge.gaps_off, barmerge.lookahead_off)
htf_ema50  = request.security(syminfo.tickerid, htf_confirm_tf, ta.ema(close, 50), barmerge.gaps_off, barmerge.lookahead_off)
htf_is_bull = htf_close > htf_ema50
htf_is_bear = htf_close < htf_ema50
// helper an toàn lịch sử
bars_ready(n) => bar_index >= n

// --- Helper Functions ---
f_add_label(bar, price, txt, style, clr, txt_color) =>
    if show_wyckoff_labels
        label.new(bar, price, txt, style=style, color=clr, textcolor=txt_color, size=size.small)

f_draw_poi_box(float p_top, float p_bottom, p_color, p_style, string p_label) =>
    if na(p_top) or na(p_bottom)
        na
    else
        is_contextual = (str.contains(p_label, "Bull") and phase == 2) or (str.contains(p_label, "Bear") and phase == 3)
        final_color = highlight_context_poi and is_contextual ? p_color : color.new(color.gray, 70)
        left_x  = bar_index > 0 ? bar_index - 1 : 0
        right_x = bar_index + poi_extend_bars
        b = box.new(left_x, p_top, right_x, p_bottom, border_color=final_color, border_style=p_style, bgcolor=color.new(final_color, 85))
        array.push(box_array, b)
        array.push(box_is_bull, str.contains(p_label, "Bull"))
        if array.size(box_array) > poi_max_active_zones
            old_box = array.shift(box_array)
            old_flag = array.shift(box_is_bull)
            if box.get_bottom(old_box) > high or box.get_top(old_box) < low
                box.delete(old_box)
            else
                array.unshift(box_array, old_box)
                array.unshift(box_is_bull, old_flag)

// ensure function called every bar (consistency)
f_draw_poi_box(na, na, color.gray, line.style_solid, "")

// --- Wyckoff Phase & Event Detection ---
// Phase 0: Neutral -> Finding a Climax event
if phase == 0
    if is_wide_range_bear and is_vol_spike and low < lowest20_1
        phase := 1
        tr_low := low
        tr_high := high
        tr_start_bar := bar_index
        last_event_bar := bar_index
        f_add_label(bar_index, low, "SC", label.style_label_up, color.new(color.red, 20), color.red)
    if is_wide_range_bull and is_vol_spike and high > highest20_1
        phase := 1
        tr_high := high
        tr_low := low
        tr_start_bar := bar_index
        last_event_bar := bar_index
        f_add_label(bar_index, high, "BC", label.style_label_down, color.new(color.green, 20), color.green)

// Phase 1: In Trading Range -> Updating boundaries and tests
if phase == 1
    tr_high := math.max(tr_high, high)
    tr_low := math.min(tr_low, low)
    is_st_bear = math.abs(high - tr_high) < atr_val * 0.2 and volume < vol_sma
    is_st_bull = math.abs(low - tr_low) < atr_val * 0.2 and volume < vol_sma
    if is_st_bear
        f_add_label(bar_index, high, "ST", label.style_label_down, color.new(color.gray, 20), color.gray)
    if is_st_bull
        f_add_label(bar_index, low, "ST", label.style_label_up, color.new(color.gray, 20), color.gray)

// Phase 1, 2, 3: Looking for Terminal Events (Spring/UT) and Breakouts (SOS/SOW)
if phase >= 1 and not na(tr_low)
    // Spring
    is_spring_vol_ok = volume > vol_sma * 1.5 or volume < vol_sma * 0.8
    if low < tr_low and close > tr_low and is_spring_vol_ok and bar_index > last_event_bar + 5
        phase := 2
        last_event_bar := bar_index
        last_spring_bar := bar_index
        f_add_label(bar_index, low, "SP", label.style_label_up, color.new(color.green, 20), color.green)
    // Upthrust
    is_ut_vol_ok = volume > vol_sma * 1.5
    if high > tr_high and close < tr_high and is_ut_vol_ok and bar_index > last_event_bar + 5
        phase := 3
        last_event_bar := bar_index
        last_ut_bar := bar_index
        f_add_label(bar_index, high, "UT", label.style_label_down, color.new(color.red, 20), color.red)
    
    // Breakouts (SOS/SOW)
    is_sos = close > tr_high and close > open and volume > vol_sma * 1.5
    is_sow = close < tr_low and close < open and volume > vol_sma * 1.5
    if is_sos and phase < 3
        strong_low := range_lowest
        strong_high := na
        last_sos_bar := bar_index
        f_add_label(bar_index, high, "SOS", label.style_label_up, color.new(color.blue, 20), color.blue)
        // reset phase state (no function mutation of globals)
        phase := 0
        tr_high := na
        tr_low := na
        last_spring_bar := na
        last_ut_bar := na
        last_sos_bar := na
        last_sow_bar := na
    if is_sow and phase < 2
        strong_high := range_highest
        strong_low := na
        last_sow_bar := bar_index
        f_add_label(bar_index, low, "SOW", label.style_label_down, color.new(color.purple, 20), color.purple)
        // reset phase state (no function mutation of globals)
        phase := 0
        tr_high := na
        tr_low := na
        last_spring_bar := na
        last_ut_bar := na
        last_sos_bar := na
        last_sow_bar := na

// --- POI Drawing & Management ---
if show_kv_zones and bars_ready(kv_zone_len + 1)
    kv_low_prev  = ta.lowest(low, kv_zone_len)[1]
    kv_high_prev = ta.highest(high, kv_zone_len)[1]
    is_kv_bull = ta.crossunder(low, kv_low_prev) and close > open and (math.min(open, close) - low) / math.max(math.abs(open - close), syminfo.mintick) >= kv_wick_mult
    if is_kv_bull and bars_ready(1)
        f_draw_poi_box(high[1], low[1], color.blue, line.style_dashed, "KV Bull")
    is_kv_bear = ta.crossover(high, kv_high_prev) and close < open and (high - math.max(open, close)) / math.max(math.abs(open - close), syminfo.mintick) >= kv_wick_mult
    if is_kv_bear and bars_ready(1)
        f_draw_poi_box(high[1], low[1], color.orange, line.style_dashed, "KV Bear")

if show_ob_zones
    // OB Bull trước SOS
    if not na(last_sos_bar)
        bars_since_sos = bar_index - last_sos_bar
        max_scan = math.min(20, bar_index - bars_since_sos)
        last_bear_off := na
        for i = 1 to max_scan
            off = bars_since_sos + i
            if off <= bar_index
                if close[off] < open[off]
                    last_bear_off := na(last_bear_off) ? off : last_bear_off
                else
                    if not na(last_bear_off)
                        break
        if not na(last_bear_off) and last_bear_off <= bar_index
            f_draw_poi_box(high[last_bear_off], low[last_bear_off], color.teal, line.style_solid, "OB Bull")
            last_sos_bar := na
            last_bear_off := na

    // OB Bear trước SOW
    if not na(last_sow_bar)
        bars_since_sow = bar_index - last_sow_bar
        max_scan2 = math.min(20, bar_index - bars_since_sow)
        last_bull_off := na
        for i = 1 to max_scan2
            off2 = bars_since_sow + i
            if off2 <= bar_index
                if close[off2] > open[off2]
                    last_bull_off := na(last_bull_off) ? off2 : last_bull_off
                else
                    if not na(last_bull_off)
                        break
        if not na(last_bull_off) and last_bull_off <= bar_index
            f_draw_poi_box(high[last_bull_off], low[last_bull_off], color.purple, line.style_solid, "OB Bear")
            last_sow_bar := na
            last_bull_off := na

// --- Structural & Liquidity Analysis ---
p_high = ta.pivothigh(high, pivot_len, pivot_len)
p_low  = ta.pivotlow(low, pivot_len, pivot_len)
if show_sw_hl and bars_ready(pivot_len)
    if not na(p_high)
        is_strong_h = not na(strong_high) and math.abs(p_high - strong_high) < atr_val * 0.1
        label.new(bar_index - pivot_len, p_high, is_strong_h ? "S-H" : "W-H 🎯", style=label.style_label_down, color=is_strong_h ? color.new(color.maroon, 20) : color.new(color.red, 20), textcolor=color.white, size=size.tiny)
    if not na(p_low)
        is_strong_l = not na(strong_low) and math.abs(p_low - strong_low) < atr_val * 0.1
        label.new(bar_index - pivot_len, p_low, is_strong_l ? "S-L" : "W-L 🎯", style=label.style_label_up, color=is_strong_l ? color.new(color.navy, 20) : color.new(color.green, 20), textcolor=color.white, size=size.tiny)

// --- Liquidity lines ---
if show_liquidity
    max_liq = math.min(50, bar_index)
    for i = 1 to max_liq
        if math.abs(high[i] - high) < atr_val * liquidity_atr_mult
            line.new(bar_index[i], high[i], bar_index, high, color=color.new(color.yellow, 50), style=line.style_dotted, width=1)

// --- Traps & Entry Signals ---
enough_vol_hist = bars_ready(2)
is_no_supply = show_traps and enough_vol_hist and close < open and volume < volume[1] and volume < volume[2]
is_no_demand = show_traps and enough_vol_hist and close > open and volume < volume[1] and volume < volume[2]

// --- Entry signals ---
if show_entries and array.size(box_array) > 0
    is_in_bull_poi = false
    is_in_bear_poi = false
    for i = array.size(box_array) - 1 to 0
        bx = array.get(box_array, i)
        if box.get_bottom(bx) < high and box.get_top(bx) > low
            if array.get(box_is_bull, i)
                is_in_bull_poi := true
            else
                is_in_bear_poi := true
    momentum_bull = close > ema21
    buy_context = phase == 2 and not na(last_spring_bar) and (bar_index - last_spring_bar < 25) and htf_is_bull
    if buy_context and is_in_bull_poi and is_no_supply and momentum_bull and bar_index > last_buy_bar + entry_throttle
        sl = low - atr_val * sl_atr_mult
        tp1 = close + atr_val * tp1_atr_mult
        tp2 = close + atr_val * tp2_atr_mult
        label.new(bar_index, low, "BUY", style=label.style_label_up, color=color.new(color.lime, 20), textcolor=color.white, size=size.normal)
        if show_risk_levels
            line.new(bar_index, sl, bar_index + 50, sl, color=color.red, style=line.style_dashed)
            label.new(bar_index + 50, sl, "SL", style=label.style_label_right, textcolor=color.red, color=color.new(color.gray, 100))
            line.new(bar_index, tp1, bar_index + 50, tp1, color=color.green, style=line.style_dashed)
            label.new(bar_index + 50, tp1, "TP1", style=label.style_label_right, textcolor=color.green, color=color.new(color.gray, 100))
        last_buy_bar := bar_index

    momentum_bear = close < ema21
    sell_context = phase == 3 and not na(last_ut_bar) and (bar_index - last_ut_bar < 25) and htf_is_bear
    if sell_context and is_in_bear_poi and is_no_demand and momentum_bear and bar_index > last_sell_bar + entry_throttle
        sl = high + atr_val * sl_atr_mult
        tp1 = close - atr_val * tp1_atr_mult
        label.new(bar_index, high, "SELL", style=label.style_label_down, color=color.new(color.red, 20), textcolor=color.white, size=size.normal)
        if show_risk_levels
            line.new(bar_index, sl, bar_index + 50, sl, color=color.red, style=line.style_dashed)
            label.new(bar_index + 50, sl, "SL", style=label.style_label_right, textcolor=color.red, color=color.new(color.gray, 100))
            line.new(bar_index, tp1, bar_index + 50, tp1, color=color.green, style=line.style_dashed)
            label.new(bar_index + 50, tp1, "TP1", style=label.style_label_right, textcolor=color.green, color=color.new(color.gray, 100))
        last_sell_bar := bar_index

// --- Visualization ---
bg_c = phase == 2 ? color.new(color.green, 85) : phase == 3 ? color.new(color.red, 85) : phase == 1 ? color.new(color.gray, 90) : na
bgcolor(show_bg ? bg_c : na)
var box tr_box = na
if phase >= 1 and not na(tr_high)
    if na(tr_box)
        tr_box := box.new(tr_start_bar, tr_high, bar_index, tr_low, border_color=color.new(color.gray, 50), bgcolor=na)
    else
        box.set_left(tr_box, tr_start_bar)
        box.set_top(tr_box, tr_high)
        box.set_bottom(tr_box, tr_low)
        box.set_right(tr_box, bar_index)
else
    if not na(tr_box)
        box.delete(tr_box)
        tr_box := na