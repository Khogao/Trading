//@version=5
indicator("EZZ2", overlay=true, max_boxes_count=5, max_labels_count=500)

// Inputs
vol_multiplier   = input.float(2.0, title="Volume Spike Multiplier", minval=1.0)
trap_zone_length = input.int(3, title="Trap Zone Length (bars)")
lookback         = input.int(20, title="Volume Lookback Period")
show_sr          = input.bool(true, title="Show Auto S/R")
show_rsi_div     = input.bool(true, title="Show RSI Divergence")
div_lookback     = input.int(20, title="RSI Div Lookback")
max_trap_boxes   = 5
// Thêm tùy chọn ổn định tín hiệu
sr_tol            = input.float(0.002, title="S/R proximity tolerance", step=0.0001, minval=0.0001)
confirm_on_close  = input.bool(true,  title="Confirm entries/KV on bar close")

// === KV display options ===
kv_show_text       = input.bool(true,  title="Show KV text labels")
kv_lock_x          = input.bool(true,  title="Lock KV label X (no horizontal shift)")
kv_xshift          = input.int(0,      title="KV label X-shift (bars)")
kv_sig_xshift      = input.int(0,      title="Extra X-shift if same-bar as B/S")
kv_atr_len         = input.int(14,     title="KV ATR length", minval=1)
kv_ofs_mult        = input.float(0.6,  title="KV label offset (ATR multiplier)", step=0.05, minval=0.05)
kv_sig_ofs         = input.float(0.3,  title="Extra offset if same-bar", step=0.05, minval=0.0)
kv_show_price_line = input.bool(true,  title="Show KV Price Line")
kv_pl_width        = input.int(2,      title="KV Price Line width", minval=1, maxval=5)

// Toggle lines per HTF
show_h1_lines = input.bool(true, title="Show H1 S/R lines")
show_h4_lines = input.bool(true, title="Show H4 S/R lines")
show_d1_lines = input.bool(true, title="Show D1 S/R lines")
// Live/confirmed controls (needed by request.security below)
h1_live = input.bool(true,  title="H1 live S/R (may repaint)")
h4_live = input.bool(true,  title="H4 live S/R (may repaint)")
// NEW: M30 options
show_m30_lines = input.bool(true,  title="Show M30 S/R lines")
m30_live       = input.bool(true,  title="M30 live S/R (may repaint)")

// New: H4 pivot options
use_pivot_h4   = input.bool(false, title="H4: Use pivot-based S/R")
pivot_left_h4  = input.int(2,     title="H4 pivot left",  minval=1)
pivot_right_h4 = input.int(2,     title="H4 pivot right", minval=1)
// NEW: H4 window lookback (ngắn cho scalping)
h4_lookback_win = input.int(10, title="H4 window lookback (bars)", minval=2)
d1_live = input.bool(true, title="D1 live S/R (may repaint)")
d1_lookback = input.int(3, title="D1 S/R Lookback (days)", minval=1, step=1)

// === Market profile (place BEFORE any use of *_eff variables) ===
market_profile = input.string("Crypto", options=["Crypto", "FX"], title="Market profile")
apply_profile  = input.bool(true, title="Apply profile defaults (sr_tol, volume, lookbacks)")

is_crypto             = market_profile == "Crypto"
sr_tol_prof           = is_crypto ? 0.003  : 0.0015
vol_multiplier_prof   = is_crypto ? 2.0    : 1.5
vol_lookback_prof     = is_crypto ? 20     : 30
h4_win_lookback_prof  = is_crypto ? 10     : 20
d1_lookback_prof      = is_crypto ? 3      : 5

// Effective params (apply profile if true)
sr_tol_eff            = apply_profile ? sr_tol_prof         : sr_tol
vol_multiplier_eff    = apply_profile ? vol_multiplier_prof : vol_multiplier
lookback_eff          = apply_profile ? vol_lookback_prof   : lookback
h4_lookback_win_eff   = apply_profile ? h4_win_lookback_prof: h4_lookback_win
d1_lookback_eff       = apply_profile ? d1_lookback_prof    : d1_lookback

// Volume spike
avg_vol   = ta.sma(volume, lookback_eff)
vol_spike = volume > avg_vol * vol_multiplier_eff

// Trap pattern
is_pin_bar(bull) =>
    body = math.abs(close - open)
    wick = bull ? (close - low) : (high - close)
    wick > body * 2

bull_pin    = vol_spike and is_pin_bar(true)  and close > open
bear_pin    = vol_spike and is_pin_bar(false) and close < open
bull_engulf = vol_spike and close > open and close > ta.highest(close[1], trap_zone_length)
bear_engulf = vol_spike and close < open and close < ta.lowest(close[1], trap_zone_length)
trap_bull   = bull_pin or bull_engulf
trap_bear   = bear_pin or bear_engulf

// Auto S/R (Native + MTF)
sr_len   = 40
sr_width = 1

// Native S/R
native_support = ta.lowest(low, sr_len)
native_resist  = ta.highest(high, sr_len)
plot(show_sr ? native_support : na, color=color.new(color.gray, 50), linewidth=sr_width, style=plot.style_linebr, title="Sup")
plot(show_sr ? native_resist  : na, color=color.new(color.gray, 50), linewidth=sr_width, style=plot.style_linebr, title="Res")

// HTF S/R
h1_support = h1_live ? request.security(syminfo.tickerid, "60",  ta.lowest(low,  sr_len)) : request.security(syminfo.tickerid, "60",  ta.lowest(low,  sr_len)[1])
h1_resist  = h1_live ? request.security(syminfo.tickerid, "60",  ta.highest(high, sr_len)) : request.security(syminfo.tickerid, "60",  ta.highest(high, sr_len)[1])

// NEW: M30 S/R
m30_support = m30_live ? request.security(syminfo.tickerid, "30", ta.lowest(low,  sr_len)) : request.security(syminfo.tickerid, "30", ta.lowest(low,  sr_len)[1])
m30_resist  = m30_live ? request.security(syminfo.tickerid, "30", ta.highest(high, sr_len)) : request.security(syminfo.tickerid, "30", ta.highest(high, sr_len)[1])

// H4 window dùng lookback riêng (ngắn hơn)
h4_support_win = h4_live ? request.security(syminfo.tickerid, "240", ta.lowest(low,  h4_lookback_win_eff))
                         : request.security(syminfo.tickerid, "240", ta.lowest(low,  h4_lookback_win_eff)[1])
h4_resist_win  = h4_live ? request.security(syminfo.tickerid, "240", ta.highest(high, h4_lookback_win_eff))
                         : request.security(syminfo.tickerid, "240", ta.highest(high, h4_lookback_win_eff)[1])

// Pivot-based H4 (stable swing levels)
h4_sup_piv = request.security(syminfo.tickerid, "240",
     ta.valuewhen(not na(ta.pivotlow(low,  pivot_left_h4, pivot_right_h4)),
                  ta.pivotlow(low,  pivot_left_h4, pivot_right_h4), 0))
h4_res_piv = request.security(syminfo.tickerid, "240",
     ta.valuewhen(not na(ta.pivothigh(high, pivot_left_h4, pivot_right_h4)),
                  ta.pivothigh(high, pivot_left_h4, pivot_right_h4), 0))

h4_support = use_pivot_h4 ? h4_sup_piv : h4_support_win
h4_resist  = use_pivot_h4 ? h4_res_piv : h4_resist_win

d1_support = d1_live ? request.security(syminfo.tickerid, "D", ta.lowest(low,  d1_lookback_eff))
                     : request.security(syminfo.tickerid, "D", ta.lowest(low,  d1_lookback_eff)[1])
d1_resist  = d1_live ? request.security(syminfo.tickerid, "D", ta.highest(high, d1_lookback_eff))
                     : request.security(syminfo.tickerid, "D", ta.highest(high, d1_lookback_eff)[1])

// Show HTF S/R according to chart TF
show_h1_sr = timeframe.isintraday and timeframe.multiplier <= 60   // <=60 để hiện trên 1h
show_h4_sr = timeframe.isintraday and timeframe.multiplier < 240
show_d1_sr = timeframe.isintraday

// Plot MTF S/R lines
plot(show_sr and show_m30_lines               ? m30_support : na, color=color.new(color.teal,   55), linewidth=2, style=plot.style_linebr, title="M30 Sup")
plot(show_sr and show_m30_lines               ? m30_resist  : na, color=color.new(color.teal,   55), linewidth=2, style=plot.style_linebr, title="M30 Res")
plot(show_sr and show_h1_lines and show_h1_sr ? h1_support  : na, color=color.new(color.blue,   60), linewidth=2, style=plot.style_linebr, title="H1 Sup")
plot(show_sr and show_h1_lines and show_h1_sr ? h1_resist   : na, color=color.new(color.blue,   60), linewidth=2, style=plot.style_linebr, title="H1 Res")
plot(show_sr and show_h4_lines and show_h4_sr ? h4_support : na, color=color.new(color.purple, 50), linewidth=2, style=plot.style_linebr, title="H4 Sup")
plot(show_sr and show_h4_lines and show_h4_sr ? h4_resist  : na, color=color.new(color.purple, 50), linewidth=2, style=plot.style_linebr, title="H4 Res")
plot(show_sr and show_d1_lines and show_d1_sr ? d1_support : na, color=color.new(color.orange, 40), linewidth=2, style=plot.style_linebr, title="D1 Sup")
plot(show_sr and show_d1_lines and show_d1_sr ? d1_resist  : na, color=color.new(color.orange, 40), linewidth=2, style=plot.style_linebr, title="D1 Res")

// Trap zone near S/R — apply to selected intraday TFs
use_scalp_tf_set = input.bool(true,  title="Limit signals to 1–15m + 30m + 1h")
only_5_15        = input.bool(true,  title="Entries only on 5m/15m (recommended)")
anchor_5_15_htf  = input.bool(true,  title="5–15m must align with M30/H1/H4")
sr_min_conf      = input.int(1,      title="Min confluence (M30/H1/H4) for 5–15m", minval=1, maxval=3)

// NEW: visuals for zones + warnings
show_reco_bg     = input.bool(true,  title="Shade Recommended Zones (HTF confluence)")
show_reco_icon   = input.bool(true,  title="Show BUY/SELL Recommended icons")
reco_min_conf    = input.int(1,      title="Min confluence for Recommended Zone", minval=1, maxval=3)
reco_bg_alpha    = input.int(92,     title="Recommended Zone transparency (0–100)", minval=0, maxval=100)

trap_box_bull_col = input.color(color.green,  title="Trap Box Bull color")
trap_box_bear_col = input.color(color.red,    title="Trap Box Bear color")
trap_box_alpha    = input.int(80,             title="Trap Box transparency (0–100)", minval=0, maxval=100)

show_trap_warn    = input.bool(true,  title="Show Trap Warning icon (⚠) on candle")
show_entry_shapes = input.bool(false, title="Also draw legacy B/S triangles (can overlap)")
// NEW: visual options (fixed: remove duplicated inputs)
kv_visual_independent = input.bool(true,  title="KV (labels/line) independent of entry")
kv_confirm_on_close   = input.bool(false, title="Confirm KV on bar close (reduces lag)")
kv_use_wick           = input.bool(true,  title="KV: allow wick-dominant bars")
kv_wick_mult          = input.float(1.5,  title="KV wick/body ratio", minval=0.5, step=0.1)
kv_soft_sr_gate       = input.bool(true,  title="KV: Soft S/R gating (ignore anchor confluence)")
icon_stack_step       = input.float(0.35, title="Icon stack spacing (x ATR)", minval=0.1, step=0.05)

// NEW: KV noise control
kv_strict            = input.bool(true,  title="KV strict mode (use anchor S/R + min body)")
kv_min_body_atr      = input.float(0.12, title="KV min body vs ATR", minval=0.0, step=0.01)
kv_cooldown_bars     = input.int(5,      title="KV cooldown (bars)", minval=0)
kv_wick_only_at_sr   = input.bool(false, title="KV: require wick-dominant at S/R")
kv_min_gap_atr       = input.float(0.5,  title="KV min distance from last same-side (x ATR)", minval=0.0, step=0.1)

// NEW: Recommended icon controls
reco_icon_mode       = input.string("Zone-once", options=["Zone-once","Entry-like","Every bar"], title="Recommended icon mode")
reco_icon_cooldown   = input.int(8,  title="Recommended icon cooldown (bars)", minval=0)
reco_confirm         = input.bool(true, title="Recommended icon: confirm on close")
reco_min_move_atr    = input.float(0.6, title="Recommended icon: min move vs ATR", minval=0.0, step=0.1)

// Wick dominance helpers (reduce KV lag at support/resistance)
_body      = math.abs(close - open)
_upperW    = high - math.max(open, close)
_lowerW    = math.min(open, close) - low
lower_dom  = kv_use_wick and (_lowerW > _body * kv_wick_mult)
upper_dom  = kv_use_wick and (_upperW > _body * kv_wick_mult)

// === S/R zone logic (dummy implementation, replace with your own zone logic) ===
// Example: consider price near native S/R as "in zone"
is_in_sr_zone = math.abs(close - native_support) <= sr_tol_eff * close or math.abs(close - native_resist) <= sr_tol_eff * close
is_in_sr_zone_default = is_in_sr_zone

// === Recommended Zone logic (dummy implementation, replace with your own zone logic) ===
// For demonstration, use native S/R zone as recommended zone
in_buy_reco_zone  = is_in_sr_zone and close > open
in_sell_reco_zone = is_in_sr_zone and close < open

// Entry logic (dummy implementation, replace with your own entry logic)
entry_buy_raw  = trap_bull
entry_sell_raw = trap_bear

// Use stricter/softer SR gate for KV + min body filter
kv_body_ok = _body >= ta.atr(kv_atr_len) * kv_min_body_atr
kv_zone_ok = (kv_strict ? is_in_sr_zone : (kv_soft_sr_gate ? is_in_sr_zone_default : is_in_sr_zone))

// Less sensitive raw indicators
kv_bear_signal_core = upper_dom or (not kv_wick_only_at_sr and close < open and kv_body_ok)
kv_bull_signal_core = lower_dom or (not kv_wick_only_at_sr and close > open and kv_body_ok)

kv_bear_raw_ind = kv_zone_ok and vol_spike and kv_bear_signal_core
kv_bull_raw_ind = kv_zone_ok and vol_spike and kv_bull_signal_core

// === Dummy reset logic for KV (replace with your own if needed) ===
kv_reset_long_raw = false
kv_reset_short_raw = false

// Pre-events (respect independent/one-shot + close confirm)
kv_evt_bear_pre = kv_confirm_on_close ? (barstate.isconfirmed and (kv_visual_independent ? kv_bear_raw_ind : kv_reset_long_raw))
                                      : (kv_visual_independent ? kv_bear_raw_ind : kv_reset_long_raw)
kv_evt_bull_pre = kv_confirm_on_close ? (barstate.isconfirmed and (kv_visual_independent ? kv_bull_raw_ind : kv_reset_short_raw))
                                      : (kv_visual_independent ? kv_bull_raw_ind : kv_reset_short_raw)

// Cooldown to avoid KV spamming
var int last_kv_bear = na
var int last_kv_bull = na
kv_bear_ready = na(last_kv_bear) or bar_index - last_kv_bear >= kv_cooldown_bars
kv_bull_ready = na(last_kv_bull) or bar_index - last_kv_bull >= kv_cooldown_bars

// NEW: KV min distance (x ATR) from last same-side
var float last_kv_bear_price = na
var float last_kv_bull_price = na
atr_base = ta.atr(kv_atr_len)
kv_bear_gap_ok = na(last_kv_bear_price) or math.abs(close - last_kv_bear_price) >= atr_base * kv_min_gap_atr
kv_bull_gap_ok = na(last_kv_bull_price) or math.abs(close - last_kv_bull_price) >= atr_base * kv_min_gap_atr

kv_evt_bear = kv_evt_bear_pre and kv_bear_ready and kv_bear_gap_ok
kv_evt_bull = kv_evt_bull_pre and kv_bull_ready and kv_bull_gap_ok
if kv_evt_bear
    last_kv_bear := bar_index
    last_kv_bear_price := close
if kv_evt_bull
    last_kv_bull := bar_index
    last_kv_bull_price := close

// Shade Recommended Zones (use configured transparency)
bgcol = show_reco_bg ? (in_buy_reco_zone  ? color.new(color.teal,   reco_bg_alpha)
                       : in_sell_reco_zone ? color.new(color.orange, reco_bg_alpha) : na) : na
bgcolor(bgcol)

// REPLACE: Recommended Zone icons (debounced)
// State: enter-zone detection + cooldown
var bool _prev_buy_zone  = false
var bool _prev_sell_zone = false
enter_buy_zone  = in_buy_reco_zone  and not _prev_buy_zone
enter_sell_zone = in_sell_reco_zone and not _prev_sell_zone

var int _last_reco_buy  = na
var int _last_reco_sell = na
reco_buy_ready  = na(_last_reco_buy)  or bar_index - _last_reco_buy  >= reco_icon_cooldown
reco_sell_ready = na(_last_reco_sell) or bar_index - _last_reco_sell >= reco_icon_cooldown

// NEW: price-distance filter for icons
var float _last_reco_buy_price  = na
var float _last_reco_sell_price = na
atr_reco = ta.atr(kv_atr_len)
reco_buy_move_ok  = na(_last_reco_buy_price)  or math.abs(close - _last_reco_buy_price)  >= atr_reco * reco_min_move_atr
reco_sell_move_ok = na(_last_reco_sell_price) or math.abs(close - _last_reco_sell_price) >= atr_reco * reco_min_move_atr

// Mode selection
reco_buy_raw =
     reco_icon_mode == "Every bar"  ? in_buy_reco_zone :
     reco_icon_mode == "Entry-like" ? (entry_buy_raw  and in_buy_reco_zone) :
                                      enter_buy_zone
reco_sell_raw =
     reco_icon_mode == "Every bar"  ? in_sell_reco_zone :
     reco_icon_mode == "Entry-like" ? (entry_sell_raw and in_sell_reco_zone) :
                                      enter_sell_zone

// Close confirm + cooldown + min move
reco_buy_icon  = (reco_confirm ? (barstate.isconfirmed and reco_buy_raw)  : reco_buy_raw)  and reco_buy_ready  and reco_buy_move_ok
reco_sell_icon = (reco_confirm ? (barstate.isconfirmed and reco_sell_raw) : reco_sell_raw) and reco_sell_ready and reco_sell_move_ok

// PLOT BOTH icons
plotshape(show_reco_icon and reco_buy_icon,  title="BUY Recommended Zone",  style=shape.circle, location=location.belowbar, color=color.teal,   size=size.tiny, text="B")
plotshape(show_reco_icon and reco_sell_icon, title="SELL Recommended Zone", style=shape.circle, location=location.abovebar, color=color.orange, size=size.tiny, text="S")

// Update trackers (remove duplicate '? true:false' lines)
if reco_buy_icon
    _last_reco_buy := bar_index
    _last_reco_buy_price := close
if reco_sell_icon
    _last_reco_sell := bar_index
    _last_reco_sell_price := close

// Update zone memory (single place)
_prev_buy_zone  := in_buy_reco_zone
_prev_sell_zone := in_sell_reco_zone
