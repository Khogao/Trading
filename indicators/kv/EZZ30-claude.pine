//@version=5
indicator("EZZ 3.0 Final - Complete Syntax Fixed", overlay=true, max_boxes_count=50)

// ============================================================================
// 📊 KV ZONES CALCULATION - BLOCK A (COMPLETELY INDEPENDENT)
// ============================================================================

var string GRP_KV_GENERAL = "KV Zones General Settings"
kv_show_zones = input.bool(true, "Show KV Zones", group=GRP_KV_GENERAL)
kv_zone_extend = input.int(120, "Zone Extend (bars)", minval=10, maxval=500, group=GRP_KV_GENERAL)
kv_zone_invalidate = input.bool(true, "Invalidate on Price Cross", group=GRP_KV_GENERAL)
kv_max_zone_age = input.int(20, "Max Zone Age (bars)", minval=1, maxval=200, group=GRP_KV_GENERAL)
kv_show_debug = input.bool(false, "Show KV Debug Triggers", group=GRP_KV_GENERAL)
kv_show_table = input.bool(true, "Show KV Status Table", group=GRP_KV_GENERAL)

// KV Timeframe Selection
var string GRP_KV_TF = "KV Timeframes"
kv_tf_5m = input.timeframe("5", "KV 5m Timeframe", group=GRP_KV_TF)
kv_tf_15m = input.timeframe("15", "KV 15m Timeframe", group=GRP_KV_TF)
kv_tf_1h = input.timeframe("60", "KV 1H Timeframe", group=GRP_KV_TF)
kv_enable_1h = input.bool(true, "Enable KV 1H Analysis", group=GRP_KV_TF)

// KV 5m Parameters
var string GRP_KV_5M = "KV 5m Parameters"
kv_swing_len_5m = input.int(3, "KV Swing Length", minval=1, maxval=10, group=GRP_KV_5M)
kv_atr_len_5m = input.int(14, "KV ATR Length", minval=1, maxval=50, group=GRP_KV_5M)
kv_min_body_5m = input.float(0.1, "KV Min Body vs ATR", minval=0.0, step=0.01, group=GRP_KV_5M)
kv_wick_mult_5m = input.float(1.5, "KV Wick/Body Ratio", minval=0.5, step=0.1, group=GRP_KV_5M)
kv_zone_mult_5m = input.float(0.8, "KV Zone Height (x ATR)", minval=0.1, step=0.1, group=GRP_KV_5M)

// KV 15m Parameters
var string GRP_KV_15M = "KV 15m Parameters"
kv_swing_len_15m = input.int(3, "KV Swing Length", minval=1, maxval=10, group=GRP_KV_15M)
kv_atr_len_15m = input.int(14, "KV ATR Length", minval=1, maxval=50, group=GRP_KV_15M)
kv_min_body_15m = input.float(0.15, "KV Min Body vs ATR", minval=0.0, step=0.01, group=GRP_KV_15M)
kv_wick_mult_15m = input.float(1.5, "KV Wick/Body Ratio", minval=0.5, step=0.1, group=GRP_KV_15M)
kv_zone_mult_15m = input.float(1.0, "KV Zone Height (x ATR)", minval=0.1, step=0.1, group=GRP_KV_15M)

// KV 1H Parameters
var string GRP_KV_1H = "KV 1H Parameters"
kv_swing_len_1h = input.int(2, "KV Swing Length", minval=1, maxval=10, group=GRP_KV_1H)
kv_atr_len_1h = input.int(21, "KV ATR Length", minval=1, maxval=50, group=GRP_KV_1H)
kv_min_body_1h = input.float(0.25, "KV Min Body vs ATR", minval=0.0, step=0.01, group=GRP_KV_1H)
kv_wick_mult_1h = input.float(2.0, "KV Wick/Body Ratio", minval=0.5, step=0.1, group=GRP_KV_1H)
kv_zone_mult_1h = input.float(1.5, "KV Zone Height (x ATR)", minval=0.1, step=0.1, group=GRP_KV_1H)

// KV Colors (Distinct and Clear)
kv_color_5m_bear = color.new(#FF6B35, 20)      // Orange Red
kv_color_5m_bull = color.new(#00D2FF, 20)      // Cyan Blue
kv_color_15m_bear = color.new(#C70039, 25)     // Deep Red
kv_color_15m_bull = color.new(#00FF87, 25)     // Bright Green
kv_color_1h_bear = color.new(#8B0000, 30)      // Dark Red
kv_color_1h_bull = color.new(#008B8B, 30)      // Dark Cyan

// ============================================================================
// 🎯 BUY/SELL SIGNALS - BLOCK B (COMPLETELY INDEPENDENT)
// ============================================================================

var string GRP_SIG_GENERAL = "BS Signals General Settings"
sig_show_signals = input.bool(true, "Show Buy/Sell Signals", group=GRP_SIG_GENERAL)
sig_show_debug = input.bool(false, "Show Signal Debug", group=GRP_SIG_GENERAL)
sig_show_stats = input.bool(true, "Show Signal Statistics", group=GRP_SIG_GENERAL)

// Signal Strategy Selection - FIXED: Added options parameter
var string GRP_SIG_STRATEGY = "Signal Strategy"
sig_strategy = input.string("KV Retest", "Signal Strategy", options=["KV Retest", "Pure Rejection", "Confluence"], group=GRP_SIG_STRATEGY)
sig_tf_priority = input.string("Auto", "Signal TF Priority", options=["Auto", "5m Only", "15m Only", "1H Only"], group=GRP_SIG_STRATEGY)

// Signal Technical Parameters
var string GRP_SIG_TECH = "Signal Technical Parameters"
sig_atr_length = input.int(14, "Signal ATR Length", minval=1, maxval=50, group=GRP_SIG_TECH)
sig_min_body_atr = input.float(0.2, "Signal Min Body vs ATR", minval=0.0, step=0.01, group=GRP_SIG_TECH)
sig_wick_rejection_mult = input.float(1.5, "Signal Wick/Body Ratio", minval=0.5, step=0.1, group=GRP_SIG_TECH)

// Signal Volume Parameters
var string GRP_SIG_VOL = "Signal Volume Parameters"
sig_use_volume = input.bool(true, "Require Volume Confirmation", group=GRP_SIG_VOL)
sig_vol_lookback = input.int(20, "Volume Lookback Period", minval=1, maxval=100, group=GRP_SIG_VOL)
sig_vol_multiplier = input.float(1.5, "Volume Spike Multiplier", minval=1.0, step=0.1, group=GRP_SIG_VOL)

// Signal Risk Management
var string GRP_SIG_RISK = "Signal Risk Management"
sig_throttle_bars = input.int(6, "Signal Throttle (bars)", minval=1, maxval=50, group=GRP_SIG_RISK)
sig_max_signals_per_session = input.int(10, "Max Signals per Session", minval=1, maxval=50, group=GRP_SIG_RISK)

// ============================================================================
// 🏗️ BLOCK A: KV ZONES CALCULATION ENGINE
// ============================================================================

// KV Trigger Function (Pure KV Logic) - FIXED: Max 3 returns
f_kv_trigger(direction, swing_len, min_body_atr, atr_len, wick_mult) =>
    swing_high = ta.highest(high, swing_len)
    swing_low = ta.lowest(low, swing_len)
    // FIXED: Use correct swing logic for break detection
    bear_break = direction == "bear" and high > ta.highest(high[1], swing_len) and high[1] <= ta.highest(high[2], swing_len)
    bull_break = direction == "bull" and low < ta.lowest(low[1], swing_len) and low[1] >= ta.lowest(low[2], swing_len)
    triggered = bear_break or bull_break
    // KV Validation
    atr_val = ta.atr(atr_len)
    body = math.abs(close - open)
    body_ok = body >= min_body_atr * atr_val
    // Wick validation (independent)
    upper_wick = high - math.max(open, close)
    lower_wick = math.min(open, close) - low
    wick_ok_bear = direction == "bear" ? upper_wick >= wick_mult * body : false
    wick_ok_bull = direction == "bull" ? lower_wick >= wick_mult * body : false
    wick_ok = wick_ok_bear or wick_ok_bull
    // FIXED: Return only 3 values (PineScript limit)
    final_trigger = triggered and body_ok and wick_ok
    reference_level = direction == "bear" ? swing_high : swing_low
    [final_trigger, reference_level, atr_val]

// --- Helper functions for each value ---
f_kv_trigger_trigger(direction, swing_len, min_body_atr, atr_len, wick_mult) =>
    swing_high = ta.highest(high, swing_len)
    swing_low = ta.lowest(low, swing_len)
    bear_break = direction == "bear" and high > ta.highest(high[1], swing_len) and high[1] <= ta.highest(high[2], swing_len)
    bull_break = direction == "bull" and low < ta.lowest(low[1], swing_len) and low[1] >= ta.lowest(low[2], swing_len)
    triggered = bear_break or bull_break
    atr_val = ta.atr(atr_len)
    body = math.abs(close - open)
    body_ok = body >= min_body_atr * atr_val
    upper_wick = high - math.max(open, close)
    lower_wick = math.min(open, close) - low
    wick_ok_bear = direction == "bear" ? upper_wick >= wick_mult * body : false
    wick_ok_bull = direction == "bull" ? lower_wick >= wick_mult * body : false
    wick_ok = wick_ok_bear or wick_ok_bull
    final_trigger = triggered and body_ok and wick_ok
    final_trigger

f_kv_trigger_level(direction, swing_len, min_body_atr, atr_len, wick_mult) =>
    swing_high = ta.highest(high, swing_len)
    swing_low = ta.lowest(low, swing_len)
    direction == "bear" ? swing_high : swing_low

f_kv_trigger_atr(direction, swing_len, min_body_atr, atr_len, wick_mult) =>
    ta.atr(atr_len)

// --- Use separate security calls for each value ---

// 5m
kv_5m_bear_trigger = request.security(syminfo.tickerid, kv_tf_5m, f_kv_trigger_trigger("bear", kv_swing_len_5m, kv_min_body_5m, kv_atr_len_5m, kv_wick_mult_5m), barmerge.gaps_off, barmerge.lookahead_off)
kv_5m_bear_level   = request.security(syminfo.tickerid, kv_tf_5m, f_kv_trigger_level("bear", kv_swing_len_5m, kv_min_body_5m, kv_atr_len_5m, kv_wick_mult_5m), barmerge.gaps_off, barmerge.lookahead_off)
kv_5m_atr          = request.security(syminfo.tickerid, kv_tf_5m, f_kv_trigger_atr("bear", kv_swing_len_5m, kv_min_body_5m, kv_atr_len_5m, kv_wick_mult_5m), barmerge.gaps_off, barmerge.lookahead_off)
kv_5m_bull_trigger = request.security(syminfo.tickerid, kv_tf_5m, f_kv_trigger_trigger("bull", kv_swing_len_5m, kv_min_body_5m, kv_atr_len_5m, kv_wick_mult_5m), barmerge.gaps_off, barmerge.lookahead_off)
kv_5m_bull_level   = request.security(syminfo.tickerid, kv_tf_5m, f_kv_trigger_level("bull", kv_swing_len_5m, kv_min_body_5m, kv_atr_len_5m, kv_wick_mult_5m), barmerge.gaps_off, barmerge.lookahead_off)

// 15m
kv_15m_bear_trigger = request.security(syminfo.tickerid, kv_tf_15m, f_kv_trigger_trigger("bear", kv_swing_len_15m, kv_min_body_15m, kv_atr_len_15m, kv_wick_mult_15m), barmerge.gaps_off, barmerge.lookahead_off)
kv_15m_bear_level   = request.security(syminfo.tickerid, kv_tf_15m, f_kv_trigger_level("bear", kv_swing_len_15m, kv_min_body_15m, kv_atr_len_15m, kv_wick_mult_15m), barmerge.gaps_off, barmerge.lookahead_off)
kv_15m_atr          = request.security(syminfo.tickerid, kv_tf_15m, f_kv_trigger_atr("bear", kv_swing_len_15m, kv_min_body_15m, kv_atr_len_15m, kv_wick_mult_15m), barmerge.gaps_off, barmerge.lookahead_off)
kv_15m_bull_trigger = request.security(syminfo.tickerid, kv_tf_15m, f_kv_trigger_trigger("bull", kv_swing_len_15m, kv_min_body_15m, kv_atr_len_15m, kv_wick_mult_15m), barmerge.gaps_off, barmerge.lookahead_off)
kv_15m_bull_level   = request.security(syminfo.tickerid, kv_tf_15m, f_kv_trigger_level("bull", kv_swing_len_15m, kv_min_body_15m, kv_atr_len_15m, kv_wick_mult_15m), barmerge.gaps_off, barmerge.lookahead_off)

// 1H
kv_1h_bear_trigger = kv_enable_1h ? request.security(syminfo.tickerid, kv_tf_1h, f_kv_trigger_trigger("bear", kv_swing_len_1h, kv_min_body_1h, kv_atr_len_1h, kv_wick_mult_1h), barmerge.gaps_off, barmerge.lookahead_off) : false
kv_1h_bear_level   = kv_enable_1h ? request.security(syminfo.tickerid, kv_tf_1h, f_kv_trigger_level("bear", kv_swing_len_1h, kv_min_body_1h, kv_atr_len_1h, kv_wick_mult_1h), barmerge.gaps_off, barmerge.lookahead_off) : na
kv_1h_atr          = kv_enable_1h ? request.security(syminfo.tickerid, kv_tf_1h, f_kv_trigger_atr("bear", kv_swing_len_1h, kv_min_body_1h, kv_atr_len_1h, kv_wick_mult_1h), barmerge.gaps_off, barmerge.lookahead_off) : na
kv_1h_bull_trigger = kv_enable_1h ? request.security(syminfo.tickerid, kv_tf_1h, f_kv_trigger_trigger("bull", kv_swing_len_1h, kv_min_body_1h, kv_atr_len_1h, kv_wick_mult_1h), barmerge.gaps_off, barmerge.lookahead_off) : false
kv_1h_bull_level   = kv_enable_1h ? request.security(syminfo.tickerid, kv_tf_1h, f_kv_trigger_level("bull", kv_swing_len_1h, kv_min_body_1h, kv_atr_len_1h, kv_wick_mult_1h), barmerge.gaps_off, barmerge.lookahead_off) : na

// KV Zone State Management - FIXED: Proper variable initialization
var box kv_5m_bear_box = na
var box kv_5m_bull_box = na
var box kv_15m_bear_box = na
var box kv_15m_bull_box = na
var box kv_1h_bear_box = na
var box kv_1h_bull_box = na

var int kv_5m_bear_time = 0
var int kv_5m_bull_time = 0
var int kv_15m_bear_time = 0
var int kv_15m_bull_time = 0
var int kv_1h_bear_time = 0
var int kv_1h_bull_time = 0

var float kv_5m_bear_top = na
var float kv_5m_bear_bot = na
var float kv_5m_bull_top = na
var float kv_5m_bull_bot = na
var float kv_15m_bear_top = na
var float kv_15m_bear_bot = na
var float kv_15m_bull_top = na
var float kv_15m_bull_bot = na
var float kv_1h_bear_top = na
var float kv_1h_bear_bot = na
var float kv_1h_bull_top = na
var float kv_1h_bull_bot = na

// KV Zone Drawing Function - FIXED: Simplified parameters and structure
draw_kv_zone(trigger, reference_level, atr_val, zone_mult, direction, zone_color, label_text) =>
    box new_box = na
    float new_top = na
    float new_bot = na
    
    if kv_show_zones and trigger and not na(reference_level) and not na(atr_val)
        // Calculate zone boundaries
        if direction == "bear"
            new_top := reference_level
            new_bot := new_top - atr_val * zone_mult
        else
            new_bot := reference_level
            new_top := new_bot + atr_val * zone_mult
        
        // Create new zone box
        new_box := box.new(bar_index, new_top, bar_index + kv_zone_extend, new_bot, xloc.bar_index, zone_color, zone_color, 1, line.style_solid, extend.none)
            
    [new_box, new_top, new_bot] // MOVED to correct indentation level

// Zone Management Function
manage_zone(current_box, current_time, current_top, current_bot, trigger, reference_level, atr_val, zone_mult, direction, zone_color, label_text) =>
    new_box = current_box
    new_time = current_time
    new_top = current_top
    new_bot = current_bot
    // Check for invalidation
    should_invalidate = false
    if not na(current_box) and not na(current_top) and not na(current_bot)
        // Price cross invalidation (FIXED: check high/low)
        touched_top = high > current_top
        touched_bottom = low < current_bot
        if kv_zone_invalidate and (touched_top or touched_bottom)
            should_invalidate := true
        // Age invalidation
        if bar_index - current_time > kv_max_zone_age
            should_invalidate := true
    // Remove invalidated zone
    if should_invalidate and not na(current_box)
        box.delete(current_box)
        new_box := na
        new_time := 0
        new_top := na
        new_bot := na
    
    // Create new zone
    if trigger and not na(reference_level) and not na(atr_val)
        // Delete existing zone
        if not na(current_box)
            box.delete(current_box)
        
        // Create new zone
        result = draw_kv_zone(trigger, reference_level, atr_val, zone_mult, direction, zone_color, label_text)
        new_box := result[0]
        new_top := result[1]
        new_bot := result[2]
        new_time := bar_index
    
    // Extend existing zone
    else if not na(current_box) and not should_invalidate
        box.set_right(current_box, bar_index + kv_zone_extend)
    
    [new_box, new_time, new_top, new_bot]

// Execute Zone Management - FIXED: Use = for tuple assignment
if barstate.isconfirmed
    // 5m Zones
    result_5m_bear = manage_zone(kv_5m_bear_box, kv_5m_bear_time, kv_5m_bear_top, kv_5m_bear_bot, 
      kv_5m_bear_trigger, kv_5m_bear_level, kv_5m_atr, kv_zone_mult_5m, "bear", kv_color_5m_bear, "5m Bear")
    kv_5m_bear_box := result_5m_bear[0]
    kv_5m_bear_time := result_5m_bear[1]
    kv_5m_bear_top := result_5m_bear[2]
    kv_5m_bear_bot := result_5m_bear[3]
    
    result_5m_bull = manage_zone(kv_5m_bull_box, kv_5m_bull_time, kv_5m_bull_top, kv_5m_bull_bot, 
      kv_5m_bull_trigger, kv_5m_bull_level, kv_5m_atr, kv_zone_mult_5m, "bull", kv_color_5m_bull, "5m Bull")
    kv_5m_bull_box := result_5m_bull[0]
    kv_5m_bull_time := result_5m_bull[1]
    kv_5m_bull_top := result_5m_bull[2]
    kv_5m_bull_bot := result_5m_bull[3]
    
    // 15m Zones
    result_15m_bear = manage_zone(kv_15m_bear_box, kv_15m_bear_time, kv_15m_bear_top, kv_15m_bear_bot, 
      kv_15m_bear_trigger, kv_15m_bear_level, kv_15m_atr, kv_zone_mult_15m, "bear", kv_color_15m_bear, "15m Bear")
    kv_15m_bear_box := result_15m_bear[0]
    kv_15m_bear_time := result_15m_bear[1]
    kv_15m_bear_top := result_15m_bear[2]
    kv_15m_bear_bot := result_15m_bear[3]
    
    result_15m_bull = manage_zone(kv_15m_bull_box, kv_15m_bull_time, kv_15m_bull_top, kv_15m_bull_bot, 
      kv_15m_bull_trigger, kv_15m_bull_level, kv_15m_atr, kv_zone_mult_15m, "bull", kv_color_15m_bull, "15m Bull")
    kv_15m_bull_box := result_15m_bull[0]
    kv_15m_bull_time := result_15m_bull[1]
    kv_15m_bull_top := result_15m_bull[2]
    kv_15m_bull_bot := result_15m_bull[3]
    
    // 1H Zones (if enabled)
    if kv_enable_1h
        result_1h_bear = manage_zone(kv_1h_bear_box, kv_1h_bear_time, kv_1h_bear_top, kv_1h_bear_bot, 
          kv_1h_bear_trigger, kv_1h_bear_level, kv_1h_atr, kv_zone_mult_1h, "bear", kv_color_1h_bear, "1H Bear")
        kv_1h_bear_box := result_1h_bear[0]
        kv_1h_bear_time := result_1h_bear[1]
        kv_1h_bear_top := result_1h_bear[2]
        kv_1h_bear_bot := result_1h_bear[3]
        
        result_1h_bull = manage_zone(kv_1h_bull_box, kv_1h_bull_time, kv_1h_bull_top, kv_1h_bull_bot, 
          kv_1h_bull_trigger, kv_1h_bull_level, kv_1h_atr, kv_zone_mult_1h, "bull", kv_color_1h_bull, "1H Bull")
        kv_1h_bull_box := result_1h_bull[0]
        kv_1h_bull_time := result_1h_bull[1]
        kv_1h_bull_top := result_1h_bull[2]
        kv_1h_bull_bot := result_1h_bull[3]

// ============================================================================
// 🎯 BLOCK B: BUY/SELL SIGNALS ENGINE (COMPLETELY INDEPENDENT)
// ============================================================================

// Signal Confluence Indicators
sig_atr = ta.atr(sig_atr_length)
sig_vol_ma = ta.sma(volume, sig_vol_lookback)

// Signal State Management - FIXED: Proper initialization
var int sig_last_buy_bar = 0
var int sig_last_sell_bar = 0
var int sig_session_signal_count = 0

// Signal Zone Interaction Check
check_zone_interaction(direction) =>
    interaction_count = 0
    if direction == "bull"
        // Bull zones: price should reach zone FROM ABOVE
        if not na(kv_5m_bull_top) and not na(kv_5m_bull_bot)
            if low <= kv_5m_bull_bot and close >= kv_5m_bull_top
                interaction_count += 1
        if not na(kv_15m_bull_top) and not na(kv_15m_bull_bot)
            if low <= kv_15m_bull_bot and close >= kv_15m_bull_top
                interaction_count += 1
        if kv_enable_1h and not na(kv_1h_bull_top) and not na(kv_1h_bull_bot)
            if low <= kv_1h_bull_bot and close >= kv_1h_bull_top
                interaction_count += 1
    else // bear direction
        // Bear zones: price should reach zone FROM BELOW
        if not na(kv_5m_bear_top) and not na(kv_5m_bear_bot)
            if high >= kv_5m_bear_bot and close <= kv_5m_bear_top
                interaction_count += 1
        if not na(kv_15m_bear_top) and not na(kv_15m_bear_bot)
            if high >= kv_15m_bear_bot and close <= kv_15m_bear_top
                interaction_count += 1
        if kv_enable_1h and not na(kv_1h_bear_top) and not na(kv_1h_bear_bot)
            if high >= kv_1h_bear_bot and close <= kv_1h_bear_top
                interaction_count += 1
    interaction_count

// Main Signal Generation Function
generate_signals() =>
    if not sig_show_signals
        [false, false]
    else
        // Basic signal conditions
        body = math.abs(close - open)
        body_ok = body >= sig_atr * sig_min_body_atr
        
        upper_wick = high - math.max(open, close)
        lower_wick = math.min(open, close) - low
        
        // Rejection patterns
        bull_rejection = close > open and lower_wick >= body * sig_wick_rejection_mult
        bear_rejection = close < open and upper_wick >= body * sig_wick_rejection_mult
        
        // Volume confirmation
        vol_ok = not sig_use_volume or volume >= sig_vol_ma * sig_vol_multiplier
        
        // Zone interaction based on strategy
        zone_interaction_bull = check_zone_interaction("bull")
        zone_interaction_bear = check_zone_interaction("bear")
        
        // Strategy-specific logic
        bull_signal_ok = false
        bear_signal_ok = false
        
        if sig_strategy == "KV Retest"
            bull_signal_ok := zone_interaction_bull >= 1
            bear_signal_ok := zone_interaction_bear >= 1
        else if sig_strategy == "Pure Rejection"
            bull_signal_ok := true
            bear_signal_ok := true
        else if sig_strategy == "Confluence"
            bull_signal_ok := zone_interaction_bull >= 2
            bear_signal_ok := zone_interaction_bear >= 2
        
        // Throttle Logic (FIXED: tách riêng buy/sell)
        can_buy = sig_last_buy_bar == 0 or (bar_index - sig_last_buy_bar >= sig_throttle_bars)
        can_sell = sig_last_sell_bar == 0 or (bar_index - sig_last_sell_bar >= sig_throttle_bars)
        session_limit_ok = sig_session_signal_count < sig_max_signals_per_session
        final_bull = bull_rejection and bull_signal_ok and body_ok and vol_ok and can_buy and session_limit_ok
        final_bear = bear_rejection and bear_signal_ok and body_ok and vol_ok and can_sell and session_limit_ok
        [final_bull, final_bear]

// Execute Signal Generation
signal_result = generate_signals()
buy_signal = signal_result[0]
sell_signal = signal_result[1]

// Update signal tracking (must be outside function)
if buy_signal
    sig_last_buy_bar := bar_index
if sell_signal
    sig_last_sell_bar := bar_index
if buy_signal or sell_signal
    sig_session_signal_count := sig_session_signal_count + 1

// ============================================================================
// 📊 DISPLAY & VISUALIZATION
// ============================================================================

// Plot Buy/Sell Signals
plotshape(buy_signal, "Buy Signal", shape.labelup, location.belowbar, color.new(color.lime, 0), text="BUY", size=size.normal, textcolor=color.black)
plotshape(sell_signal, "Sell Signal", shape.labeldown, location.abovebar, color.new(color.red, 0), text="SELL", size=size.normal, textcolor=color.white)

// Debug Displays
plotshape(kv_show_debug ? kv_5m_bear_trigger : na, "KV 5m Bear", shape.triangledown, location.abovebar, kv_color_5m_bear, size=size.small)
plotshape(kv_show_debug ? kv_5m_bull_trigger : na, "KV 5m Bull", shape.triangleup, location.belowbar, kv_color_5m_bull, size=size.small)
plotshape(kv_show_debug ? kv_15m_bear_trigger : na, "KV 15m Bear", shape.triangledown, location.top, kv_color_15m_bear, size=size.small)
plotshape(kv_show_debug ? kv_15m_bull_trigger : na, "KV 15m Bull", shape.triangleup, location.bottom, kv_color_15m_bull, size=size.small)
plotshape(kv_show_debug and kv_enable_1h ? kv_1h_bear_trigger : na, "KV 1H Bear", shape.diamond, location.abovebar, kv_color_1h_bear, size=size.normal)
plotshape(kv_show_debug and kv_enable_1h ? kv_1h_bull_trigger : na, "KV 1H Bull", shape.diamond, location.belowbar, kv_color_1h_bull, size=size.normal)

plotchar(sig_show_debug and check_zone_interaction("bull") > 0 ? 1 : na, "Bull Zone Hit", "B", location.belowbar, color.lime, size=size.tiny)
plotchar(sig_show_debug and check_zone_interaction("bear") > 0 ? 1 : na, "Bear Zone Hit", "S", location.abovebar, color.red, size.tiny)

// ============================================================================
// 📋 STATUS TABLES
// ============================================================================

// Declare table variables at top-level scope
var table kv_table = na
var table sig_table = na

// KV Zones Status Table
if kv_show_table and barstate.islast
    if na(kv_table)
        kv_table := table.new(position.top_right, 4, 6, bgcolor=color.new(color.black, 85), border_width=1)
    
    table.cell(kv_table, 0, 0, "KV ZONES", text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 50))
    table.cell(kv_table, 1, 0, "Bear", text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 50))
    table.cell(kv_table, 2, 0, "Bull", text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 50))
    table.cell(kv_table, 3, 0, "Priority", text_color=color.white, text_size=size.small, bgcolor=color.new(color.blue, 50))
    
    // 5m KV Status
    table.cell(kv_table, 0, 1, "5m", text_color=color.white, text_size=size.small)
    table.cell(kv_table, 1, 1, not na(kv_5m_bear_box) ? "ACTIVE" : "OFF", text_color=not na(kv_5m_bear_box) ? kv_color_5m_bear : color.gray, text_size=size.small)
    table.cell(kv_table, 2, 1, not na(kv_5m_bull_box) ? "ACTIVE" : "OFF", text_color=not na(kv_5m_bull_box) ? kv_color_5m_bull : color.gray, text_size=size.small)
    table.cell(kv_table, 3, 1, "LOW", text_color=color.yellow, text_size=size.small)
    
    // 15m KV Status
    table.cell(kv_table, 0, 2, "15m", text_color=color.white, text_size=size.small)
    table.cell(kv_table, 1, 2, not na(kv_15m_bear_box) ? "ACTIVE" : "OFF", text_color=not na(kv_15m_bear_box) ? kv_color_15m_bear : color.gray, text_size=size.small)
    table.cell(kv_table, 2, 2, not na(kv_15m_bull_box) ? "ACTIVE" : "OFF", text_color=not na(kv_15m_bull_box) ? kv_color_15m_bull : color.gray, text_size=size.small)
    table.cell(kv_table, 3, 2, "MED", text_color=color.orange, text_size=size.small)
    
    // 1H KV Status
    table.cell(kv_table, 0, 3, "1H", text_color=color.white, text_size=size.small)
    table.cell(kv_table, 1, 3, kv_enable_1h and not na(kv_1h_bear_box) ? "ACTIVE" : "OFF", text_color=kv_enable_1h and not na(kv_1h_bear_box) ? kv_color_1h_bear : color.gray, text_size=size.small)
    table.cell(kv_table, 2, 3, kv_enable_1h and not na(kv_1h_bull_box) ? "ACTIVE" : "OFF", text_color=kv_enable_1h and not na(kv_1h_bull_box) ? kv_color_1h_bull : color.gray, text_size=size.small)
    table.cell(kv_table, 3, 3, "HIGH", text_color=color.lime, text_size=size.small)

// Signal Statistics Table
if sig_show_stats and barstate.islast
    if na(sig_table)
        sig_table := table.new(position.top_left, 3, 7, bgcolor=color.new(color.black, 85), border_width=1)
    
    table.cell(sig_table, 0, 0, "SIGNALS", text_color=color.white, text_size=size.small, bgcolor=color.new(color.green, 50))
    table.cell(sig_table, 1, 0, "Value", text_color=color.white, text_size=size.small, bgcolor=color.new(color.green, 50))
    table.cell(sig_table, 2, 0, "Status", text_color=color.white, text_size=size.small, bgcolor=color.new(color.green, 50))
    
    // Signal Strategy
    table.cell(sig_table, 0, 1, "Strategy", text_color=color.white, text_size=size.small)
    table.cell(sig_table, 1, 1, sig_strategy, text_color=color.aqua, text_size=size.small)
    table.cell(sig_table, 2, 1, sig_show_signals ? "ON" : "OFF", text_color=sig_show_signals ? color.lime : color.red, text_size=size.small)
    
    // TF Priority
    table.cell(sig_table, 0, 2, "TF Priority", text_color=color.white, text_size=size.small)
    table.cell(sig_table, 1, 2, sig_tf_priority, text_color=color.yellow, text_size=size.small)
    table.cell(sig_table, 2, 2, "", text_color=color.white, text_size=size.small)
    
    // Session Count
    table.cell(sig_table, 0, 3, "Session Signals", text_color=color.white, text_size=size.small)
    table.cell(sig_table, 1, 3, str.tostring(sig_session_signal_count), text_color=color.orange, text_size=size.small)
    table.cell(sig_table, 2, 3, "", text_color=color.white, text_size=size.small)
    
    // Zone Interactions
    bull_interactions = check_zone_interaction("bull")
    bear_interactions = check_zone_interaction("bear")
    
    table.cell(sig_table, 0, 4, "Bull Zones Hit", text_color=color.white, text_size=size.small)
    table.cell(sig_table, 1, 4, str.tostring(bull_interactions), text_color=bull_interactions > 0 ? color.lime : color.gray, text_size=size.small)
    table.cell(sig_table, 2, 4, "", text_color=color.white, text_size=size.small)
    
    table.cell(sig_table, 0, 5, "Bear Zones Hit", text_color=color.white, text_size=size.small)
    table.cell(sig_table, 1, 5, str.tostring(bear_interactions), text_color=bear_interactions > 0 ? color.red : color.gray, text_size=size.small)
    table.cell(sig_table, 2, 5, "", text_color=color.white, text_size=size.small)

// ============================================================================
// 🚨 ALERT CONDITIONS
// ============================================================================

// KV Zone Alerts
alertcondition(kv_5m_bear_trigger, "KV 5m Bear Zone", "KV 5m Bear Zone created at {{close}}")
alertcondition(kv_5m_bull_trigger, "KV 5m Bull Zone", "KV 5m Bull Zone created at {{close}}")
alertcondition(kv_15m_bear_trigger, "KV 15m Bear Zone", "KV 15m Bear Zone created at {{close}}")
alertcondition(kv_15m_bull_trigger, "KV 15m Bull Zone", "KV 15m Bull Zone created at {{close}}")
alertcondition(kv_enable_1h and kv_1h_bear_trigger, "KV 1H Bear Zone", "KV 1H Bear Zone created at {{close}}")
alertcondition(kv_enable_1h and kv_1h_bull_trigger, "KV 1H Bull Zone", "KV 1H Bull Zone created at {{close}}")

// Signal Alerts
alertcondition(buy_signal, "Buy Signal", "BUY Signal (" + sig_strategy + ") at {{close}}")
alertcondition(sell_signal, "Sell Signal", "SELL Signal (" + sig_strategy + ") at {{close}}")

// Combined Alerts
alertcondition(buy_signal and check_zone_interaction("bull") >= 2, "Strong Buy Signal", "STRONG BUY Signal - Multiple KV Zones at {{close}}")
alertcondition(sell_signal and check_zone_interaction("bear") >= 2, "Strong Sell Signal", "STRONG SELL Signal - Multiple KV Zones at {{close}}")

// ============================================================================
// 📊 SCALPING OPTIMIZATION FEATURES
// ============================================================================

// Reset session count daily
new_day = ta.change(time("1D")) != 0
if new_day
    sig_session_signal_count := 0

// Box count monitoring for performance
active_boxes = 0
if not na(kv_5m_bear_box)
    active_boxes += 1
if not na(kv_5m_bull_box)
    active_boxes += 1
if not na(kv_15m_bear_box)
    active_boxes += 1
if not na(kv_15m_bull_box)
    active_boxes += 1
if kv_enable_1h and not na(kv_1h_bear_box)
    active_boxes += 1
if kv_enable_1h and not na(kv_1h_bull_box)
    active_boxes += 1

// Warning if approaching box limit
if active_boxes > 40 and barstate.islast
    label.new(bar_index, high, "WARNING: High box count: " + str.tostring(active_boxes), color=color.yellow, textcolor=color.black, style=label.style_label_down, size=size.small)