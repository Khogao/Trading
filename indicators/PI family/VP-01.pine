//@version=5
// TITLE: VP Production v1.0
// DESC: Incorporates final polishes for robustness and clarity. This is the production baseline.
indicator(title='VP Production v1.0', shorttitle='VP Prod', overlay=true, max_bars_back=5000, max_boxes_count=500)

// === INPUTS ===
vp_lookback_depth = input.int(200, 'Lookback Bars', minval=20, maxval=1000, group='Core Settings')
vp_num_levels = input.int(60, 'Price Levels', minval=20, maxval=200, group='Core Settings')
vp_bar_width = input.int(30, 'Bar Width', minval=10, maxval=100, group='Core Settings')
vp_right_offset = input.int(40, 'Right Offset', minval=0, maxval=150, group='Core Settings')
auto_adjust_tf = input.bool(true, 'Auto-Adjust for Timeframe', group='Multi-Timeframe')
manual_tf_mode = input.string('1H', 'Manual Timeframe Mode', options=['1D', '4H', '1H', '15m', '5m', '1m'], group='Multi-Timeframe')
execution_sensitivity = input.string('Medium', 'Update Sensitivity', options=['Low', 'Medium', 'High', 'Ultra'], group='Multi-Timeframe')
session_focus = input.bool(true, 'Focus on Current Session', group='Session Settings')
session_weight = input.float(1.5, 'Session Weight', minval=1.0, maxval=3.0, step=0.1, group='Session Settings')
vp_volume_type = input.string('Both', 'Volume Type', options=['Both', 'Bullish', 'Bearish'], group='Session Settings')
intraday_mode = input.bool(true, 'Intraday Mode (12-14h holds)', group='Session Settings')
intraday_start_hour = input.int(10, 'Intraday Window Start (hour)', minval=0, maxval=23, group='Session Settings')
intraday_end_hour   = input.int(14, 'Intraday Window End (hour)',   minval=0, maxval=23, group='Session Settings')
intraday_lookback_days = input.int(5, 'Intraday Lookback (days)', minval=1, maxval=30, group='Session Settings')
vp_show_poc = input.bool(true, 'Show POC', group='Display')
vp_show_va = input.bool(true, 'Show Value Area', group='Display')
vp_va_percent = input.int(70, 'Value Area %', minval=50, maxval=95, group='Display')
intraday_va_percent = input.int(80, 'Intraday VA %', minval=60, maxval=95, group='Display')
vp_show_hva = input.bool(false, 'Show High Volume Areas', group='Display')
vp_hva_threshold = input.int(80, 'HVA Threshold %', minval=60, maxval=95, group='Display')
vp_vol_color = input.color(color.new(color.gray, 70), 'Volume Bar Color', group='Colors')
vp_poc_color = input.color(color.red, 'POC Color', group='Colors')
vp_va_color = input.color(color.new(color.blue, 80), 'Value Area Color', group='Colors')
vp_hva_color = input.color(color.new(color.orange, 70), 'HVA Color', group='Colors')

// === VARIABLES ===
var float[] volume_at_price = array.new_float(vp_num_levels, 0.0)
var box[]   volume_boxes    = array.new_box()
var box     poc_box         = na
var label   info_label      = na
var int     last_calc_bar   = 0
var float   last_price_low  = na
var float   last_price_step = na
var float   price_high      = na
var float   price_low       = na
var float   price_step      = na

// === HELPER FUNCTIONS ===
f_get_timeframe_mode() =>
    // POLISH: Added manual_tf_mode return
    if auto_adjust_tf
        tf_minutes = timeframe.in_seconds() / 60
        // replaced Pascal-style 'then' chain with Pine ternary expressions
        tf_minutes >= 1440 ? '1D' : tf_minutes >= 240 ? '4H' : tf_minutes >= 60 ? '1H' : tf_minutes >= 15 ? '15m' : tf_minutes >= 5 ? '5m' : '1m'
    else
        manual_tf_mode

f_price_to_index(price, local_price_low, local_price_step) =>
    if local_price_step > 0
        int(math.max(0, math.min(vp_num_levels - 1, math.floor((price - local_price_low) / local_price_step))))
    else
        0

f_calculate_value_area(poc_idx, total_vol, local_price_low, local_price_step, va_percentage) =>
    if poc_idx < 0 or total_vol <= 0
        [na, na]
    else
        target_volume = total_vol * va_percentage / 100
        va_volume = array.get(volume_at_price, poc_idx)
        va_upper = poc_idx
        va_lower = poc_idx
        
        while va_volume < target_volume and (va_upper < vp_num_levels - 1 or va_lower > 0)
            vol_above = va_upper < vp_num_levels - 1 ? array.get(volume_at_price, va_upper + 1) : 0.0
            vol_below = va_lower > 0 ? array.get(volume_at_price, va_lower - 1) : 0.0
            if vol_above >= vol_below and va_upper < vp_num_levels - 1
                va_upper += 1
                va_volume += vol_above
            else if va_lower > 0
                va_lower -= 1
                va_volume += vol_below
            else
                break
        [local_price_low + va_lower * local_price_step, local_price_low + va_upper * local_price_step]

// === MAIN LOGIC ===
tf_mode = f_get_timeframe_mode()
tf_minutes = timeframe.in_seconds() / 60

// POLISH: Replaced long if/else with switch for clarity
base_update_freq = switch tf_mode
    '1D'  => math.max(10, vp_lookback_depth / 20)
    '4H'  => math.max(5, vp_lookback_depth / 30)
    '1H'  => math.max(3, vp_lookback_depth / 40)
    '15m' => math.max(2, vp_lookback_depth / 50)
    '5m'  => 2
    => 1

final_update_freq = switch execution_sensitivity
    'Ultra'  => 1
    'High'   => 2
    'Medium' => int(math.max(3, base_update_freq))
    => int(math.max(5, base_update_freq * 2))

avg_len = int(math.min(50, bar_index + 1))
avg_vol_norm = ta.sma(volume, avg_len) / tf_minutes
cur_vol_norm = volume / tf_minutes
vol_thresh = switch execution_sensitivity
    'Ultra'  => 1.3
    'High'   => 1.7
    'Medium' => 2.5
    => 4.0
move_thresh = switch execution_sensitivity
    'Ultra'  => 0.002
    'High'   => 0.003
    'Medium' => 0.005
    => 0.01
vol_spike = cur_vol_norm > avg_vol_norm * vol_thresh and avg_vol_norm > 0
price_move = math.abs(close - nz(close[1])) / nz(close[1], 1) > move_thresh
needs_update = barstate.islast or (bar_index - last_calc_bar >= final_update_freq) or vol_spike or price_move

// POLISH: More robust calculation for bars per timeframe
bars_per_day = 1440 / tf_minutes
effective_lookback = if intraday_mode
    int(math.min(vp_lookback_depth, intraday_lookback_days * bars_per_day))
else
    switch tf_mode
        '1D'  => math.min(vp_lookback_depth, 40)
        '4H'  => math.min(vp_lookback_depth, 120)
        '1H'  => math.min(vp_lookback_depth, 240)
        '15m' => math.min(vp_lookback_depth, 500)
        '5m'  => math.min(vp_lookback_depth, 300)
        => math.min(vp_lookback_depth, 200)

price_high_all = ta.highest(high, effective_lookback)
price_low_all  = ta.lowest(low, effective_lookback)
price_step_all = (price_high_all - price_low_all) / vp_num_levels

if array.size(volume_at_price) != vp_num_levels
    array.clear(volume_at_price)
    for i = 0 to vp_num_levels - 1
        array.push(volume_at_price, 0.0)

if needs_update
    array.fill(volume_at_price, 0.0)
    price_high := price_high_all
    price_low  := price_low_all
    price_step := price_step_all

    if price_step > 0
        for b = 0 to math.min(effective_lookback - 1, bar_index)
            is_bullish = close[b] >= open[b]
            include_volume = vp_volume_type == 'Both' or (vp_volume_type == 'Bullish' and is_bullish) or (vp_volume_type == 'Bearish' and not is_bullish)
            if not include_volume or volume[b] <= 0
                continue
            
            normalized_vol = volume[b] / tf_minutes
            
            // compute age decay per timeframe (separate switch to avoid using 'switch' inline)
            age_decay_tf = switch tf_mode
                '1D'  => 0.002
                '4H'  => 0.006
                '1H'  => 0.012
                '15m' => 0.03
                '5m'  => 0.06
                => 0.1
            age_decay = intraday_mode ? 0.03 : age_decay_tf
            age_weight = 1.0 / (1.0 + age_decay * b)
            
            session_weight_factor = 1.0
            if session_focus
                if intraday_mode
                    h = hour(time[b], syminfo.timezone)
                    in_window = intraday_start_hour <= intraday_end_hour ? (h >= intraday_start_hour and h < intraday_end_hour) : (h >= intraday_start_hour or h < intraday_end_hour)
                    session_weight_factor := in_window ? session_weight : 1.0
                else
                    new_day_flag = ta.change(time("D")) != 0
                    is_current_session = ta.barssince(new_day_flag) <= bars_per_day
                    session_weight_factor := is_current_session ? session_weight : 1.0

            weighted_volume = normalized_vol * age_weight * session_weight_factor
            
            body_ratio = math.abs(close[b] - open[b]) / math.max(high[b] - low[b], price_step)
            typical_price = nz(body_ratio * (open[b] + close[b]) / 2 + (1 - body_ratio) * (high[b] + low[b]) / 2, close[b])
            price_range = high[b] - low[b]

            if price_range <= 0
                idx = f_price_to_index(typical_price, price_low, price_step)
                array.set(volume_at_price, idx, array.get(volume_at_price, idx) + weighted_volume * tf_minutes)
            else
                start_idx = f_price_to_index(low[b],  price_low, price_step)
                end_idx   = f_price_to_index(high[b], price_low, price_step)
                denom = math.max(1, end_idx - start_idx + 1)
                dist_denom = math.max(price_range / 2, price_step)
                for j = start_idx to end_idx
                    level_price = price_low + j * price_step
                    distance_factor = math.max(0.0, 1.0 - math.abs(level_price - typical_price) / dist_denom)
                    weight = math.max(0.05, distance_factor)
                    distributed_vol = weighted_volume * weight / denom
                    array.set(volume_at_price, j, array.get(volume_at_price, j) + distributed_vol * tf_minutes)
        
        // --- Drawing Logic ---
        for bx in volume_boxes
            box.delete(bx)
        array.clear(volume_boxes)
        if not na(poc_box)
            box.delete(poc_box)
            poc_box := na

        max_vol = array.max(volume_at_price)
        if max_vol > 0
            poc_idx = array.indexof(volume_at_price, max_vol)
            poc_price = price_low + poc_idx * price_step
            total_vol = array.sum(volume_at_price)
            va_percentage = intraday_mode ? intraday_va_percent : vp_va_percent
            [va_low, va_high] = f_calculate_value_area(poc_idx, total_vol, price_low, price_step, va_percentage)
            x_base = bar_index + vp_right_offset
            for i = 0 to vp_num_levels - 1
                level_volume = array.get(volume_at_price, i)
                if level_volume > 0
                    bar_length = int(math.round(level_volume / max_vol * vp_bar_width))
                    if bar_length > 0
                        level_price = price_low + i * price_step
                        box_color = vp_show_va and not na(va_low) and level_price >= va_low and level_price <= va_high ? vp_va_color : vp_vol_color
                        box_color := vp_show_hva and level_volume >= max_vol * vp_hva_threshold / 100 ? vp_hva_color : box_color
                        box_color := i == poc_idx and vp_show_poc ? vp_poc_color : box_color
                        array.push(volume_boxes, box.new(x_base, level_price - price_step / 2, x_base + bar_length, level_price + price_step / 2, bgcolor=box_color, border_color=na))
            if vp_show_poc and not na(poc_price)
                // POLISH: POC line length now tied to actual lookback used
                poc_x1 = bar_index - effective_lookback
                poc_x2 = bar_index + vp_right_offset - 5
                poc_box := box.new(poc_x1, poc_price - price_step / 4, poc_x2, poc_price + price_step / 4, bgcolor=vp_poc_color, border_color=vp_poc_color)
        
        last_price_low  := price_low
        last_price_step := price_step
    last_calc_bar := bar_index

// === INFO DISPLAY ===
if barstate.islast and not na(last_price_low)
    max_vol = array.max(volume_at_price)
    poc_idx = array.indexof(volume_at_price, max_vol)
    poc_price = last_price_low + poc_idx * last_price_step
    info_text = "POC: " + str.tostring(poc_price, format.mintick) + "\nLevels: " + str.tostring(vp_num_levels) + "\nBars: " + str.tostring(effective_lookback) + "\nTF: " + tf_mode
    label.delete(info_label)
    info_label := label.new(bar_index + vp_right_offset + vp_bar_width + 10, high, info_text, style=label.style_label_left, color=color.new(color.black, 80), textcolor=color.white, size=size.small)