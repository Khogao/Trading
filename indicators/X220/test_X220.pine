// © Gemini 2025 - Phiên bản sửa lỗi dứt điểm cho người dùng Phi
//@version=6
indicator("CVD+Volume (Definitive Fix)", shorttitle="CVD+Vol DF", format=format.volume, precision=0, overlay=false, scale=scale.left, max_lines_count=500, max_labels_count=500)

import TradingView/ta/8

// ==============================================================================================
// PHẦN NHẬP LIỆU (INPUTS) - Không thay đổi
// ==============================================================================================
// --- Cài đặt Volume Delta & CVD ---
lowerTimeframeTooltip = "Chỉ báo quét dữ liệu ở khung thời gian thấp hơn để tính toán khối lượng mua/bán. Mặc định, khung thời gian được chọn tự động. Tùy chọn này cho phép bạn đặt một khung thời gian tùy chỉnh.\n\nKhung thời gian cao hơn cung cấp nhiều dữ liệu lịch sử hơn, nhưng độ chính xác sẽ giảm."
useCustomTimeframeInput = input.bool(false, "Sử dụng khung thời gian tùy chỉnh", tooltip = lowerTimeframeTooltip)
lowerTimeframeInput = input.timeframe("1", "Khung thời gian", tooltip = "Chỉ có tác dụng khi tùy chọn 'Sử dụng khung thời gian tùy chỉnh' được bật.")
anchorInput = input.timeframe("1D", "Khung thời gian neo CVD")
// --- Các Mẫu Hình Volume ---
showAbsorption = input.bool(true, "Hiển thị Hấp thụ Mua/Bán (BA/SA)")
showBreakouts = input.bool(true, "Hiển thị Đột phá Volume (BB/BR)")
showInstitutionalFlow = input.bool(true, "Hiển thị Dòng tiền lớn (IF)")
volumeThreshold = input.float(1.5, "Ngưỡng Volume (x lần so với Trung bình)", minval=1.0, maxval=5.0, step=0.1)
priceMovementThreshold = input.float(0.5, "Ngưỡng Biến động Giá (%)", minval=0.1, maxval=2.0, step=0.1)
// --- Tín hiệu VSA ---
var string GRP_VSA = "Cài đặt Hiển thị Tín hiệu VSA"
showVSASignals = input.bool(true, "Hiển thị Tín hiệu VSA", group=GRP_VSA)
vsaVolumeLength = input.int(20, "Độ dài MA Volume cho VSA", minval=5, maxval=100, group=GRP_VSA)
vsaSensitivity = input.float(1.5, "Độ nhạy VSA", minval=1.0, maxval=3.0, step=0.1, group=GRP_VSA)
showCriticalOnly = input.bool(false, "Chỉ hiển thị Tín hiệu Quan trọng", group=GRP_VSA, tooltip="Chỉ hiển thị các mẫu hình VSA quan trọng nhất (SC, BC, BH, SV)")
signalSpacing = input.float(1.2, "Khoảng cách dọc giữa các Tín hiệu", minval=1.0, maxval=3.0, step=0.1, group=GRP_VSA, tooltip="Điều chỉnh khoảng cách theo chiều dọc giữa các lớp tín hiệu")
// --- Cài đặt hiển thị CVD ---
var string GRP_CVD_DISPLAY = "Hiển thị & Tỷ lệ CVD"
cvdBaselineOffsetPct = input.float(0.06, "Độ dời Đường Zero-line của CVD (% so với vol tối đa)", minval=0.0, maxval=0.5, step=0.01, group=GRP_CVD_DISPLAY, tooltip="Nâng đường CVD lên trên đường cơ sở của volume để dễ nhìn hơn")
cvdTransparency = input.int(30, "Độ trong suốt của CVD", minval=0, maxval=100, group=GRP_CVD_DISPLAY)
showCVDBorders = input.bool(true, "Hiển thị Viền Nến CVD", group=GRP_CVD_DISPLAY)
showCVDWicks = input.bool(true, "Hiển thị Râu Nến CVD", group=GRP_DISPLAY)
cvdBullColor = input.color(color.blue, "Màu Tăng của CVD", group=GRP_CVD_DISPLAY)
cvdBearColor = input.color(color.orange, "Màu Giảm của CVD", group=GRP_CVD_DISPLAY)
// --- Hệ thống Phân kỳ Kép ---
var string GRP_DIVERGENCE = "Cài đặt Hiển thị Phân kỳ"
showDualDivergence = input.bool(true, "Hiển thị Hệ thống Phân kỳ Kép", group=GRP_DIVERGENCE)
showCVDVolumeDivergence = input.bool(true, "Hiển thị Phân kỳ CVD-Volume (Tín hiệu sớm)", group=GRP_DIVERGENCE)
showCVDPriceDivergence = input.bool(true, "Hiển thị Phân kỳ CVD-Giá (Tín hiệu xác nhận)", group=GRP_DIVERGENCE)
divLookbackLeft = input.int(5, "Độ dài Phân kỳ (Bên trái)", minval=2, maxval=20, group=GRP_DIVERGENCE)
divLookbackRight = input.int(5, "Độ dài Phân kỳ (Bên phải)", minval=2, maxval=20, group=GRP_DIVERGENCE)
divRangeLower = input.int(5, "Phạm vi Phân kỳ Tối thiểu", minval=1, maxval=100, group=GRP_DIVERGENCE)
divRangeUpper = input.int(60, "Phạm vi Phân kỳ Tối đa", minval=10, maxval=200, group=GRP_DIVERGENCE)
// --- Bảng thông tin ---
var string GRP_TABLE = "Bảng Thông tin"
showInfoTable = input.bool(true, title='Hiển thị Bảng Thông tin', group=GRP_TABLE)
tablePosition = input.string(title='Vị trí', defval='top_right', options=['top_left','top_right','bottom_left','bottom_right'], group=GRP_TABLE)

// ==============================================================================================
// TÍNH TOÁN CỐT LÕI - Không thay đổi
// ==============================================================================================
var lowerTimeframe = switch
    useCustomTimeframeInput => lowerTimeframeInput
    timeframe.isseconds     => "1S"
    timeframe.isintraday    => "1"
    timeframe.isdaily       => "5"
    => "60"
[openVolume, maxVolume, minVolume, lastVolume] = ta.requestVolumeDelta(lowerTimeframe)
[cvdOpenVolume, cvdMaxVolume, cvdMinVolume, cvdLastVolume] = ta.requestVolumeDelta(lowerTimeframe, anchorInput)
volumeMA = ta.sma(volume, vsaVolumeLength)
volumeRatio = volume / volumeMA
highVolumeBasic = volume > volumeMA * volumeThreshold
priceRange = high - low
priceChange = math.abs(close - open)
priceMovementPct = priceRange > 0 ? (priceChange / priceRange) * 100 : 0
closeLocation = priceRange > 0 ? (close - low) / priceRange : 0.5
buyAbsorption = highVolumeBasic and priceMovementPct < priceMovementThreshold and closeLocation > 0.6
sellAbsorption = highVolumeBasic and priceMovementPct < priceMovementThreshold and closeLocation < 0.4
volumeBreakoutBull = highVolumeBasic and priceMovementPct > priceMovementThreshold * 2 and close > open
volumeBreakoutBear = highVolumeBasic and priceMovementPct > priceMovementThreshold * 2 and close < open
cvdDelta = cvdLastVolume - cvdOpenVolume

// ==============================================================================================
// HỆ THỐNG TỶ LỆ NEO CVD (SCALING) - Không thay đổi
// ==============================================================================================
var float anchorCvdMax = na, var float anchorCvdMin = na, var float anchorVolMax = na
isNewAnchor = ta.change(time(anchorInput)) != 0
if isNewAnchor or na(anchorCvdMax)
    anchorCvdMax := cvdMaxVolume
    anchorCvdMin := cvdMinVolume
    anchorVolMax := volume
else
    anchorCvdMax := math.max(anchorCvdMax, cvdMaxVolume)
    anchorCvdMin := math.min(anchorCvdMin, cvdMinVolume)
    anchorVolMax := math.max(anchorVolMax, volume)
anchorCvdRange = anchorCvdMax - anchorCvdMin
scaleFactor = anchorCvdRange > 0 ? (anchorVolMax / anchorCvdRange) * 0.8 : 1
cvdZeroOffset = anchorVolMax * cvdBaselineOffsetPct
scaleCVD(value) => (value - anchorCvdMin) * scaleFactor + cvdZeroOffset

// ==============================================================================================
// LOGIC TÍN HIỆU VSA - Không thay đổi
// ==============================================================================================
atr = ta.atr(14)
spread = high - low
wideSpread = spread > atr * 1.2, narrowSpread = spread < atr * 0.5
highVolume = volume > volumeMA * vsaSensitivity, veryHighVolume = volume > volumeMA * vsaSensitivity * 1.5
lowVolume = volume < volumeMA * 0.7, ultraHighVolume = volume > volumeMA * vsaSensitivity * 2.0
sellingClimax = veryHighVolume and close < open and closeLocation < 0.3
buyingClimax = veryHighVolume and close > open and closeLocation > 0.7
noDemand = lowVolume and close > open and closeLocation < 0.6 and close[1] < close[2]
noSupply = lowVolume and close < open and closeLocation > 0.4 and close[1] > close[2]
effortToFall = highVolume and wideSpread and close < open and closeLocation > 0.7
effortToRise = highVolume and wideSpread and close > open and closeLocation < 0.3
bagHolding = ultraHighVolume and wideSpread and closeLocation < 0.2
upthrust = highVolume and high > high[1] and close < close[1] and closeLocation < 0.5
spring = lowVolume and low < low[1] and close > low and closeLocation > 0.5
test = lowVolume and narrowSpread and closeLocation > 0.7 and close[1] < close[2]
stoppingVolume = ultraHighVolume and narrowSpread and ((close > open and close[1] < open[1]) or (close < open and close[1] > open[1]))
weakness = highVolume and wideSpread and close > open and closeLocation < 0.5
strength = highVolume and wideSpread and close < open and closeLocation > 0.5
shakeout = highVolume and low < low[1] and close > close[1] and closeLocation > 0.6

// ==============================================================================================
// SỬA LỖI DỨT ĐIỂM: HỆ THỐNG PHÂN KỲ KÉP ĐƯỢC VIẾT LẠI HOÀN TOÀN
// ==============================================================================================
cvdMomentum = ta.roc(cvdLastVolume, 3)
volumeMomentum = ta.roc(volume, 3)

// Bước 1: Tìm tất cả các điểm pivot có thể có
pricePivotLow = ta.pivotlow(low, divLookbackLeft, divLookbackRight)
pricePivotHigh = ta.pivothigh(high, divLookbackLeft, divLookbackRight)
cvdPivotLow = ta.pivotlow(cvdMomentum, divLookbackLeft, divLookbackRight)
cvdPivotHigh = ta.pivothigh(cvdMomentum, divLookbackLeft, divLookbackRight)
volPivotLow = ta.pivotlow(volumeMomentum, divLookbackLeft, divLookbackRight)
volPivotHigh = ta.pivothigh(volumeMomentum, divLookbackLeft, divLookbackRight)

// Bước 2: Tạo điều kiện bool để xác nhận pivot (chỉ khi có pivot thì mới là true)
pricePLFound = not na(pricePivotLow)
pricePHFound = not na(pricePivotHigh)
cvdPLFound = not na(cvdPivotLow)
cvdPHFound = not na(cvdPivotHigh)
volPLFound = not na(volPivotLow)
volPHFound = not na(volPivotHigh)

// Bước 3: Lấy giá trị của pivot *trước đó* một cách an toàn
prevPriceLow = ta.valuewhen(pricePLFound, low[divLookbackRight], 1)
prevPriceHigh = ta.valuewhen(pricePHFound, high[divLookbackRight], 1)
prevCvdLow = ta.valuewhen(cvdPLFound, cvdMomentum[divLookbackRight], 1)
prevCvdHigh = ta.valuewhen(cvdPHFound, cvdMomentum[divLookbackRight], 1)
prevVolLow = ta.valuewhen(volPLFound, volumeMomentum[divLookbackRight], 1)
prevVolHigh = ta.valuewhen(volPHFound, volumeMomentum[divLookbackRight], 1)

// Bước 4: Kiểm tra xem pivot hiện tại có nằm trong phạm vi cho phép so với pivot trước đó không
barsSincePricePL = ta.barssince(pricePLFound)
pricePLInRange = barsSincePricePL >= divRangeLower and barsSincePricePL <= divRangeUpper
barsSincePricePH = ta.barssince(pricePHFound)
pricePHInRange = barsSincePricePH >= divRangeLower and barsSincePricePH <= divRangeUpper

// Bước 5: Xây dựng các điều kiện phân kỳ cuối cùng từ các biến đã tính toán sẵn
// Phân kỳ tăng giá: Giá tạo đáy thấp hơn (LL), chỉ báo tạo đáy cao hơn (HL)
priceLowerLow = pricePLFound and low[divLookbackRight] < prevPriceLow and pricePLInRange
cvdHigherLow = cvdPLFound and cvdMomentum[divLookbackRight] > prevCvdLow
volLowerLow = volPLFound and volumeMomentum[divLookbackRight] < prevVolLow

// Phân kỳ giảm giá: Giá tạo đỉnh cao hơn (HH), chỉ báo tạo đỉnh thấp hơn (LH)
priceHigherHigh = pricePHFound and high[divLookbackRight] > prevPriceHigh and pricePHInRange
cvdLowerHigh = cvdPHFound and cvdMomentum[divLookbackRight] < prevCvdHigh
volHigherHigh = volPHFound and volumeMomentum[divLookbackRight] > prevVolHigh

// Bước 6: Tổng hợp các tín hiệu
cvdPriceBullDivergence = showCVDPriceDivergence and priceLowerLow and cvdHigherLow
cvdVolumeBullDivergence = showCVDVolumeDivergence and volLowerLow and cvdHigherLow
cvdPriceBearDivergence = showCVDPriceDivergence and priceHigherHigh and cvdLowerHigh
cvdVolumeBearDivergence = showCVDVolumeDivergence and volHigherHigh and cvdLowerHigh

strongBullDivergence = cvdPriceBullDivergence and cvdVolumeBullDivergence
strongBearDivergence = cvdPriceBearDivergence and cvdVolumeBearDivergence
institutionalFlow = cvdPriceBullDivergence or cvdVolumeBullDivergence or cvdPriceBearDivergence or cvdVolumeBearDivergence

// ==============================================================================================
// HIỂN THỊ TRÊN BIỂU ĐỒ (PLOTTING) - Phần này đã đúng, lỗi là do khối mã ở trên
// ==============================================================================================
plot(volume, title="Volume", color=close > open ? color.new(color.green, 75) : color.new(color.red, 75), style=plot.style_columns)
plotcandle(scaleCVD(cvdOpenVolume), scaleCVD(cvdMaxVolume), scaleCVD(cvdMinVolume), scaleCVD(cvdLastVolume), "CVD", 
           color=cvdLastVolume >= cvdOpenVolume ? color.new(cvdBullColor, cvdTransparency) : color.new(cvdBearColor, cvdTransparency), 
           bordercolor=showCVDBorders ? (cvdLastVolume >= cvdOpenVolume ? cvdBullColor : cvdBearColor) : na, 
           wickcolor=showCVDWicks ? (cvdLastVolume >= cvdOpenVolume ? cvdBullColor : cvdBearColor) : na)
plot(cvdZeroOffset, title="CVD Zero Line", color=color.new(color.gray, 70), linewidth=1)

var int bullStack = 0, var int bearStack = 0
if barstate.isnew
    bullStack := 0, bearStack := 0

cvdBase = scaleCVD(cvdLastVolume)
stackSpacing = (anchorVolMax / 20) * signalSpacing

if showAbsorption and buyAbsorption
    bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "BA", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "BA txt", "BA", location.absolute, color.black, size.small)
if showAbsorption and sellAbsorption
    bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "SA", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "SA txt", "SA", location.absolute, color.black, size.small)
if showBreakouts and volumeBreakoutBull
    bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "BB", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "BB txt", "BB", location.absolute, color.black, size.small)
if showBreakouts and volumeBreakoutBear
    bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "BR", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "BR txt", "BR", location.absolute, color.black, size.small)
if showInstitutionalFlow and institutionalFlow
    bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "IF", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "IF txt", "IF", location.absolute, color.black, size.small)
if showVSASignals
    if sellingClimax
        bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "SC", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "SC txt", "SC", location.absolute, color.black, size.small)
    if buyingClimax
        bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "BC", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "BC txt", "BC", location.absolute, color.black, size.small)
    if bagHolding
        bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "BH", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "BH txt", "BH", location.absolute, color.black, size.small)
    if stoppingVolume
        bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "SV", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "SV txt", "SV", location.absolute, color.black, size.small)
    if not showCriticalOnly
        if noDemand
            bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "ND", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "ND txt", "ND", location.absolute, color.black, size.small)
        if noSupply
            bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "NS", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "NS txt", "NS", location.absolute, color.black, size.small)
        if effortToFall
            bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "EF", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "EF txt", "EF", location.absolute, color.black, size.small)
        if effortToRise
            bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "ER", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "ER txt", "ER", location.absolute, color.black, size.small)
        if upthrust
            bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "UT", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "UT txt", "UT", location.absolute, color.black, size.small)
        if spring
            bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "SP", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "SP txt", "SP", location.absolute, color.black, size.small)
        if test
            bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "TE", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "TE txt", "TE", location.absolute, color.black, size.small)
        if weakness
            bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "WK", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "WK txt", "WK", location.absolute, color.black, size.small)
        if strength
            bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "ST", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "ST txt", "ST", location.absolute, color.black, size.small)
        if shakeout
            bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "SO", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "SO txt", "SO", location.absolute, color.black, size.small)
if showDualDivergence
    if strongBullDivergence
        bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "SB", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "SB txt", "SB", location.absolute, color.black, size.small)
    if strongBearDivergence
        bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "SR", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "SR txt", "SR", location.absolute, color.black, size.small)
    if cvdVolumeBullDivergence and not strongBullDivergence
        bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "CV", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "CV txt", "CV", location.absolute, color.black, size.small)
    if cvdVolumeBearDivergence and not strongBearDivergence
        bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "CV", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "CV txt", "CV", location.absolute, color.black, size.small)
    if cvdPriceBullDivergence and not strongBullDivergence
        bullStack += 1, plotshape(cvdBase - bullStack * stackSpacing, "CP", location.absolute, shape.triangleup, color.green, size.small), plotchar(cvdBase - bullStack * stackSpacing, "CP txt", "CP", location.absolute, color.black, size.small)
    if cvdPriceBearDivergence and not strongBearDivergence
        bearStack += 1, plotshape(cvdBase + bearStack * stackSpacing, "CP", location.absolute, shape.triangledown, color.red, size.small), plotchar(cvdBase + bearStack * stackSpacing, "CP txt", "CP", location.absolute, color.black, size.small)

bgcolor(showDualDivergence and strongBullDivergence ? color.new(color.lime, 95) : na)
bgcolor(showDualDivergence and strongBearDivergence ? color.new(color.red, 95) : na)

// ==============================================================================================
// BẢNG THÔNG TIN - Không thay đổi
// ==============================================================================================
fillCell(table infoTable, int col, int row, string title, string value, color valueColor) =>
    table.cell(infoTable, col, row, title, text_color=color.white, text_size=size.small)
    table.cell(infoTable, col + 1, row, value, text_color=valueColor, text_size=size.small)
if barstate.islast and showInfoTable
    var infoTable = table.new(tablePosition, 2, 6, bgcolor=color.new(color.black, 20), border_width=1)
    fillCell(infoTable, 0, 0, "Volume Ratio:", str.format("{0,number,#.##}x", volumeRatio), volumeRatio > 1.5 ? color.yellow : color.white)
    fillCell(infoTable, 0, 1, "Volume Delta:", str.format("{0,number,#.#}K", lastVolume / 1000), lastVolume > 0 ? color.lime : color.red)
    fillCell(infoTable, 0, 2, "CVD Delta:", str.format("{0,number,#.#}K", cvdDelta / 1000), cvdDelta > 0 ? color.lime : color.red)
    divText = strongBullDivergence ? "BULL++" : strongBearDivergence ? "BEAR--" : cvdVolumeBullDivergence or cvdPriceBullDivergence ? "BULL" : cvdVolumeBearDivergence or cvdPriceBearDivergence ? "BEAR" : "---"
    divColor = strongBullDivergence ? color.lime : strongBearDivergence ? color.red : (cvdVolumeBullDivergence or cvdPriceBullDivergence ? color.new(color.lime, 40) : (cvdVolumeBearDivergence or cvdPriceBearDivergence ? color.new(color.red, 40) : color.gray))
    fillCell(infoTable, 0, 3, "Divergence:", divText, divColor)
    statusText = sellingClimax ? "SC" : buyingClimax ? "BC" : bagHolding ? "BH" : spring ? "SP" : stoppingVolume ? "SV" : shakeout ? "SO" : "---"
    statusColor = (sellingClimax or bagHolding) ? color.red : (buyingClimax or spring or stoppingVolume or shakeout) ? color.lime : color.gray
    fillCell(infoTable, 0, 4, "VSA Signal:", statusText, statusColor)
// --- Kiểm tra dữ liệu volume ---
var cumVol = 0.
cumVol += nz(volume)
if barstate.islast and cumVol == 0
    runtime.error("Nhà cung cấp dữ liệu không cung cấp dữ liệu volume cho mã giao dịch này.")