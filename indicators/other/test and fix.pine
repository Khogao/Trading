//@version=5
indicator("EZZ 2.8 Gemini (Final & Stable)", overlay=true, max_boxes_count=200)

// ==============================================================================================
// MODULE 1: KV ZONE ENGINE - INPUTS
// ==============================================================================================
var string GRP_KV_GEN = "MODULE 1: KV Zone Engine"
kv_show_zones = input.bool(true, title="Show KV Zones", group=GRP_KV_GEN, inline="show")

// --- Flip Zone Inputs ---
var string GRP_FLIP = "Flip Zone Settings"
show_flip_zones = input.bool(true, "Show Flip Zones", group=GRP_FLIP)
flip_zone_style = input.string("Dotted", "Flip Zone Style", options=["Dotted", "Dashed", "Solid"], group=GRP_FLIP)
reset_tf = input.string("15", "Trend Reset Timeframe", options=["5", "15", "60", "240", "D"], group=GRP_FLIP, tooltip="CHoCH on this timeframe will clear all Flip Zones.")

// --- 5m ADAPTIVE PARAMETERS ---
var string GRP_5M = "KV • 5m Settings"
kv_zone_len_5m = input.int(3, title="[5m] Swing Length", minval=1, group=GRP_5M)

// --- 15m ADAPTIVE PARAMETERS ---
var string GRP_15M = "KV • 15m Settings"
kv_zone_len_15m = input.int(3, title="[15m] Swing Length", minval=1, group=GRP_15M)

// ==============================================================================================
// LOGIC BLOCK
// ==============================================================================================

// --- Data Types ---
type FlipZone
    box zone_box
    string direction

// --- State Management for Flip Zones ---
var array<FlipZone> flip_zones_5m = array.new<FlipZone>()
var array<FlipZone> flip_zones_15m = array.new<FlipZone>()

// --- Trend Reset Logic ---
f_detect_choch(int len) =>
    pivHi = ta.pivothigh(high, len, len)
    pivLo = ta.pivotlow(low, len, len)
    var float prevHigh = na
    var float prevLow = na
    var string trend = na
    choch_bull = false
    choch_bear = false
    if not na(pivHi)
        if trend == "down" and (na(prevHigh) or pivHi > prevHigh)
            choch_bull := true
        trend := "up"
        prevHigh := pivHi
    if not na(pivLo)
        if trend == "up" and (na(prevLow) or pivLo < prevLow)
            choch_bear := true
        trend := "down"
        prevLow := pivLo
    [choch_bull, choch_bear]
[reset_choch_bull, reset_choch_bear] = request.security(syminfo.tickerid, reset_tf, f_detect_choch(5))
if reset_choch_bull or reset_choch_bear
    for i = 0 to array.size(flip_zones_5m) - 1
        box.delete(array.get(flip_zones_5m, i).zone_box)
    for i = 0 to array.size(flip_zones_15m) - 1
        box.delete(array.get(flip_zones_15m, i).zone_box)
    array.clear(flip_zones_5m)
    array.clear(flip_zones_15m)

// --- Zone Management Function ---
f_manage_kv_zone(direction, is_visible, evt_once, htf_high, htf_low, htf_atr, htf_swing_hi, htf_swing_lo, htf_seq, htf_close, zone_atr_mult, throttle_bars, max_age, border_color, alpha, zone_box_in, zone_top_in, zone_bot_in, zone_seq_in) =>
    // Declare types explicitly for NA assignment
    box   _zone_box = zone_box_in
    float _zone_top = zone_top_in
    float _zone_bot = zone_bot_in
    int   _zone_seq = zone_seq_in
    bool  is_invalidated = false

    // Kiểm tra các điều kiện
    if not na(_zone_box)
        if bar_index > box.get_left(_zone_box) and (direction == "bear" ? htf_close > _zone_top : htf_close < _zone_bot)
            is_invalidated := true
        if max_age > 0 and (htf_seq - _zone_seq > max_age)
            is_invalidated := true

    // Xử lý logic, cập nhật biến cục bộ dùng :=
    if is_invalidated
        box.delete(_zone_box)
        _zone_box := na
        _zone_top := na
        _zone_bot := na
        _zone_seq := na

    if is_visible and evt_once and (na(_zone_seq) or (htf_seq - _zone_seq >= throttle_bars))
        box.delete(_zone_box)
        if direction == "bear"
            _zone_top := math.max(htf_high, htf_swing_hi)
            _zone_bot := _zone_top - htf_atr * zone_atr_mult
        else
            _zone_bot := math.min(htf_low, htf_swing_lo)
            _zone_top := _zone_bot + htf_atr * zone_atr_mult
        _zone_seq := htf_seq
        _zone_box := box.new(bar_index, _zone_top, bar_index + 10, _zone_bot, border_color=border_color, bgcolor=color.new(border_color, alpha))
    else if not na(_zone_box)
        box.set_right(_zone_box, bar_index + 10)

    [_zone_box, _zone_top, _zone_bot, _zone_seq, is_invalidated]

// --- Extend Flip Zones Function ---
extend_flip_zones(array<FlipZone> zones) =>
    if array.size(zones) > 0
        for i = 0 to array.size(zones) - 1
            box.set_right(array.get(zones, i).zone_box, bar_index + 10)

extend_flip_zones(flip_zones_5m)
extend_flip_zones(flip_zones_15m)

// ============================================================================
// EXECUTION BLOCK
// ============================================================================

// --- Quản lý Zone 5m Bear ---
var box   zone_box_5m_bear = na
var float kv5_bear_top     = na
var float kv5_bear_bot     = na
var int   kv5_bear_seq     = na
was_valid_5m_bear = not na(zone_box_5m_bear)

zone_5m_bear_result = f_manage_kv_zone(
    "bear",
    kv_show_zones,
    ta.crossover(close, ta.highest(high, kv_zone_len_5m)[1]),
    high,
    low,
    ta.atr(7),
    ta.highest(high, kv_zone_len_5m),
    ta.lowest(low, kv_zone_len_5m),
    bar_index,
    close,
    0.7,
    5,
    30,
    color.new(color.red, 40),
    80,
    zone_box_5m_bear,
    kv5_bear_top,
    kv5_bear_bot,
    kv5_bear_seq)
zone_box_5m_bear    = zone_5m_bear_result[0]
kv5_bear_top        = zone_5m_bear_result[1]
kv5_bear_bot        = zone_5m_bear_result[2]
kv5_bear_seq        = zone_5m_bear_result[3]
invalidated_5m_bear = zone_5m_bear_result[4]

// --- Quản lý Zone 5m Bull ---
var box   zone_box_5m_bull = na
var float kv5_bull_top     = na
var float kv5_bull_bot     = na
var int   kv5_bull_seq     = na
was_valid_5m_bull = not na(zone_box_5m_bull)

zone_5m_bull_result = f_manage_kv_zone(
    "bull",
    kv_show_zones,
    ta.crossunder(close, ta.lowest(low, kv_zone_len_5m)[1]),
    high,
    low,
    ta.atr(7),
    ta.highest(high, kv_zone_len_5m),
    ta.lowest(low, kv_zone_len_5m),
    bar_index,
    close,
    0.7,
    5,
    30,
    color.new(color.green, 40),
    80,
    zone_box_5m_bull,
    kv5_bull_top,
    kv5_bull_bot,
    kv5_bull_seq)
zone_box_5m_bull    = zone_5m_bull_result[0]
kv5_bull_top        = zone_5m_bull_result[1]
kv5_bull_bot        = zone_5m_bull_result[2]
kv5_bull_seq        = zone_5m_bull_result[3]
invalidated_5m_bull = zone_5m_bull_result[4]

// --- Quản lý Zone 15m Bear ---
var box   zone_box_15m_bear = na
var float kv15_bear_top     = na
var float kv15_bear_bot     = na
var int   kv15_bear_seq     = na
was_valid_15m_bear = not na(zone_box_15m_bear)

zone_15m_bear_result = f_manage_kv_zone(
    "bear",
    kv_show_zones,
    ta.crossover(close, ta.highest(high, kv_zone_len_15m)[1]),
    high,
    low,
    ta.atr(14),
    ta.highest(high, kv_zone_len_15m),
    ta.lowest(low, kv_zone_len_15m),
    bar_index,
    close,
    1.0,
    3,
    50,
    color.new(color.maroon, 30),
    75,
    zone_box_15m_bear,
    kv15_bear_top,
    kv15_bear_bot,
    kv15_bear_seq
)
zone_box_15m_bear    = zone_15m_bear_result[0]
kv15_bear_top        = zone_15m_bear_result[1]
kv15_bear_bot        = zone_15m_bear_result[2]
kv15_bear_seq        = zone_15m_bear_result[3]
invalidated_15m_bear = zone_15m_bear_result[4]

// --- Quản lý Zone 15m Bull --- (FIXED)
zone_15m_bull_result = f_manage_kv_zone(
    "bull",
    kv_show_zones,
    ta.crossunder(close, ta.lowest(low, kv_zone_len_15m)[1]),
    high,
    low,
    ta.atr(14),
    ta.highest(high, kv_zone_len_15m),
    ta.lowest(low, kv_zone_len_15m),
    bar_index,
    close,
    1.0,
    3,
    50,
    color.new(color.teal, 30),
    75,
    zone_box_15m_bull,
    kv15_bull_top,
    kv15_bull_bot,
    kv15_bull_seq)
zone_box_15m_bull    = zone_15m_bull_result[0]
kv15_bull_top        = zone_15m_bull_result[1]
kv15_bull_bot        = zone_15m_bull_result[2]
kv15_bull_seq        = zone_15m_bull_result[3]
invalidated_15m_bull = zone_15m_bull_result[4]

// --- Vẽ Flip Zones ---
var line   last_flipped_line_5m = na
var box    last_flipped_box_5m  = na
var line   last_flipped_line_15m = na
var box    last_flipped_box_15m  = na

draw_flip_zones(array<FlipZone> zones, var line last_flipped_line, var box last_flipped_box) =>
    if array.size(zones) > 0
        for i = 0 to array.size(zones) - 1
            zone = array.get(zones, i)
            if na(last_flipped_box) or last_flipped_box != zone.zone_box
                line.new(bar_index[1], zone.zone_box == last_flipped_box ? na : box.get_top(zone.zone_box), bar_index, box.get_top(zone.zone_box), color=color.new(zone.direction == "bull" ? color.green : color.red, 0), width=2)
                last_flipped_box := zone.zone_box
            last_flipped_line := line.new(bar_index[1], zone.zone_box == last_flipped_box ? na : box.get_bottom(zone.zone_box), bar_index, box.get_bottom(zone.zone_box), color=color.new(zone.direction == "bull" ? color.green : color.red, 0), width=2)

draw_flip_zones(flip_zones_5m, last_flipped_line_5m, last_flipped_box_5m)
draw_flip_zones(flip_zones_15m, last_flipped_line_15m, last_flipped_box_15m)