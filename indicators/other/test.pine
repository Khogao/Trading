// © 2025 Greg's Vault - EZZ 2.8 (Flip Zone Logic)
// Final feature upgrade. All future versions will focus on bug fixing and optimization.
//@version=5
indicator("EZZ 2.8 (Flip Zone Logic)", overlay=true, max_boxes_count=200)

// ==============================================================================================
// MODULE 1: KV ZONE ENGINE - INPUTS
// ==============================================================================================
var string GRP_KV_GEN = "MODULE 1: KV Zone Engine"
kv_show_zones = input.bool(true, title="Show KV Zones", group=GRP_KV_GEN, inline="show")

// --- Flip Zone Inputs (NEW) ---
var string GRP_FLIP = "Flip Zone Settings"
show_flip_zones = input.bool(true, "Show Flip Zones", group=GRP_FLIP)
flip_zone_style = input.string("Dotted", "Flip Zone Style", options=["Dotted", "Dashed", "Solid"], group=GRP_FLIP)
reset_tf = input.string("15", "Trend Reset Timeframe", options=["5", "15", "60", "240", "D"], group=GRP_FLIP, tooltip="CHoCH on this timeframe will clear all Flip Zones.")

// --- 5m ADAPTIVE PARAMETERS ---
var string GRP_5M = "KV • 5m Settings"
kv_zone_len_5m = input.int(3, title="[5m] Swing Length", minval=1, group=GRP_5M)
kv_swing_lb_5m = input.int(60, title="[5m] Swing Lookback", minval=5, group=GRP_5M)
// ... (other inputs as in v2.7)

// --- 15m ADAPTIVE PARAMETERS ---
var string GRP_15M = "KV • 15m Settings"
kv_zone_len_15m = input.int(3, title="[15m] Swing Length", minval=1, group=GRP_15M)
kv_swing_lb_15m = input.int(40, title="[15m] Swing Lookback", minval=5, group=GRP_15M)
// ... (other inputs as in v2.7)

// ==============================================================================================
// MODULE 2: SIGNAL ENGINE - INPUTS
// ==============================================================================================
var string GRP_SIG = "MODULE 2: Signal Engine"
sig_show = input.bool(true, title="Show Buy/Sell Signals", group=GRP_SIG, inline="showsig")
sig_retest_flip_zone = input.bool(true, title="Signal on Flip Zone Retest", group=GRP_SIG) // NEW
// ... (other inputs as in v2.7)

// ==============================================================================================
// LOGIC BLOCK 1: KV ZONE ENGINE
// ==============================================================================================

// --- Data Types (NEW) ---
type FlipZone
    box zone_box
    string direction // "bull" or "bear"

// --- State Management for Flip Zones (NEW) ---
var array<FlipZone> flip_zones_5m = array.new<FlipZone>()
var array<FlipZone> flip_zones_15m = array.new<FlipZone>()

// --- KV Trigger Function (Unchanged, except for ta.crossover/ta.crossunder fix) ---
f_kv_trigger(string direction, float _close, float _open, float _high, float _low, int _zone_len, float _min_body_atr, int _atr_len, float _wick_mult) =>
    bear_crossed = ta.crossover(_close, ta.highest(_high, _zone_len)[1])
    bull_crossed = ta.crossunder(_close, ta.lowest(_low, _zone_len)[1])
    crossed = direction == "bear" ? bear_crossed : bull_crossed
    atrv = ta.atr(_atr_len)
    body = math.abs(_close - _open)
    wick = direction == "bear" ? _high - math.max(_open, _close) : math.min(_open, _close) - _low
    wick_ok = wick / math.max(body, syminfo.mintick) >= _wick_mult
    crossed and (body >= _min_body_atr * atrv) and wick_ok

// --- MTF Data Requests (Unchanged) ---
// ... (request.security calls as in v2.7)

// --- Trend Reset Logic (NEW) ---
f_detect_choch_bull(int len) =>
    pivHi = ta.pivothigh(high, len, len)
    var float prevHigh = na
    var string trend = na
    choch_bull = false
    if not na(pivHi)
        if trend == "down" and (na(prevHigh) or pivHi > prevHigh)
            choch_bull := true
        trend := "up"
        prevHigh := pivHi
    choch_bull

f_detect_choch_bear(int len) =>
    pivLo = ta.pivotlow(low, len, len)
    var float prevLow = na
    var string trend = na
    choch_bear = false
    if not na(pivLo)
        if trend == "up" and (na(prevLow) or pivLo < prevLow)
            choch_bear := true
        trend := "down"
        prevLow := pivLo
    choch_bear

reset_choch_bull = request.security(syminfo.tickerid, reset_tf, f_detect_choch_bull(5))
reset_choch_bear = request.security(syminfo.tickerid, reset_tf, f_detect_choch_bear(5))

if reset_choch_bull or reset_choch_bear
    for i = 0 to array.size(flip_zones_5m) - 1
        box.delete(array.get(flip_zones_5m, i).zone_box)
    for i = 0 to array.size(flip_zones_15m) - 1
        box.delete(array.get(flip_zones_15m, i).zone_box)
    array.clear(flip_zones_5m)
    array.clear(flip_zones_15m)

// --- Zone Drawing & Management Function (UPGRADED for Flip Zones, fixed 'inout') ---
// Returns tuple: [zone_box, zone_top, zone_bot, zone_seq, flip_zones_arr]
f_draw_kv_zone(
    direction, is_visible, evt_once, htf_high, htf_low, htf_atr, htf_swing_hi, htf_swing_lo, htf_seq, htf_close, zone_atr_mult, throttle_bars, max_age, border_color, alpha, zone_box, zone_top, zone_bot, zone_seq, flip_zones_arr
) =>
    var box _zone_box = zone_box
    var float _zone_top = zone_top
    var float _zone_bot = zone_bot
    var int _zone_seq = zone_seq
    var array<FlipZone> _flip_zones_arr = array.copy(flip_zones_arr)

    if is_visible and kv_show_zones
        if evt_once and (na(_zone_seq) or (htf_seq - _zone_seq >= throttle_bars))
            box.delete(_zone_box)
            if direction == "bear"
                _zone_top := math.max(htf_high, htf_swing_hi)
                _zone_bot := _zone_top - htf_atr * zone_atr_mult
            else
                _zone_bot := math.min(htf_low, htf_swing_lo)
                _zone_top := _zone_bot + htf_atr * zone_atr_mult
            _zone_seq := htf_seq
            _zone_box := box.new(bar_index, _zone_top, bar_index + 10, _zone_bot, border_color=border_color, bgcolor=color.new(border_color, alpha))
        else if not na(_zone_box)
            box.set_right(_zone_box, bar_index + 10)
            if bar_index > box.get_left(_zone_box) and (direction == "bear" ? htf_close > _zone_top : htf_close < _zone_bot)
                if show_flip_zones
                    line_style = flip_zone_style == "Dotted" ? line.style_dotted : flip_zone_style == "Dashed" ? line.style_dashed : line.style_solid
                    flipped_color = direction == "bear" ? color.green : color.red
                    flipped_box = box.copy(_zone_box)
                    box.set_border_color(flipped_box, flipped_color)
                    box.set_border_style(flipped_box, line_style)
                    box.set_bgcolor(flipped_box, color.new(flipped_color, 85))
                    array.push(_flip_zones_arr, FlipZone.new(flipped_box, direction))
                box.delete(_zone_box)
                _zone_box := na
            if max_age > 0 and (htf_seq - _zone_seq > max_age)
                box.delete(_zone_box)
                _zone_box := na
    else if not na(_zone_box)
        box.delete(_zone_box)
        _zone_box := na

    [_zone_box, _zone_top, _zone_bot, _zone_seq, _flip_zones_arr]

// --- Extend existing Flip Zones (unchanged) ---
extend_flip_zones(array<FlipZone> zones) =>
    if array.size(zones) > 0
        for i = 0 to array.size(zones) - 1
            box.set_right(array.get(zones, i).zone_box, bar_index + 10) // replaced kv_zone_extend with 10 for example

extend_flip_zones(flip_zones_5m)
extend_flip_zones(flip_zones_15m)

// --- Function Calls ---
// Example usage for 5m bear zone (repeat for other calls as needed):
// The following is a valid example call with dummy arguments for illustration.
// Remove or replace with your actual variables as needed.

dummy_box = na
dummy_top = na
dummy_bot = na
dummy_seq = na

[zone_box_5m_bear, kv5_bear_top, kv5_bear_bot, kv5_bear_seq, flip_zones_5m] = f_draw_kv_zone(
    "bear",
    true,
    true,
    100.0,
    90.0,
    2.0,
    105.0,
    85.0,
    1,
    close,
    1.5,
    10,
    100,
    color.red,
    80,
    dummy_box,
    dummy_top,
    dummy_bot,
    dummy_seq,
    flip_zones_5m
)

[zone_box_5m_bull, kv5_bull_top, kv5_bull_bot, kv5_bull_seq, flip_zones_5m] = f_draw_kv_zone(
    "bull",
    true,
    true,
    100.0,
    90.0,
    2.0,
    105.0,
    85.0,
    1,
    close,
    1.5,
    10,
    100,
    color.green,
    80,
    dummy_box,
    dummy_top,
    dummy_bot,
    dummy_seq,
    flip_zones_5m
)