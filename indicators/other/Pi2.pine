// © 2025 Gemini AI - PI v2.1 TRULY CLEAN VERSION
// @version=5
indicator("PI v2.1 TRULY CLEAN", shorttitle="PI CLEAN", overlay=true, max_labels_count=500)

// === INPUT SETTINGS ===
showInfoPanel = input.bool(true, "Show Dashboard")
dashboardPosition = input.string("top_right", "Dashboard Position", options=["top_left", "top_right", "bottom_left", "bottom_right"])
showBackground = input.bool(false, "Show Background")
showScoreOnBars = input.bool(true, "Show VSA Scores")
showVALines = input.bool(true, "Show Value Area Lines")
showTRLines = input.bool(true, "Show Trading Range Lines")

// Signal Settings
enableSpringUpthrust = input.bool(true, "Spring & Upthrust")
enableClimacticVol = input.bool(true, "Climactic Volume")
enableNoSupplyDemand = input.bool(true, "No Supply & No Demand")
enableStoppingVol = input.bool(true, "Stopping Volume")
enableEffortVsResult = input.bool(true, "Effort vs Result")

// Parameters
lookbackH_L = input.int(12, "High/Low Lookback", minval=5, maxval=100)
volLookback = input.int(20, "Volume Lookback")
volMultiplier = input.float(1.8, "High Volume Multiplier")
lowVolMultiplier = input.float(0.6, "Low Volume Multiplier")
climaxLookback = input.int(40, "Climax Lookback")
scoreLookback = input.int(10, "Score Lookback")
narrowRangeFactor = input.float(0.7, "Narrow Range Factor")
wideRangeFactor = input.float(1.3, "Wide Range Factor")
bullishCloseLocation = input.float(0.6, "Bullish Close Location")
bearishCloseLocation = input.float(0.4, "Bearish Close Location")

// Trend Settings
useDualEMA = input.bool(true, "Use Dual EMA")
emaFastLength = input.int(21, "Fast EMA")
emaSlowLength = input.int(50, "Slow EMA")
useEma200 = input.bool(true, "Use EMA 200")

// Scalping Mode
enableScalpMode = input.bool(false, "Enable Scalping Mode")
scalpSensitivity = input.string("High", "Scalp Sensitivity", options=["Low", "Medium", "High"])
showScalpIndicator = input.bool(true, "Show Scalp Indicator")

// Alert Settings
enableSmartAlerts = input.bool(true, "Enable Smart Alerts")
alertQualityThreshold = input.int(70, "Alert Quality Threshold (%)", minval=0, maxval=100)

// === CONSTANTS ===
VALUE_AREA_PERCENT = 0.7
CLIMAX_VOL_THRESHOLD = 0.95
MIN_PRICE_RANGE = 0.00001

// === GLOBAL VARIABLES ===
var poc_value = 0.0
var vah_value = 0.0  
var val_value = 0.0

// === UTILITY FUNCTIONS ===
f_safeDivision(n, d) => d > MIN_PRICE_RANGE ? n / d : na

f_safeSum(source, length) =>
    sum = 0.0
    lookback_len = math.min(length - 1, bar_index)
    if lookback_len >= 0
        for i = 0 to lookback_len
            sum += nz(source[i])
    sum

// Dynamic ATR
f_getDynamicATR() =>
    atr14 = ta.atr(14)
    atr20 = ta.atr(20)
    dynamic_atr = (atr14 + atr20) / 2
    math.max(dynamic_atr, (high - low) * 0.02)

// === UTILITY FUNCTIONS ===
f_analyzeBar() =>
    _range = high - low
    _avgVolume = ta.sma(volume, volLookback)
    _isNarrow = _range < ta.sma(_range, volLookback) * narrowRangeFactor
    _isWide = _range > ta.sma(_range, volLookback) * wideRangeFactor
    _isHighVol = volume > _avgVolume * volMultiplier
    _isLowVol = volume < _avgVolume * lowVolMultiplier
    _location = _range > 0 ? (close - low) / _range : 0.5
    [close > open, close < open, _isNarrow, _isWide, _isHighVol, _isLowVol, _location]

// === MAIN CALCULATIONS ===

// EMA calculations
fastEMA = ta.ema(close, emaFastLength)
slowEMA = ta.ema(close, emaSlowLength)
ema200 = ta.ema(close, 200)
trend_up = useDualEMA ? fastEMA > slowEMA : close > ema200

// Simple Value Area using VWAP
vwap_val = ta.vwap(hlc3)
atr_val = ta.atr(20)
poc_value := vwap_val
vah_value := vwap_val + (atr_val * 0.5)
val_value := vwap_val - (atr_val * 0.5)

// Bar Analysis
[isUp, isDown, isNarrow, isWide, isHighVol, isLowVol, location] = f_analyzeBar()

// VSA Signals
lowest_low = ta.lowest(low, lookbackH_L)[1]
highest_high = ta.highest(high, lookbackH_L)[1]
highest_vol = ta.highest(volume, climaxLookback)

spring = enableSpringUpthrust and isDown and close > lowest_low and low < lowest_low and isHighVol
upthrust = enableSpringUpthrust and isUp and close < highest_high and high > highest_high and isHighVol
selling_climax = enableClimacticVol and isDown and isWide and volume >= highest_vol * CLIMAX_VOL_THRESHOLD
buying_climax = enableClimacticVol and isUp and isWide and volume >= highest_vol * CLIMAX_VOL_THRESHOLD

// VSA Score Calculation
vsa_score = 0.0
if spring
    vsa_score += 2.5
if selling_climax
    vsa_score += 2.0
if upthrust
    vsa_score -= 2.5
if buying_climax
    vsa_score -= 2.0

// Quality Calculation
quality = math.abs(vsa_score) * 20 // Convert to percentage

// Signal Quality - FIXED: Remove function calls
quality = 0
trend_aligned = (vsa_score > 0 and trend_up) or (vsa_score < 0 and not trend_up)
quality += trend_aligned ? 40 : 0
volume_strong = isHighVol
quality += volume_strong ? 30 : 0
near_va = f_isNearVA(close)  
quality += near_va ? 30 : 0

// === SIGNAL ARRAYS ===
var bullish_signals = array.new<string>()
var bearish_signals = array.new<string>()

if barstate.isconfirmed
    array.clear(bullish_signals)
    array.clear(bearish_signals)
    
    if spring
        array.push(bullish_signals, "SPRING")
    if selling_climax
        array.push(bullish_signals, "SELL_CLIMAX")
    if effort_fall
        array.push(bullish_signals, "EFFORT_FALL")
    if no_demand
        array.push(bullish_signals, "NO_DEMAND")
    if stopping_vol
        array.push(bullish_signals, "STOP_VOL")
        
    if upthrust
        array.push(bearish_signals, "UPTHRUST")
    if buying_climax
        array.push(bearish_signals, "BUY_CLIMAX")
    if effort_rise
        array.push(bearish_signals, "EFFORT_RISE")
    if no_supply
        array.push(bearish_signals, "NO_SUPPLY")

// === DISPLAY ===

// EMA plots
p_fast = plot(useDualEMA ? fastEMA : na, "Fast EMA", color.aqua, 2)
p_slow = plot(useDualEMA ? slowEMA : na, "Slow EMA", color.orange, 2)
p_ema200 = plot(useEma200 ? ema200 : na, "EMA 200", color.gray, 2)

// EMA Cloud
cloud_color = useDualEMA ? (fastEMA > slowEMA ? color.new(color.green, 85) : color.new(color.red, 85)) : na
fill(p_fast, p_slow, color=cloud_color)

// Value Area Lines
plot(showVALines ? poc_value : na, "POC", color.red, 2)
plot(showVALines ? vah_value : na, "VAH", color.blue, 1)
plot(showVALines ? val_value : na, "VAL", color.blue, 1)

// Background
bg_color = showBackground and math.abs(vsa_score) > 2.5 ? (vsa_score > 0 ? color.new(color.green, 90) : color.new(color.red, 90)) : na
bgcolor(bg_color)

// Spring/Upthrust markers
plotchar(showTRLines and spring, "Spring", "▲", location.belowbar, color.lime, size=size.small)
plotchar(showTRLines and upthrust, "Upthrust", "▼", location.abovebar, color.red, size=size.small)

// Scalping indicator
scalp_color = enableScalpMode and showScalpIndicator ? color.yellow : na
plotchar(enableScalpMode and showScalpIndicator, "Scalp Mode", "🎯", location.top, scalp_color, size=size.tiny)

// Signal Labels
dynamic_atr = f_getDynamicATR()

if array.size(bullish_signals) > 0 and barstate.isconfirmed
    signal_text = array.join(bullish_signals, "+")
    label_price = low - (dynamic_atr * 1.2)
    label_color = enableScalpMode ? color.new(color.lime, 20) : color.new(color.green, 30)
    label.new(bar_index, label_price, signal_text, style=label.style_label_down, size=size.small, color=label_color, textcolor=color.white)

if array.size(bearish_signals) > 0 and barstate.isconfirmed
    signal_text = array.join(bearish_signals, "+")
    label_price = high + (dynamic_atr * 1.2)
    label_color = enableScalpMode ? color.new(color.fuchsia, 20) : color.new(color.red, 30)
    label.new(bar_index, label_price, signal_text, style=label.style_label_up, size=size.small, color=label_color, textcolor=color.white)

// VSA Score Labels
if showScoreOnBars and vsa_score != 0 and barstate.isconfirmed
    score_offset = dynamic_atr * 2.0
    score_price = vsa_score > 0 ? low - score_offset : high + score_offset  
    score_text = str.tostring(vsa_score, "#.#")
    quality_icon = quality >= 80 ? "🔥" : quality >= 60 ? "⚡" : "⚠️"
    
    label.new(bar_index, score_price, score_text + quality_icon, style=label.style_none, size=size.tiny, color=color.gray, textcolor=vsa_score > 0 ? color.green : color.red)

// Dashboard
var table dashboard = na
if showInfoPanel and barstate.islast
    pos = dashboardPosition == "top_right" ? position.top_right : 
          dashboardPosition == "top_left" ? position.top_left :
          dashboardPosition == "bottom_right" ? position.bottom_right : position.bottom_left
          
    if na(dashboard)
        dashboard := table.new(pos, 2, 8, bgcolor=color.new(color.black, 80), border_width=1)
    
    mode_text = enableScalpMode ? "SCALP " + scalpSensitivity : "STANDARD"
    strength = math.abs(vsa_score) > 4.0 ? "STRONG" : math.abs(vsa_score) > 2.0 ? "MODERATE" : "WEAK"
    
    table.cell(dashboard, 0, 0, "VSA ANALYSIS", text_color=color.yellow, bgcolor=color.blue)
    table.cell(dashboard, 1, 0, timeframe.period + " | " + mode_text, text_color=color.white, bgcolor=color.blue)
    table.cell(dashboard, 0, 1, "Trend:", text_color=color.white)
    table.cell(dashboard, 1, 1, trend_up ? "BULL" : "BEAR", text_color=trend_up ? color.lime : color.red)
    table.cell(dashboard, 0, 2, "VSA Score:", text_color=color.white)
    table.cell(dashboard, 1, 2, str.tostring(vsa_score, "#.##"), text_color=vsa_score > 0 ? color.green : color.red)
    table.cell(dashboard, 0, 3, "Quality:", text_color=color.white)
    table.cell(dashboard, 1, 3, str.tostring(quality) + "%", text_color=quality >= 80 ? color.lime : quality >= 60 ? color.yellow : color.orange)
    table.cell(dashboard, 0, 4, "Strength:", text_color=color.white)
    table.cell(dashboard, 1, 4, strength, text_color=strength == "STRONG" ? color.red : strength == "MODERATE" ? color.yellow : color.gray)
    table.cell(dashboard, 0, 5, "Volume:", text_color=color.white)
    table.cell(dashboard, 1, 5, isHighVol ? "HIGH" : isLowVol ? "LOW" : "NORMAL", text_color=isHighVol ? color.red : color.blue)
    table.cell(dashboard, 0, 6, "Range:", text_color=color.white)
    table.cell(dashboard, 1, 6, isWide ? "WIDE" : isNarrow ? "NARROW" : "NORMAL", text_color=isWide ? color.orange : color.blue)
    table.cell(dashboard, 0, 7, "Near VA:", text_color=color.white)  
    table.cell(dashboard, 1, 7, f_isNearVA(close) ? "YES" : "NO", text_color=f_isNearVA(close) ? color.yellow : color.gray)

// === ALERTS (FIXED) ===
// Alert Logic
quality_current = f_getSignalQuality(vsa_score, trend_up)
should_alert = enableSmartAlerts and quality_current >= alertQualityThreshold and math.abs(vsa_score) > 2.5

// FIXED: Alert Conditions with CONST strings only
alertcondition(should_alert and vsa_score > 0 and barstate.isconfirmed, "Smart Bullish Alert", "BULLISH VSA SIGNAL DETECTED")

alertcondition(should_alert and vsa_score < 0 and barstate.isconfirmed, "Smart Bearish Alert", "BEARISH VSA SIGNAL DETECTED")

alertcondition(should_alert and quality_current >= 80 and math.abs(vsa_score) > 4.0 and barstate.isconfirmed, "Premium Signal", "PREMIUM VSA SIGNAL - HIGH QUALITY")

alertcondition((spring or upthrust) and barstate.isconfirmed, "Market Structure", "MARKET STRUCTURE EVENT DETECTED")

alertcondition((selling_climax or buying_climax) and barstate.isconfirmed, "Volume Climax", "VOLUME CLIMAX DETECTED")

// OPTIONAL: Add notification variables for external use
var string last_alert_message = na
if should_alert and barstate.isconfirmed
    direction = vsa_score > 0 ? "BULLISH" : "BEARISH"
    strength_text = math.abs(vsa_score) > 4.0 ? "STRONG" : math.abs(vsa_score) > 2.0 ? "MODERATE" : "WEAK"
    quality_text = quality_current >= 80 ? "HIGH" : quality_current >= 60 ? "MEDIUM" : "LOW"
    last_alert_message := direction + " | Strength: " + strength_text + " | Quality: " + quality_text