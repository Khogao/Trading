// © 2025 Gemini AI - Phi's Trade System VSA (v14.1 Syntax Fix)
// @version=5
// THAY ĐỔI: Sửa lỗi cú pháp nghiêm trọng trong hàm getTimeframeLookback.
indicator("PI v14.1 (Syntax Fix)", shorttitle="PI v14.1", overlay=true, max_labels_count=500)

// --- PHẦN 0: CÁC HÀM TÙY CHỈNH ---
f_manualSum(source, length) =>
    _sum = 0.0
    for i = 0 to length - 1
        _sum += nz(source[i])
    _sum

// --- PHẦN 1: BẢNG ĐIỀU KHIỂN & CÀI ĐẶT ---
var string GRP_DISPLAY = "Cai Dat Hien Thi"
showScoreOnBars = input.bool(false, title="Hien Thi Score Duoi Moi Nen", group=GRP_DISPLAY, tooltip="Bật tính năng này sẽ hiển thị điểm VSA ngay dưới mỗi cây nến.")
scoreLabelOffset = input.float(0.5, title="     Do lech cua nhan Score", group=GRP_DISPLAY, tooltip="Giá trị càng lớn, nhãn Score càng bị đẩy xuống thấp hơn. Dựa trên chiều cao của nến (ATR).")
strongScoreBg = input.float(3.0, title="Nguong Score de To Mau Nen", group=GRP_DISPLAY, tooltip="Khi VSA Score vượt qua ngưỡng này, nền sẽ được tô màu Xanh/Đỏ nhạt.")
textColorOption = input.string("Den", title="Mau Chu Cho Bang", options=["Den", "Trang"], group=GRP_DISPLAY)
var color dynamicTextColor = textColorOption == "Den" ? color.black : color.white
showInfoPanel = input.bool(true, title="Bat/Tat Bang Thong Tin", group=GRP_DISPLAY)
showLegend = input.bool(true, title="Bat/Tat Bang Chu Giai", group=GRP_DISPLAY, inline="legend")
legendPositionOption = input.string("Trai Duoi", title="Vi Tri", options=["Trai Tren", "Phai Tren", "Trai Duoi", "Phai Duoi"], group=GRP_DISPLAY, inline="legend")

var string GRP_VP = "Dynamic Value Area (Thich Ung)"
showVALines = input.bool(true, title="Bat/Tat Duong POC, VAH, VAL", group=GRP_VP)
useAutoLookback = input.bool(true, title="Tu Dong Chon Lookback", group=GRP_VP)
vpLookback_1m = input.int(30, title="Lookback cho 1m", group=GRP_VP, inline="tf_1m")
vpLookback_5m = input.int(15, title="cho 5m", group=GRP_VP, inline="tf_5m")
vpLookback_15m = input.int(20, title="cho 15m", group=GRP_VP, inline="tf_15m")
vpLookback_manual = input.int(240, title="Lookback Thu Cong", group=GRP_VP)
vpProximityPercent = input.float(0.2, title="Bien do Tim kiem quanh duong VA (%)", group=GRP_VP, minval=0.01, step=0.05)

var string GRP_TR_LINES = "Duong Trading Range"
showTRLines = input.bool(true, title="Bat/Tat Ve Duong S/R", group=GRP_TR_LINES)
trLineOffset = input.int(10, title="Do dai ke duong sang phai (so nen)", group=GRP_TR_LINES)
maxSrLines = input.int(50, title="So luong duong S/R toi da", group=GRP_TR_LINES, tooltip="Giới hạn số lượng đường Hỗ trợ/Kháng cự được vẽ để tránh làm chậm biểu đồ.")

var string GRP_SIGNALS = "Cac Tin Hieu VSA"
showSpringUpthrust = input.bool(true, title="Bat/Tat: Spring & Upthrust", group=GRP_SIGNALS)
showNoSupplyDemand = input.bool(true, title="Bat/Tat: No Supply & No Demand", group=GRP_SIGNALS)
showClimacticVol = input.bool(true, title="Bat/Tat: Volume Cuc Dai (Climax)", group=GRP_SIGNALS)
showStoppingVol = input.bool(true, title="Bat/Tat: Khoi Luong Chan Da (Stopping Vol)", group=GRP_SIGNALS)
showEffortVsResult = input.bool(true, title="Bat/Tat: No Luc vs. Ket Qua (Effort)", group=GRP_SIGNALS)

var string GRP_PARAMS = "Tham So Tinh Toan"
lookback_input = input.int(20, title="Do dai tim Kiem H/K", group=GRP_PARAMS)
volMultiplier_input = input.float(2.0, title="He so Volume Dot Bien", group=GRP_PARAMS)
lowVolMultiplier_input = input.float(0.5, title="He so Volume Can Kiet", group=GRP_PARAMS)
climaxLookback_input = input.int(50, title="Do dai tim Volume Cuc Dai", group=GRP_PARAMS)
scoreLookback_input = input.int(20, title="Do dai tinh Diem VSA", group=GRP_PARAMS)

var string GRP_TREND = "Bo Loc Xu Huong"
useTrendFilter = input.bool(true, title="Bat/Tat: Bo loc Xu Huong (EMA)", group=GRP_TREND)
emaLength = input.int(200, title="Do dai EMA Xu Huong", group=GRP_TREND)

var string GRP_ALERTS = "He Thong Canh Bao"
enableAlerts = input.bool(true, title="Bat/Tat Tat Ca Canh Bao", group=GRP_ALERTS)
alertOnStrong = input.bool(true, title="Canh bao cho Tin Hieu Manh (SPR, UT...)", group=GRP_ALERTS)
alertOnVATouch = input.bool(false, title="Canh bao khi Gia cham Vung Gia tri", group=GRP_ALERTS)

// --- PHẦN 1.1: VALIDATE INPUTS & TỐI ƯU TIMEFRAME ---
validateInputs() =>
    _lookback = math.max(1, math.min(lookback_input, 500))
    _volMultiplier = math.max(0.1, math.min(volMultiplier_input, 10.0))
    _lowVolMultiplier = math.max(0.1, math.min(lowVolMultiplier_input, 5.0))
    _climaxLookback = math.max(5, math.min(climaxLookback_input, 200))
    _scoreLookback = math.max(1, math.min(scoreLookback_input, 100))
    [_lookback, _volMultiplier, _lowVolMultiplier, _climaxLookback, _scoreLookback]
[lookback, volMultiplier, lowVolMultiplier, climaxLookback, scoreLookback] = validateInputs()

// SỬA LỖI: Viết lại hàm bằng cú pháp toán tử ba ngôi (? :) cho chính xác.
getTimeframeLookback() =>
    string tf = timeframe.period
    str.contains(tf, "S") or tf == "1" ? vpLookback_1m : 
      tf == "5" ? vpLookback_5m : 
      tf == "15" ? vpLookback_15m : 
      vpLookback_manual
int vpLookback = useAutoLookback ? getTimeframeLookback() : vpLookback_manual

// --- PHẦN 1.2: CÁC HÀM QUẢN LÝ & CẢI TIẾN ---
var array<line> srLines = array.new<line>()
var array<label> srLabels = array.new<label>()
manageDrawings(line newLine, label newLabel) =>
    if array.size(srLines) >= maxSrLines
        line.delete(array.shift(srLines))
        label.delete(array.shift(srLabels))
    array.push(srLines, newLine)
    array.push(srLabels, newLabel)

calculateWeightedScore(float baseScore, float vol, float avgVol) =>
    float volumeWeight = vol > avgVol * 2 ? 1.5 : vol > avgVol * 1.5 ? 1.2 : 1.0
    baseScore * volumeWeight

// --- PHẦN 2: TÍNH TOÁN CÁC CHỈ BÁO ---
float lookback_high = ta.highest(high, vpLookback)
float lookback_low = ta.lowest(low, vpLookback)
barRange = high - low
avgVolume = ta.sma(volume, lookback)
closeLocation = (close - low) / (barRange > 0 ? barRange : 1)
trendEma = ta.ema(close, emaLength)
bullishSignal = 0.0, bearishSignal = 0.0
isDownBar = close < open, isUpBar = close > open
plotRightOffset = bar_index + trLineOffset

// --- PHẦN 2.1: KHỞI TẠO VÀ TÍNH TOÁN VALUE AREA ---
var float dPOC = na, var float dVAH = na, var float dVAL = na
var array<float> price_rows = array.new<float>()
var array<float> volume_rows = array.new<float>()
isNearVA(price) =>
    if na(dPOC) or na(dVAH) or na(dVAL)
        false 
    else
        pocDiff = math.abs(price - dPOC) / dPOC * 100
        vahDiff = math.abs(price - dVAH) / dVAH * 100
        valDiff = math.abs(price - dVAL) / dVAL * 100
        (pocDiff < vpProximityPercent) or (vahDiff < vpProximityPercent) or (valDiff < vpProximityPercent)

if barstate.islast and showVALines
    int rowCount = 200
    array.clear(price_rows), array.clear(volume_rows)
    float step_price = (lookback_high - lookback_low) / (rowCount - 1)
    if step_price > 0
        for i = 0 to rowCount - 1
            array.push(price_rows, lookback_low + step_price * i), array.push(volume_rows, 0)
        total_volume = 0.0
        for i = 0 to vpLookback - 1
            vol = volume[i], price = (high[i] + low[i]) / 2, total_volume += vol
            int price_row_index = math.round((price - lookback_low) / step_price)
            if price_row_index >= 0 and price_row_index < rowCount
                array.set(volume_rows, price_row_index, array.get(volume_rows, price_row_index) + vol)
        float poc_volume = array.max(volume_rows), int poc_index = array.indexof(volume_rows, poc_volume)
        dPOC := array.get(price_rows, poc_index)
        float va_volume_target = total_volume * 0.7, float va_volume_current = poc_volume
        int up_index = poc_index + 1, int down_index = poc_index - 1
        while va_volume_current < va_volume_target and (up_index < rowCount or down_index >= 0)
            vol_up = up_index < rowCount ? array.get(volume_rows, up_index) : 0, vol_down = down_index >= 0 ? array.get(volume_rows, down_index) : 0
            if vol_up == 0 and vol_down == 0
                break
            if vol_up > vol_down
                va_volume_current += vol_up, up_index += 1
            else
                va_volume_current += vol_down, down_index -= 1
        dVAH := array.get(price_rows, math.min(rowCount - 1, up_index - 1)), dVAL := array.get(price_rows, math.max(0, down_index + 1))

// --- PHẦN 3: LOGIC TÍN HIỆU VSA ---
color springColor = color.new(#00ff88, 0), color upthrustColor = color.new(#ff4444, 0), color climaxColor = color.new(#ffaa00, 0), color neutralColor = color.new(#888888, 50), color stoppingVolColor = color.new(#33bbff,0), color effortColor = color.new(#ff7700,0)

lowestLow = ta.lowest(low, lookback)[1]
isSpring = low < lowestLow and close > lowestLow and volume > (avgVolume * volMultiplier)
if (showSpringUpthrust and isSpring)
    bullishSignal := calculateWeightedScore(2.0, volume, avgVolume)
    string signalText = barstate.islast and showVALines and isNearVA(low) ? "SPR ⭐" : "SPR"
    label.new(bar_index, low, yloc=yloc.belowbar, text=signalText, style=label.style_none, textcolor=springColor, size=size.normal)
    if showTRLines
        line newLine = line.new(bar_index, low, plotRightOffset, low, color=color.new(springColor, 20), width=2)
        label newLabel = label.new(plotRightOffset, low, text="Hỗ trợ tiềm năng", style=label.style_none, textcolor=springColor, size=size.small, yloc=yloc.price)
        manageDrawings(newLine, newLabel)

highestHigh = ta.highest(high, lookback)[1]
isUpthrust = high > highestHigh and close < highestHigh and volume > (avgVolume * volMultiplier)
if (showSpringUpthrust and isUpthrust)
    bearishSignal := calculateWeightedScore(-2.0, volume, avgVolume)
    string signalText = barstate.islast and showVALines and isNearVA(high) ? "UT ⭐" : "UT"
    label.new(bar_index, high, yloc=yloc.abovebar, text=signalText, style=label.style_none, textcolor=upthrustColor, size=size.normal)
    if showTRLines
        line newLine = line.new(bar_index, high, plotRightOffset, high, color=color.new(upthrustColor, 20), width=2)
        label newLabel = label.new(plotRightOffset, high, text="Kháng cự tiềm năng", style=label.style_none, textcolor=upthrustColor, size=size.small, yloc=yloc.price)
        manageDrawings(newLine, newLabel)

isClimacticVol = volume == ta.highest(volume, climaxLookback)
if (showClimacticVol and isClimacticVol)
    if (isDownBar)
        bullishSignal := math.max(bullishSignal, calculateWeightedScore(1.5, volume, avgVolume))
        string signalText = barstate.islast and showVALines and isNearVA(low) ? "SC ⭐" : "SC"
        label.new(bar_index, low, yloc=yloc.belowbar, text=signalText, style=label.style_none, textcolor=climaxColor, size=size.normal)
        if showTRLines
            line newLine = line.new(bar_index, low, plotRightOffset, low, color=color.new(climaxColor, 20), width=2)
            label newLabel = label.new(plotRightOffset, low, text="Hỗ trợ tiềm năng (SC)", style=label.style_none, textcolor=climaxColor, size=size.small, yloc=yloc.price)
            manageDrawings(newLine, newLabel)
    else
        bearishSignal := math.min(bearishSignal, calculateWeightedScore(-1.5, volume, avgVolume))
        string signalText = barstate.islast and showVALines and isNearVA(high) ? "BC ⭐" : "BC"
        label.new(bar_index, high, yloc=yloc.abovebar, text=signalText, style=label.style_none, textcolor=climaxColor, size=size.normal)
        if showTRLines
            line newLine = line.new(bar_index, high, plotRightOffset, high, color=color.new(climaxColor, 20), width=2)
            label newLabel = label.new(plotRightOffset, high, text="Kháng cự tiềm năng (BC)", style=label.style_none, textcolor=climaxColor, size=size.small, yloc=yloc.price)
            manageDrawings(newLine, newLabel)

isNarrowRange = barRange < ta.sma(barRange, lookback) * 0.7, isLowVolume = volume < (avgVolume * lowVolMultiplier)
isNoSupply = isDownBar and isNarrowRange and isLowVolume
if (showNoSupplyDemand and isNoSupply)
    bullishSignal := math.max(bullishSignal, 1.0), label.new(bar_index, na, yloc=yloc.abovebar, text="NS", style=label.style_none, textcolor=neutralColor, size=size.small)
isNoDemand = isUpBar and isNarrowRange and isLowVolume
if (showNoSupplyDemand and isNoDemand)
    bearishSignal := math.min(bearishSignal, -1.0), label.new(bar_index, na, yloc=yloc.abovebar, text="ND", style=label.style_none, textcolor=neutralColor, size=size.small)
isStoppingVol = isDownBar and volume > (avgVolume * volMultiplier) and closeLocation > 0.5
if (showStoppingVol and isStoppingVol)
    bullishSignal := math.max(bullishSignal, calculateWeightedScore(2.0, volume, avgVolume)), label.new(bar_index, na, yloc=yloc.belowbar, text="StV", style=label.style_none, textcolor=stoppingVolColor, size=size.normal)
isEffortFailRise = isUpBar and volume > (avgVolume * volMultiplier) and isNarrowRange
if (showEffortVsResult and isEffortFailRise)
    bearishSignal := math.min(bearishSignal, calculateWeightedScore(-2.0, volume, avgVolume)), label.new(bar_index, na, yloc=yloc.abovebar, text="EFR", style=label.style_none, textcolor=effortColor, size=size.normal)
isEffortFailFall = isDownBar and volume > (avgVolume * volMultiplier) and isNarrowRange
if (showEffortVsResult and isEffortFailFall)
    bullishSignal := math.max(bullishSignal, calculateWeightedScore(2.0, volume, avgVolume)), label.new(bar_index, na, yloc=yloc.belowbar, text="EFF", style=label.style_none, textcolor=effortColor, size=size.normal)

// --- PHẦN 4: TÍNH TOÁN VÀ HIỂN THỊ SCORE ---
barScore = bullishSignal + bearishSignal
vsaScore = f_manualSum(barScore, scoreLookback)

if showScoreOnBars
    scoreColor = vsaScore > 0 ? color.new(color.green, 10) : vsaScore < 0 ? color.new(color.red, 10) : color.new(color.gray, 10)
    yPosition = low - ta.tr * scoreLabelOffset
    label.new(bar_index, yPosition, str.tostring(vsaScore, "#.#"), yloc=yloc.price, style=label.style_none, textcolor=scoreColor, size=size.small)

bgcolor(vsaScore >= strongScoreBg ? color.new(color.green, 95) : vsaScore <= -strongScoreBg ? color.new(color.red, 95) : na, title="Strong Signal BG")

// --- PHẦN 5: HIỂN THỊ CÁC THÀNH PHẦN TĨNH ---
var line pocLine = na, var line vahLine = na, var line valLine = na
if barstate.islast
    if showVALines
        line.delete(pocLine), line.delete(vahLine), line.delete(valLine)
        pocLine := line.new(bar_index - vpLookback, dPOC, bar_index, dPOC, color=color.new(color.yellow, 25), width=2)
        vahLine := line.new(bar_index - vpLookback, dVAH, bar_index, dVAH, color=color.new(color.red, 25), width=2)
        valLine := line.new(bar_index - vpLookback, dVAL, bar_index, dVAL, color=color.new(color.green, 25), width=2)
    
    var table legendTable = na, var table infoTable = na
    table.delete(infoTable), table.delete(legendTable)
    if showInfoPanel
        infoTable := table.new(position.top_right, 1, 5, bgcolor=color.new(color.black, 25), border_width=1) 
        bool isUptrend = close > trendEma
        string trendContext = useTrendFilter ? (isUptrend ? "Up" : "Down") : "N/A"
        string biasText = vsaScore > 0 ? "Buy Pressure" : vsaScore < 0 ? "Sell Pressure" : "Neutral"
        color scoreColorInTable = vsaScore > 0 ? color.green : vsaScore < 0 ? color.red : dynamicTextColor
        string volStatus = volume > avgVolume * 1.5 ? "High" : volume < avgVolume * 0.7 ? "Low" : "Normal"
        float momentum = ta.roc(close, 10)
        string momentumText = momentum > 0.2 ? "Strong Up" : momentum < -0.2 ? "Strong Down" : "Sideways"
        
        table.cell(infoTable, 0, 0, "Trend: " + trendContext, text_color=dynamicTextColor, text_halign=text.align_left)
        table.cell(infoTable, 0, 1, "Bias: " + biasText, text_color=dynamicTextColor, text_halign=text.align_left)
        table.cell(infoTable, 0, 2, "Score: " + str.tostring(vsaScore, "#.##"), text_color=scoreColorInTable, text_halign=text.align_left)
        table.cell(infoTable, 0, 3, "Volume: " + volStatus, text_color=dynamicTextColor, text_halign=text.align_left)
        table.cell(infoTable, 0, 4, "Momentum: " + momentumText, text_color=dynamicTextColor, text_halign=text.align_left)

    if showLegend
        var _position = position.bottom_left
        if legendPositionOption == "Trai Tren"
            _position := position.top_left
        else if legendPositionOption == "Phai Tren"
            _position := position.top_right
        else if legendPositionOption == "Trai Duoi"
            _position := position.bottom_left
        else if legendPositionOption == "Phai Duoi"
            _position := position.bottom_right
        legendTable := table.new(_position, 2, 7, bgcolor=color.new(color.gray, 80), border_width=1) // Giảm số hàng
        table.cell(legendTable, 0, 0, "VIET TAT", text_color=dynamicTextColor, text_halign=text.align_center), table.cell(legendTable, 1, 0, "Y NGHIA", text_color=dynamicTextColor, text_halign=text.align_center)
        table.cell(legendTable, 0, 1, "SPR", text_color=springColor), table.cell(legendTable, 1, 1, "Spring", text_color=dynamicTextColor)
        table.cell(legendTable, 0, 2, "UT", text_color=upthrustColor), table.cell(legendTable, 1, 2, "Upthrust", text_color=dynamicTextColor)
        table.cell(legendTable, 0, 3, "SC/BC", text_color=climaxColor), table.cell(legendTable, 1, 3, "Climax", text_color=dynamicTextColor)
        table.cell(legendTable, 0, 4, "StV", text_color=stoppingVolColor), table.cell(legendTable, 1, 4, "Stopping Volume", text_color=dynamicTextColor)
        table.cell(legendTable, 0, 5, "NS/ND", text_color=neutralColor), table.cell(legendTable, 1, 5, "No Supply/Demand", text_color=dynamicTextColor)
        table.cell(legendTable, 0, 6, "EFR/EFF", text_color=effortColor), table.cell(legendTable, 1, 6, "Effort vs. Result", text_color=dynamicTextColor)

// --- PHẦN 7: HỆ THỐNG CẢNH BÁO ---
bool strongBullish = barScore >= 2.0
bool strongBearish = barScore <= -2.0
bool priceNearVA = isNearVA(close)

if enableAlerts
    if alertOnStrong and strongBullish[1] == false and strongBullish
        alert("VSA: Tin Hieu Mua Manh", alert.freq_once_per_bar)
    if alertOnStrong and strongBearish[1] == false and strongBearish
        alert("VSA: Tin Hieu Ban Manh", alert.freq_once_per_bar)
    if alertOnVATouch and priceNearVA[1] == false and priceNearVA
        alert("VSA: Gia dang o Vung Gia Tri", alert.freq_once_per_bar)