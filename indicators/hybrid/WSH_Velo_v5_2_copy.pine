//@version=5
// Wyckoff-SMC Hybrid v5.2 - Patched & Upgraded
indicator("Wyckoff-SMC Hybrid [v5.2 Patched]", "WSH v5.2", overlay=true, max_labels_count=500, max_boxes_count=200)

// =============================================================================
// I. INPUTS — giữ nguyên cốt lõi WSH + thêm nhẹ cho scalper
// =============================================================================
// --- 0. General Settings ---
style_group = "0. General Settings"  // removed corrupted suffix containing 'Ê'
core_group  = "1. Wyckoff Core Engine"
poi_struct_group = "2. POI & Structural"
entry_group = "3. Entry & Risk"
risk_group  = entry_group
scalp_group = "4. Scalper Filters"
score_group = "5. Scoring"
trading_style = input.string(
     defval="Scalping",
     title="Trading Style",
     options=["Day/Swing Trading", "Scalping"],
     group=style_group,
     tooltip="Tự động áp dụng các thông số phù hợp cho phong cách giao dịch của bạn."
)
color_candles = input.bool(true, "Color Candles by Momentum (EMA21)?", group=style_group)
show_wyckoff_labels = input.bool(true, "Show Event Labels", group=core_group)
// --- 1. Wyckoff Core Engine ---
show_bg    = input.bool(true, title="Show Phase Background", group=core_group)
show_wyckoff_labels = input.bool(true, title="Show Event Labels (SC, SP..)", group=core_group)
analysis_mode = input.string(
    trading_style == "Scalping" ? "Micro" : "Macro",
    "Analysis Mode",
    options=["Macro", "Micro"],
    group=core_group,
    tooltip="Macro: Logic Wyckoff đầy đủ.\nMicro: Logic tăng tốc dựa trên Sweep."
)
// --- 2. Points of Interest (POI) (GIỮ NGUYÊN) ---
// --- Parameter Presets based on Trading Style ---
is_scalping = trading_style == "Scalping"
vol_lookback_def = is_scalping ? 30 : 50
vol_mult_def     = is_scalping ? 1.8 : 2.2
range_mult_def   = is_scalping ? 1.6 : 2.0
pivot_len_def    = is_scalping ? 4 : 8
micro_range_len_def = is_scalping ? 40 : 100

// --- POI & Structural Inputs ---
kv_wick_mult   = input.float(1.0, "KV Wick/Body Min Ratio", minval=0.1, step=0.1, group=poi_struct_group)
vol_lookback   = input.int(vol_lookback_def, "Volume Lookback", minval=10, group=core_group)
vol_mult       = input.float(vol_mult_def, "Volume Spike Multiplier", minval=1.0, step=0.1, group=core_group)
range_mult     = input.float(range_mult_def, "Climax Candle Range Multiplier", minval=1.0, step=0.1, group=core_group)
atr_len        = input.int(14, "ATR Length", group=core_group)
micro_cooldown = input.int(5, "Micro Phase Cooldown (bars)", group=core_group, tooltip="Số nến tối thiểu một pha Micro phải tồn tại trước khi reset.")
pivot_len      = input.int(pivot_len_def, "Pivot Lookback", minval=2, group=poi_struct_group)
show_kv_zones  = input.bool(true, "Show Key Level (KV) Zones", group=poi_struct_group)
show_ob_zones  = input.bool(true, "Show Order Block (OB) Zones", group=poi_struct_group)
show_sw_hl     = input.bool(true, "Show Strong/Weak Highs & Lows", group=poi_struct_group)
poi_extend_bars = input.int(100, "Extend POI (bars)", group=poi_struct_group)
poi_max_active_zones = input.int(10, "Max Active POI zones", group=poi_struct_group)

// --- 3. Entry & Risk ---
entry_group = "3. Entry & Risk"
show_sl_on_signal = input.bool(true, "Show SL/TP Levels on Signal", group=entry_group)
show_entries = input.bool(true, "Show Final Buy/Sell Entries", group=entry_group)
show_traps = input.bool(true, "Show NS/ND Signals", group=entry_group)
entry_throttle = input.int(10, "Entry Signal Throttle (bars)", group=entry_group)
htf_confirm_tf = input.string("240", "HTF EMA Timeframe", group=entry_group, options=["60", "240", "D"])
use_momentum_filter = input.bool(true, "Use EMA21 Momentum Filter for Entry?", group=entry_group)
show_risk_levels = input.bool(false, "Show SL/TP Levels", group=entry_group)
sl_atr_mult = input.float(1.5, "Stop Loss ATR Multiplier", group=entry_group, step=0.1)
tp1_atr_mult = input.float(2.0, "Take Profit 1 ATR Multiplier", group=entry_group, step=0.1)
tp2_atr_mult = input.float(3.0, "Take Profit 2 ATR Multiplier", group=entry_group, step=0.1)
useRegime = input.bool(true, "Regime filter (ATR% + optional ADX)", group=scalp_group)
minATRpct = input.float(0.50, "Min ATR14 % price (crypto scalp)", step=0.05, group=scalp_group)
// =============================================================================
// II. CORE LOGIC
// =============================================================================
// --- Data & State ---
useADX = input.bool(false, "Use ADX filter", group=scalp_group)
minADX = input.int(18, "ADX threshold", minval=10, maxval=50, group=scalp_group)
session_start_utc = input.int(13, "Session start (UTC)", minval=0, maxval=23, group=scalp_group)

vol_sma = ta.sma(volume, vol_lookback)
atr_val = ta.atr(atr_len)

var int   phase = 0 // 0:Neutral, 1:TR, 2:Accum, 3:Distrib
var float tr_high = na
var float tr_low = na
var int tr_start_bar = na
var int last_event_bar = na
var int last_spring_bar = na
var int last_ut_bar = na
var int last_sos_bar = na
var int last_sow_bar = na
var float strong_high = na
var float strong_low = na
var box[]  box_array = array.new_box(0)
var bool[] box_is_bull_array = array.new_bool(0)
var int micro_last_event_bar = na

use1H = input.bool(true, "Use 1H", group=scalp_group)
//@version=5
// Wyckoff-SMC Hybrid v5.2 - Cleaned copy (corrupted original repaired)
indicator("Wyckoff-SMC Hybrid [v5.2 Patched] (cleaned)", "WSH v5.2", overlay=true, max_labels_count=500, max_boxes_count=200)

// I. INPUTS
style_group = "0. General Settings"
core_group  = "1. Wyckoff Core Engine"
poi_struct_group = "2. POI & Structural"
entry_group = "3. Entry & Risk"
scalp_group = "4. Scalper Filters"
score_group = "5. Scoring"

trading_style = input.string(defval="Scalping", title="Trading Style", options=["Day/Swing Trading", "Scalping"], group=style_group)
color_candles = input.bool(true, "Color Candles by Momentum (EMA21)?", group=style_group)
show_wyckoff_labels = input.bool(true, "Show Event Labels", group=core_group)
show_bg = input.bool(true, "Show Phase Background", group=core_group)
analysis_mode = input.string(trading_style == "Scalping" ? "Micro" : "Macro", "Analysis Mode", options=["Macro","Micro"], group=core_group)

// POI presets
is_scalping = trading_style == "Scalping"
vol_lookback_def = is_scalping ? 30 : 50
vol_mult_def     = is_scalping ? 1.8 : 2.2
range_mult_def   = is_scalping ? 1.6 : 2.0
pivot_len_def    = is_scalping ? 4 : 8
micro_range_len_def = is_scalping ? 40 : 100

// POI & Structural Inputs
kv_wick_mult   = input.float(1.0, "KV Wick/Body Min Ratio", minval=0.1, step=0.1, group=poi_struct_group)
vol_lookback   = input.int(vol_lookback_def, "Volume Lookback", minval=10, group=poi_struct_group)
vol_mult       = input.float(vol_mult_def, "Volume Spike Multiplier", minval=1.0, step=0.1, group=poi_struct_group)
range_mult     = input.float(range_mult_def, "Climax Candle Range Multiplier", minval=1.0, step=0.1, group=poi_struct_group)
atr_len        = input.int(14, "ATR Length", group=poi_struct_group)
micro_cooldown = input.int(5, "Micro Phase Cooldown (bars)", group=poi_struct_group)
pivot_len      = input.int(pivot_len_def, "Pivot Lookback", minval=2, group=poi_struct_group)
show_kv_zones  = input.bool(true, "Show Key Level (KV) Zones", group=poi_struct_group)
show_ob_zones  = input.bool(true, "Show Order Block (OB) Zones", group=poi_struct_group)
show_sw_hl     = input.bool(true, "Show Strong/Weak Highs & Lows", group=poi_struct_group)
poi_extend_bars = input.int(100, "Extend POI (bars)", group=poi_struct_group)
poi_max_active_zones = input.int(10, "Max Active POI zones", group=poi_struct_group)

// Entry & Risk (clean)
show_sl_on_signal = input.bool(true, "Show SL/TP Levels on Signal", group=entry_group)
show_entries = input.bool(true, "Show Final Buy/Sell Entries", group=entry_group)
show_traps = input.bool(true, "Show NS/ND Signals", group=entry_group)
entry_throttle = input.int(10, "Entry Signal Throttle (bars)", group=entry_group)
htf_confirm_tf = input.string("240", "HTF EMA Timeframe", group=entry_group, options=["60","240","D"])
use_momentum_filter = input.bool(true, "Use EMA21 Momentum Filter for Entry?", group=entry_group)
show_risk_levels = input.bool(false, "Show SL/TP Levels", group=entry_group)
sl_atr_mult = input.float(1.5, "Stop Loss ATR Multiplier", group=entry_group, step=0.1)
tp1_atr_mult = input.float(2.0, "Take Profit 1 ATR Multiplier", group=entry_group, step=0.1)
tp2_atr_mult = input.float(3.0, "Take Profit 2 ATR Multiplier", group=entry_group, step=0.1)

useRegime = input.bool(true, "Regime filter (ATR% + optional ADX)", group=scalp_group)
minATRpct = input.float(0.50, "Min ATR14 % price (crypto scalp)", step=0.05, group=scalp_group)

// II. CORE LOGIC - cleaned placeholders (original logic was corrupted)
useADX = input.bool(false, "Use ADX filter", group=scalp_group)
minADX = input.int(18, "ADX threshold", minval=10, maxval=50, group=scalp_group)
session_start_utc = input.int(13, "Session start (UTC)", minval=0, maxval=23, group=scalp_group)

vol_sma = ta.sma(volume, vol_lookback)
atr_val = ta.atr(atr_len)

var int phase = 0
var float tr_high = na
var float tr_low = na
var int tr_start_bar = na
var int last_event_bar = na
var int last_spring_bar = na
var int last_ut_bar = na
var int last_sos_bar = na
var int last_sow_bar = na
var float strong_high = na
var float strong_low = na
var box[] box_array = array.new_box(0)
var bool[] box_is_bull_array = array.new_bool(0)

// Minimal helper functions
f_add_label(bar, price, txt, style, clr, txt_color) =>
    if show_wyckoff_labels
        label.new(bar, price, txt, style=style, color=clr, textcolor=txt_color, size=size.small)

f_draw_poi_box(p_top, p_bottom, p_color, p_style, p_is_bull) =>
    final_color = p_color
    b = box.new(bar_index[1], p_top, bar_index + poi_extend_bars, p_bottom, border_color=final_color, border_style=p_style, bgcolor=color.new(final_color, 85))
    array.push(box_array, b)
    array.push(box_is_bull_array, p_is_bull)
    if array.size(box_array) > poi_max_active_zones
        old_box = array.shift(box_array)
        array.shift(box_is_bull_array)
        box.delete(old_box)

// III. Placeholder structural detection
p_high = ta.pivothigh(high, pivot_len, pivot_len)
p_low = ta.pivotlow(low, pivot_len, pivot_len)

if not na(p_high)
    label.new(bar_index - pivot_len, p_high, "PH", style=label.style_label_down, color=color.red, textcolor=color.white, size=size.tiny)
if not na(p_low)
    label.new(bar_index - pivot_len, p_low, "PL", style=label.style_label_up, color=color.green, textcolor=color.white, size=size.tiny)

// IV. ENTRY (minimal, keeps variable names used elsewhere)
var int last_buy_bar = 0
var int last_sell_bar = 0
enough_vol_hist = bar_index > 2
is_no_supply = show_traps and bar_index > 2 and close < open and volume < volume[1] and volume < volume[2]
is_no_demand = show_traps and bar_index > 2 and close > open and volume < volume[1] and volume < volume[2]

in_bull_poi = false
in_bear_poi = false
if array.size(box_array) > 0
    for i = array.size(box_array) - 1 to 0
        bx = array.get(box_array, i)
        if box.get_bottom(bx) < high and box.get_top(bx) > low
            if array.get(box_is_bull_array, i)
                in_bull_poi := true
            else
                in_bear_poi := true

ema21 = ta.ema(close, 21)
momentum_bull = close > ema21
momentum_bear = close < ema21

buy_context = false
sell_context = false

longScore = 0.0
shortScore = 0.0
useScore = false
longThr = 1.0
shortThr = 1.0
regimeOK = true
sessOK() => true

canBuy = show_entries and buy_context and (not useScore or longScore >= longThr) and regimeOK and sessOK() and bar_index > last_buy_bar + entry_throttle
canSell = show_entries and sell_context and (not useScore or shortScore >= shortThr) and regimeOK and sessOK() and bar_index > last_sell_bar + entry_throttle

if canBuy
    label.new(bar_index, low, "BUY", style=label.style_label_up, color=color.new(color.lime, 20), textcolor=color.white)
    last_buy_bar := bar_index
if canSell
    label.new(bar_index, high, "SELL", style=label.style_label_down, color=color.new(color.red, 20), textcolor=color.white)
    last_sell_bar := bar_index

// V. Visualization
bg_c = phase == 2 ? color.new(color.green, 85) : phase == 3 ? color.new(color.red, 85) : phase == 1 ? color.new(color.gray, 90) : na
bgcolor(show_bg ? bg_c : na)

// VI. Alerts
enableAlerts = input.bool(true, "Enable Alerts", group=style_group)
if enableAlerts
    alertcondition(canBuy,  "WSH BUY (Scalper)",  "WSH v5.2: BUY setup (scalper).")
    alertcondition(canSell, "WSH SELL (Scalper)", "WSH v5.2: SELL setup (scalper).")

// Note: This file was auto-cleaned to fix corrupted text. Complex original logic was stubbed where corrupted; restore from a known-good source if needed.















































        tr_box := na        box.delete(tr_box)    if not na(tr_box)else        box.set_right(tr_box, bar_index)        box.set_bottom(tr_box, tr_low)        box.set_top(tr_box, tr_high)        box.set_left(tr_box, tr_start_bar)    else        tr_box := box.new(tr_start_bar, tr_high, bar_index, tr_low, border_color=color.new(color.gray, 50), bgcolor=na)    if na(tr_box)if analysis_mode == "Macro" and phase >= 1 and not na(tr_high)var box tr_box = nabarcolor(color_candles ? (close > ema21 ? color.new(color.green, 70) : color.new(color.red, 70)) : na)bgcolor(show_bg ? bg_c : na, "Phase Background")bg_c = phase == 2 ? color.new(color.green, 85) : phase == 3 ? color.new(color.red, 85) : phase == 1 ? color.new(color.gray, 90) : na// --- Visualization ---            line.new(bar_index, tp1, bar_index+50, tp1, color=color.green, style=line.style_dashed), label.new(bar_index+50, tp1, "TP1", style=label.style_label_right, textcolor=color.green)            line.new(bar_index, sl, bar_index+50, sl, color=color.red, style=line.style_dashed), label.new(bar_index+50, sl, "SL", style=label.style_label_right, textcolor=color.red)            tp1 = close - atr_val * tp1_atr_mult            sl = high + atr_val * sl_atr_mult        if show_risk_levels:        last_sell_bar := bar_index        label.new(bar_index, high, "SELL", style=label.style_label_down, color=color.new(color.red,20), textcolor=color.white, size=size.normal)    if sell_context and is_in_bear_poi and is_no_demand and momentum_ok_bear and bar_index > last_sell_bar + entry_throttle:    sell_context = phase == 3 and not na(last_ut_bar) and (bar_index - last_ut_bar < 50) and htf_is_bear    momentum_ok_bear = not use_momentum_filter or close < ema21            line.new(bar_index, tp1, bar_index+50, tp1, color=color.green, style=line.style_dashed), label.new(bar_index+50, tp1, "TP1", style=label.style_label_right, textcolor=color.green)            line.new(bar_index, sl, bar_index+50, sl, color=color.red, style=line.style_dashed), label.new(bar_index+50, sl, "SL", style=label.style_label_right, textcolor=color.red)            tp1 = close + atr_val * tp1_atr_mult            sl = low - atr_val * sl_atr_mult        if show_risk_levels:        last_buy_bar := bar_index        label.new(bar_index, low, "BUY", style=label.style_label_up, color=color.new(color.lime,20), textcolor=color.white, size=size.normal)    if buy_context and is_in_bull_poi and is_no_supply and momentum_ok_bull and bar_index > last_buy_bar + entry_throttle:    buy_context = phase == 2 and not na(last_spring_bar) and (bar_index - last_spring_bar < 50) and htf_is_bull    momentum_ok_bull = not use_momentum_filter or close > ema21    ema21 = ta.ema(close, 21)                    else: is_in_bear_poi := true                if array.get(box_is_bull_array, i): is_in_bull_poi := true            if box.get_bottom(bx) < high and box.get_top(bx) > low:            bx = array.get(box_array, i)        for i = array.size(box_array) - 1 to 0:    if array.size(box_array) > 0:    is_in_bull_poi = false, is_in_bear_poi = falseif show_entries:if is_no_demand: label.new(bar_index, high + atr_val*0.2, "ND", style=label.style_none, textcolor=color.red, size=size.tiny)if is_no_supply: label.new(bar_index, low - atr_val*0.2, "NS", style=label.style_none, textcolor=color.green, size=size.tiny)is_no_demand = show_traps and bar_index > 1 and close > open and volume < volume[1] and volume < volume[2]is_no_supply = show_traps and bar_index > 1 and close < open and volume < volume[1] and volume < volume[2]var last_buy_bar = 0, var last_sell_bar = 0htf_is_bear = request.security(syminfo.tickerid, htf_confirm_tf, close < ta.ema(close, 50))htf_is_bull = request.security(syminfo.tickerid, htf_confirm_tf, close > ta.ema(close, 50))// --- Traps & Entry Signals ---        phase := 3, last_event_bar := bar_index, last_ut_bar := bar_index
        f_add_label(bar_index, high, "UT", label.style_label_down, color.new(color.red, 20), color.red)s ---
    // SOS/SOWfo.tickerid, htf_confirm_tf, close > ta.ema(close, 50))
    is_sos = close > tr_high and close > open and volume > vol_sma * 1.5
    is_sow = close < tr_low  and close < open and volume > vol_sma * 1.5
    if is_sos and phase < 3var last_sell_bar = 0
        strong_low := range_lowestr_index > 1 and close < open and volume < volume[1] and volume < volume[2]
        f_add_label(bar_index, high, "SOS", label.style_label_up, color.new(color.blue, 20), color.blue)index > 1 and close > open and volume < volume[1] and volume < volume[2]
        phase := 0, tr_high := na, tr_low := na, last_spring_bar := na, last_ut_bar := na, last_sos_bar := na, last_sow_bar := na, last_bear_off := na, last_bull_off := na
        f_add_label(bar_index, low, "NS", label.style_label_down, color.new(color.green, 20), color.green)
    if is_sow and phase < 2l*0.2, "ND", style=label.style_none, textcolor=color.red, size=size.tiny)
        strong_high := range_highest
        f_add_label(bar_index, low, "SOW", label.style_label_down, color.new(color.purple, 20), color.purple)
        phase := 0, tr_high := na, tr_low := na, last_spring_bar := na, last_ut_bar := na, last_sos_bar := na, last_sow_bar := na

// --- POI (KV/OB) (WSH gốc) ---(box_array) > 0:
if show_kv_zones and bars_ready(1)
    kv_low_prev  = ta.lowest(low, kv_zone_len)[1]            bx = array.get(box_array, i)
    kv_high_prev = ta.highest(high, kv_zone_len)[1]ox.get_bottom(bx) < high and box.get_top(bx) > low:
    is_kv_bull = ta.crossunder(low, kv_low_prev) and close > open and (math.min(open, close) - low) / math.max(math.abs(open - close), syminfo.mintick) >= kv_wick_multox_is_bull_array, i)
    if is_kv_bull_poi := true
        f_draw_poi_box(high[1], low[1], color.blue, line.style_dashed, "KV Bull")
    is_kv_bear = ta.crossover(high, kv_high_prev) and close < open and (high - math.max(open, close)) / math.max(math.abs(open - close), syminfo.mintick) >= kv_wick_mult
    if is_kv_bear
        f_draw_poi_box(high[1], low[1], color.orange, line.style_dashed, "KV Bear")
momentum_filter or close > ema21
if show_ob_zonesast_spring_bar) and (bar_index - last_spring_bar < 50) and htf_is_bull
    var int last_bear_off = naand bar_index > last_buy_bar + entry_throttle:
    var int last_bull_off = nae=label.style_label_up, color=color.new(color.lime,20), textcolor=color.white, size=size.normal)
    if not na(last_sos_bar)ar_index
        bars_since_sos = bar_index - last_sos_bar
        last_bear_off := na
        for i = 1 to math.min(20, bar_index)
            off = bars_since_sos + idex, sl, bar_index+50, sl, color=color.red, style=line.style_dashed)
            if off <= bar_indexle=label.style_label_right, textcolor=color.red)
                if close[off] < open[off]ex+50, tp1, color=color.green, style=line.style_dashed)
                    last_bear_off := na(last_bear_off) ? off : last_bear_offp1, "TP1", style=label.style_label_right, textcolor=color.green)
                else if not na(last_bear_off)
                    breakter or close < ema21
        if not na(last_bear_off)t_bar < 50) and htf_is_bear
            f_draw_poi_box(high[last_bear_off], low[last_bear_off], color.teal, line.style_solid, "OB Bull")_no_demand and momentum_ok_bear and bar_index > last_sell_bar + entry_throttle:
            last_sos_bar := naex, high, "SELL", style=label.style_label_down, color=color.new(color.red,20), textcolor=color.white, size=size.normal)
            last_bear_off := naex
    if not na(last_sow_bar)
        bars_since_sow = bar_index - last_sow_bar
        last_bull_off := na            tp1 = close - atr_val * tp1_atr_mult
        for i = 1 to math.min(20, bar_index)dex+50, sl, color=color.red, style=line.style_dashed)
            off2 = bars_since_sow + ile=label.style_label_right, textcolor=color.red)
sweepLow  = useSweep and not na(lastPL) and low  < lastPL  and close > lastPL  and lowerWickRatio >= sweepWickKatrPct   = atr_val / math.max(nz(close,1.0), 1e-6) * 100.02 <= bar_index0, tp1, color=color.green, style=line.style_dashed)
a.adx(14)TP1", style=label.style_label_right, textcolor=color.green)
// Volume Delta (tick-proxy)
spreadSafe = math.max(spread, 1e-6)
upFrac   = clamp((close - low) / spreadSafe,  0.0, 1.0)
downFrac = clamp((high  - close) / spreadSafe, 0.0, 1.0)TRpct and (not useADX or adx14 >= minADX))new(bar_index[i], high[i], bar_index, high, color=color.new(color.yellow, 50), style=line.style_dotted, width=1)not na(last_bull_off)")
buyVol   = useDelta ? volume * upFrac   : nasessOK() =>off], low[last_bull_off], color.purple, line.style_solid, "OB Bear")
sellVol  = useDelta ? volume * downFrac : na============================================================last_sow_bar := na
volDelta = useDelta ? (buyVol - sellVol) : naNGINES — Sweep / Delta / MicroBOS / Gate / Score    last_bull_off := nabarcolor(candle_color)
zDelta   = useDelta ? (volDelta - ta.sma(volDelta, deltaLen)) / math.max(ta.stdev(volDelta, deltaLen), 1e-6) : na
deltaPos = useDelta and (nz(zDelta, 0.0) > 0)label.style_label_down, color=is_strong_h ? color.new(color.maroon, 20) : color.new(color.red, 20), textcolor=color.white, size=size.tiny)r_high):
hhMicro = ta.highest(high, lk_micro)[1]OSnd (nz(zDelta, 0.0) < 0)
llMicro = ta.lowest(low,  lk_micro)[1] useSweep and not na(lastPH) and high > lastPH and close < lastPH and upperWickRatio >= sweepWickKor.green, 20), textcolor=color.white, size=size.tiny)low,  pivot_len, pivot_len)(tr_start_bar, tr_high, bar_index, tr_low, border_color=color.new(color.gray, 50), bgcolor=na)
microUp = useMicroBOS and close > hhMicroe-6)
microDown = useMicroBOS and close < llMicro)
strong_high) < atr_val * 0.1        box.set_top(tr_box, tr_high)
// Top-down Gate (MA50 bias)1 to 50        box.set_bottom(tr_box, tr_low)
f_bias(tf) =>index)
    c  = request.security(syminfo.tickerid, tf, close,             barmerge.gaps_off, barmerge.lookahead_off)f math.abs(high[i] - high) < atr_val * liquidity_atr_mult
    ma = request.security(syminfo.tickerid, tf, ta.sma(close, 50), barmerge.gaps_off, barmerge.lookahead_off)
    c > ma ? 1.0 : c < ma ? -1.0 : 0.0
float gateScore = 0.0if useGate    if useD        gateScore += wD   * f_bias("D")    if use4H        gateScore += w4H  * f_bias("240")    if use1H        gateScore += w1H  * f_bias("60")    if use30m        gateScore += w30  * f_bias("30")canLongGate  = not useGate or gateScore >=  gateLongThrcanShortGate = not useGate or gateScore <= -gateShortThr// =============================================================================// IV. ENTRY (giữ logic WSH, thêm confluence cho scalper)// =============================================================================var int last_buy_bar = 0var int last_sell_bar = 0enough_vol_hist = bars_ready(2)is_no_supply = show_traps and enough_vol_hist and close < open and volume < volume[1] and volume < volume[2]is_no_demand = show_traps and enough_vol_hist and close > open and volume < volume[1] and volume < volume[2]// In-POI check (scan newest → oldest)in_bull_poi = falsein_bear_poi = falseif array.size(box_array) > 0    for i = array.size(box_array) - 1 to 0        bx = array.get(box_array, i)        if box.get_bottom(bx) < high and box.get_top(bx) > low            if array.get(box_is_bull, i)                in_bull_poi := true            else                in_bear_poi := true// Momentum & Wyckoff context (WSH gốc)momentum_bull = close > ema21momentum_bear = close < ema21buy_context  = phase == 2 and not na(last_spring_bar) and (bar_index - last_spring_bar < 25) and htf_is_bullsell_context = phase == 3 and not na(last_ut_bar)      and (bar_index - last_ut_bar   < 25) and htf_is_bear// Confluence score (nhẹ)float longScore = 0.0float shortScore = 0.0if useScore    longScore  += (in_bull_poi   ? w_inPOI    : 0)    longScore  += (is_no_supply  ? w_NSND     : 0)    longScore  += (momentum_bull ? w_momentum : 0)    longScore  += (sweepLow      ? w_sweep    : 0)    longScore  += (deltaPos      ? w_delta    : 0)    longScore  += (microUp       ? w_micro    : 0)    longScore  += (canLongGate   ? w_gate     : 0)    shortScore += (in_bear_poi   ? w_inPOI    : 0)    shortScore += (is_no_demand  ? w_NSND     : 0)    shortScore += (momentum_bear ? w_momentum : 0)    shortScore += (sweepHigh     ? w_sweep    : 0)    shortScore += (deltaNeg      ? w_delta    : 0)    shortScore += (microDown     ? w_micro    : 0)    shortScore += (canShortGate  ? w_gate     : 0)// Final entry gates (scalper: nhanh, rõ)canBuy  = show_entries and buy_context  and (not useScore or longScore  >= longThr) and regimeOK and sessOK() and bar_index > last_buy_bar  + entry_throttlecanSell = show_entries and sell_context and (not useScore or shortScore >= shortThr) and regimeOK and sessOK() and bar_index > last_sell_bar + entry_throttle// Plot & SL/TPif canBuy    label.new(bar_index, low, "BUY" + (useScore ? " S="+str.tostring(longScore, format.mintick) : ""), style=label.style_label_up, color=color.new(color.lime, 20), textcolor=color.white, size=size.normal)    if show_risk_levels        sl = low - atr_val * sl_atr_mult        tp1 = close + atr_val * tp1_atr_mult        tp2 = close + atr_val * tp2_atr_mult        line.new(bar_index, sl,  bar_index + 50, sl,  color=color.red,   style=line.style_dashed)        label.new(bar_index + 50, sl,  "SL",  style=label.style_label_right, textcolor=color.red,   color=color.new(color.gray, 100))        line.new(bar_index, tp1, bar_index + 50, tp1, color=color.green, style=line.style_dashed)        label.new(bar_index + 50, tp1, "TP1", style=label.style_label_right, textcolor=color.green, color=color.new(color.gray, 100))    last_buy_bar := bar_indexif canSell    label.new(bar_index, high, "SELL" + (useScore ? " S="+str.tostring(shortScore, format.mintick) : ""), style=label.style_label_down, color=color.new(color.red, 20), textcolor=color.white, size=size.normal)    if show_risk_levels        sl = high + atr_val * sl_atr_mult        tp1 = close - atr_val * tp1_atr_mult        line.new(bar_index, sl,  bar_index + 50, sl,  color=color.red,   style=line.style_dashed)        label.new(bar_index + 50, sl,  "SL",  style=label.style_label_right, textcolor=color.red,   color=color.new(color.gray, 100))        line.new(bar_index, tp1, bar_index + 50, tp1, color=color.green, style=line.style_dashed)        label.new(bar_index + 50, tp1, "TP1", style=label.style_label_right, textcolor=color.green, color=color.new(color.gray, 100))    last_sell_bar := bar_index// =============================================================================// V. Visualization (WSH gốc)// =============================================================================bg_c = phase == 2 ? color.new(color.green, 85) : phase == 3 ? color.new(color.red, 85) : phase == 1 ? color.new(color.gray, 90) : nabgcolor(show_bg ? bg_c : na)var box tr_box = naif phase >= 1 and not na(tr_high)    if na(tr_box)        tr_box := box.new(tr_start_bar, tr_high, bar_index, tr_low, border_color=color.new(color.gray, 50), bgcolor=na)    else
        box.set_left(tr_box, tr_start_bar)
        box.set_top(tr_box, tr_high)
        box.set_bottom(tr_box, tr_low)
        box.set_right(tr_box, bar_index)
else
    if not na(tr_box)
        box.delete(tr_box)
        tr_box := na

// =============================================================================
 // VI. Alerts
// =============================================================================
enableAlerts = input.bool(true, "Enable Alerts", group="0. General Settings")
if enableAlerts
    alertcondition(canBuy,  "WSH BUY (Scalper)",  "WSH v5.1: BUY setup (scalper).")
    alertcondition(canSell, "WSH SELL (Scalper)", "WSH v5.1: SELL setup (scalper).")