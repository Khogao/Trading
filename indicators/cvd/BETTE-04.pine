//@version=6
// TITLE: Better CVD Pro - Professional Order Flow Dashboard
// DESC: Master build combining Better CVD2's accurate engine with Better RSI's professional UI
indicator("Better CVD Pro", shorttitle="CVD Pro", format=format.volume, precision=2, overlay=false, max_lines_count=500, max_labels_count=500)

// ======== INPUTS (Better RSI Professional Style) ========== //
// --- CVD Core Settings ---
const string GRP_CVD = "CVD Settings"
anchorInput = input.timeframe("D", "CVD Anchor Period", group=GRP_CVD, tooltip="Timeframe at which CVD resets. 'D' recommended for intraday.")
useCustomTimeframeInput = input.bool(false, "Use Custom Lower Timeframe", group=GRP_CVD, tooltip="Override automatic lower timeframe selection.")
lowerTimeframeInput = input.timeframe("1", "Lower Timeframe", group=GRP_CVD)

// --- MA Settings (Better RSI Style) ---
const string GRP_MA = "MA Settings"
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group=GRP_MA)
maLengthInput = input.int(20, title="MA Length", group=GRP_MA)
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group=GRP_MA)

// --- Bollinger Band Settings (Better RSI Style) ---
const string GRP_BB = "Bollinger Band Settings"
showBollingerBands = input.bool(true, title="Show Bollinger Bands", group=GRP_BB)
showBBBreakouts = input.bool(true, title="Highlight Bollinger Band Breakouts", group=GRP_BB)
showExtremeBreakouts = input.bool(true, title="Highlight Extreme CVD Breakouts", group=GRP_BB, tooltip="Highlight when CVD breaks BB with extreme momentum")

// --- CVD Divergence Settings ---
const string GRP_DIVERGENCE = "CVD Divergence"
showDivergence = input.bool(true, title="Show Regular Divergence", group=GRP_DIVERGENCE)
ShowHDivergence = input.bool(false, title="Show Hidden Divergence", group=GRP_DIVERGENCE)
lookbackLeft = input.int(5, title="Pivot Lookback Left", group=GRP_DIVERGENCE)
lookbackRight = input.int(5, title="Pivot Lookback Right", group=GRP_DIVERGENCE)
rangeUpper = input.int(60, title="Max Bars Between Pivots", group=GRP_DIVERGENCE)
rangeLower = input.int(5, title="Min Bars Between Pivots", group=GRP_DIVERGENCE)
// History settings
keepHistory = input.bool(true, "Keep Historical Divergence Lines", group=GRP_DIVERGENCE)
maxHistoryPerType = input.int(80, "Max History Lines Per Type", minval=5, maxval=300, group=GRP_DIVERGENCE)
// Hidden line appearance
hiddenStyleInput = input.string("Dashed", "Hidden Line Style", options=["Dotted","Dashed","Solid"], group=GRP_DIVERGENCE)
hiddenWidthInput = input.int(2, "Hidden Line Width", minval=1, maxval=5, group=GRP_DIVERGENCE)
hiddenOpacityInput = input.int(25, "Hidden Line Opacity (0-100)", minval=0, maxval=100, group=GRP_DIVERGENCE)

// --- CVD Cloud Settings (Better RSI Style) ---
const string GRP_CLOUD = "CVD Cloud Settings"
showCVDClouds = input.bool(true, title="Show CVD Clouds", group=GRP_CLOUD)
maCloudLength1Input = input.int(5, title="CVD Cloud MA Length 1", group=GRP_CLOUD)
maCloudLength2Input = input.int(12, title="CVD Cloud MA Length 2", group=GRP_CLOUD)
maCloudTypeInput = input.string("EMA", title="CVD Cloud MA Type", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group=GRP_CLOUD)

// --- CVD Levels (Better RSI Style) ---
const string GRP_LEVELS = "CVD Levels"
enableAdditionalLevels = input.bool(true, title="Enable Dynamic CVD Levels", group=GRP_LEVELS, tooltip="Show dynamic support/resistance levels based on CVD volatility")
extremeMultiplier = input.float(2.5, title="Extreme Level Multiplier", minval=1.0, maxval=5.0, step=0.1, group=GRP_LEVELS)
significantMultiplier = input.float(1.5, title="Significant Level Multiplier", minval=1.0, maxval=3.0, step=0.1, group=GRP_LEVELS)

// --- CVD Table (Better RSI Style) ---
const string GRP_TABLE = "CVD TABLE"
cvdShowTable = input(true, title='CVD Multi-TF Table', group=GRP_TABLE)
cvdTablePosition = input.string(title='Location', defval='top_right', options=['top_left','top_right'], group=GRP_TABLE, inline='1')
cvdTextSize = input.string(title=' Size', defval='small', options=['auto','tiny','small','normal','large','huge'], group=GRP_TABLE, inline='1')
textColor = input.color(color.white, title="Text Color", group=GRP_TABLE)

// --- Display Settings (Better RSI Style) ---
const string GRP_DISPLAY = "Display Settings"
showCandleColors = input.bool(true, title="Show Candle Colors", group=GRP_DISPLAY, tooltip="Color price candles based on CVD conditions")
plotStyle = input.string("Line with MA", title="Plot Style", options=["Line with MA", "Candles"], group=GRP_DISPLAY)
// Add UI mode
uiMode = input.string("Simple", "UI Mode", options=["Minimal","Simple","Pro"], group=GRP_DISPLAY)

// Effective feature toggles by mode
isMinimal = uiMode == "Minimal"
isSimple  = uiMode == "Simple"
isPro     = uiMode == "Pro"

showLevelsEff            = isPro and enableAdditionalLevels
showCloudsEff            = isPro and showCVDClouds
showBBBandsEff           = isPro and showBollingerBands
showBBBreakoutsEff       = isPro and showBBBreakouts
showExtremeBreakoutsEff  = isPro and showExtremeBreakouts
cvdShowTableEff          = isPro and cvdShowTable
showCandleColorsEff      = isPro and showCandleColors

// Plot style: only Pro can switch to Candles
isLinePlotEff = isMinimal ? true : isSimple ? true : (plotStyle == "Line with MA")

// ======== CONSTANTS & HELPER FUNCTIONS ========== //
const color BULL_COLOR = color.new(color.lime, 0)
const color BEAR_COLOR = color.new(color.red, 0)
const color BULL_BG_COLOR = color.new(color.green, 90)
const color BEAR_BG_COLOR = color.new(color.red, 90)

// MA helper function
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

// Lower TF resolver
f_lowerTf() =>
    if useCustomTimeframeInput
        lowerTimeframeInput
    else
        switch
            timeframe.isseconds => "1S"
            timeframe.isintraday => "1"
            timeframe.isdaily => "5"
            => "60"

// CVD close for security calls
f_cvdClose() =>
    [_o, _h, _l, _c] = ta.requestVolumeDelta(f_lowerTf(), anchorInput)
    _c

// ======== CVD CALCULATION ENGINE ========== //
[openVolume, maxVolume, minVolume, lastVolume] = ta.requestVolumeDelta(f_lowerTf(), anchorInput)
cvdSource = lastVolume

// Volume validation
var float cumVol = 0.0
cumVol += nz(volume)
if barstate.islast and cumVol == 0
    runtime.error("This symbol has no volume data, CVD cannot be calculated.")

// CVD MA calculations
cvdMA = ma(cvdSource, maLengthInput, maTypeInput)
cvdMA1 = ma(cvdSource, maCloudLength1Input, maCloudTypeInput)
cvdMA2 = ma(cvdSource, maCloudLength2Input, maCloudTypeInput)

// ======== BOLLINGER BANDS & DYNAMIC LEVELS ========== //
cvdMA_bb = ma(cvdSource, maLengthInput, maTypeInput)
bbStdDev = ta.stdev(cvdSource, maLengthInput) * bbMultInput
bbUpperBand = cvdMA_bb + bbStdDev
bbLowerBand = cvdMA_bb - bbStdDev

// BB Breakout conditions
bbUpperBreakout = cvdSource > bbUpperBand
bbLowerBreakout = cvdSource < bbLowerBand

// Dynamic levels based on CVD volatility
cvdRange = ta.stdev(cvdSource, 20) // CVD volatility measure
extremeUpperLevel = cvdMA + (cvdRange * extremeMultiplier)
extremeLowerLevel = cvdMA - (cvdRange * extremeMultiplier)
significantUpperLevel = cvdMA + (cvdRange * significantMultiplier)
significantLowerLevel = cvdMA - (cvdRange * significantMultiplier)

// Extreme breakout conditions
extremeUpperBreakout = bbUpperBreakout and cvdSource > extremeUpperLevel
extremeLowerBreakout = bbLowerBreakout and cvdSource < extremeLowerLevel

// ======== UNIFIED DIVERGENCE ENGINE (Single Source of Truth) ========== //
// Colors and line styles
bearColor = color.red
bullColor = color.green
hiddenLineStyle = hiddenStyleInput == "Dotted" ? line.style_dotted : hiddenStyleInput == "Dashed" ? line.style_dashed : line.style_solid
hiddenBullColor = color.new(color.lime, hiddenOpacityInput)
hiddenBearColor = color.new(color.red, hiddenOpacityInput)

// Pivot detection
plVal = ta.pivotlow(cvdSource, lookbackLeft, lookbackRight)
phVal = ta.pivothigh(cvdSource, lookbackLeft, lookbackRight)
plFound = not na(plVal)
phFound = not na(phVal)
plJust = plFound and not plFound[1]
phJust = phFound and not phFound[1]

// Extract valuewhen globally for consistency
prevLowPrice  = ta.valuewhen(plFound, low[lookbackRight], 1)
prevHighPrice = ta.valuewhen(phFound, high[lookbackRight], 1)

// Storage for line drawing (single source)
var histBull = array.new_line()
var histBear = array.new_line()
var histHBull = array.new_line()
var histHBear = array.new_line()
var int prevPLBar = na
var float prevPLVal = na
var int prevPHBar = na
var float prevPHVal = na

// Divergence conditions (used for both alerts and drawing)
var bool bullCondNow = false
var bool bearCondNow = false
var bool hiddenBullNow = false
var bool hiddenBearNow = false

// LOW PIVOT PROCESSING
if plJust
    currBar = bar_index - lookbackRight
    
    // Calculate conditions ONCE
    if not na(prevPLBar)
        rangeOK = (currBar - prevPLBar) >= rangeLower and (currBar - prevPLBar) <= rangeUpper
        // Use precomputed prevLowPrice
        priceLL = low[lookbackRight] < prevLowPrice
        priceHL = low[lookbackRight] > prevLowPrice
        cvdHL = plVal > prevPLVal
        cvdLL = plVal < prevPLVal
        
        // Set conditions (used for both alerts and drawing)
        bullCondNow := showDivergence and rangeOK and priceLL and cvdHL
        hiddenBullNow := ShowHDivergence and rangeOK and priceHL and cvdLL
        
        // Draw lines using SAME conditions
        if bullCondNow
            newLine = line.new(prevPLBar, prevPLVal, currBar, plVal, color=BULL_COLOR, width=3)
            if keepHistory
                array.push(histBull, newLine)
                if array.size(histBull) > maxHistoryPerType
                    old = array.shift(histBull)
                    line.delete(old)
            label.new(x=currBar, y=plVal, text="Bull", style=label.style_label_up, color=color.new(color.green, 0), textcolor=color.white, size=size.tiny)
        
        if hiddenBullNow
            newHLine = line.new(prevPLBar, prevPLVal, currBar, plVal, color=hiddenBullColor, width=hiddenWidthInput, style=hiddenLineStyle)
            if keepHistory
                array.push(histHBull, newHLine)
                if array.size(histHBull) > maxHistoryPerType
                    old = array.shift(histHBull)
                    line.delete(old)
            label.new(x=currBar, y=plVal, text="Hidden Bull", style=label.style_label_up, color=color.new(color.green, 10), textcolor=color.white, size=size.small)
    
    // Update storage
    prevPLBar := currBar
    prevPLVal := plVal

// HIGH PIVOT PROCESSING
if phJust
    currBar = bar_index - lookbackRight
    
    // Calculate conditions ONCE
    if not na(prevPHBar)
        rangeOK = (currBar - prevPHBar) >= rangeLower and (currBar - prevPHBar) <= rangeUpper
        // Use precomputed prevHighPrice
        priceHH = high[lookbackRight] > prevHighPrice
        priceLH = high[lookbackRight] < prevHighPrice
        cvdLH = phVal < prevPHVal
        cvdHH = phVal > prevPHVal
        
        // Set conditions (used for both alerts and drawing)
        bearCondNow := showDivergence and rangeOK and priceHH and cvdLH
        hiddenBearNow := ShowHDivergence and rangeOK and priceLH and cvdHH
        
        // Draw lines using SAME conditions
        if bearCondNow
            newLine = line.new(prevPHBar, prevPHVal, currBar, phVal, color=BEAR_COLOR, width=3)
            if keepHistory
                array.push(histBear, newLine)
                if array.size(histBear) > maxHistoryPerType
                    old = array.shift(histBear)
                    line.delete(old)
            label.new(x=currBar, y=phVal, text="Bear", style=label.style_label_down, color=color.new(color.red, 0), textcolor=color.white, size=size.tiny)
        
        if hiddenBearNow
            newHLine = line.new(prevPHBar, prevPHVal, currBar, phVal, color=hiddenBearColor, width=hiddenWidthInput, style=hiddenLineStyle)
            if keepHistory
                array.push(histHBear, newHLine)
                if array.size(histHBear) > maxHistoryPerType
                    old = array.shift(histHBear)
                    line.delete(old)
            label.new(x=currBar, y=phVal, text="Hidden Bear", style=label.style_label_down, color=color.new(color.red, 10), textcolor=color.white, size=size.small)
    
    // Update storage
    prevPHBar := currBar
    prevPHVal := phVal

// ======== PLOTTING (Better RSI Professional Style) ========== //
// Zero line (OK: constant)
hline(0, "Zero Line", color=color.new(color.gray, 50), linestyle=hline.style_dashed)

// Dynamic levels (use plot for series)
pUpperExtreme      = plot(showLevelsEff ? extremeUpperLevel : na, title="Extreme Upper", color=color.new(color.red, 30))
pUpperSignificant  = plot(showLevelsEff ? significantUpperLevel : na, title="Significant Upper", color=color.new(color.orange, 50))
pLowerSignificant  = plot(showLevelsEff ? significantLowerLevel : na, title="Significant Lower", color=color.new(color.orange, 50))
pLowerExtreme      = plot(showLevelsEff ? extremeLowerLevel : na, title="Extreme Lower", color=color.new(color.red, 30))

// Background fill between levels
fill(pUpperExtreme, pLowerExtreme, color=showLevelsEff ? color.rgb(126, 87, 194, 95) : na, title="CVD Range Fill")

// Plot CVD Line/Candles
cvdLineColor = cvdSource > cvdMA ? color.new(color.blue, 0) : color.new(color.orange, 0)
pCVD = plot(isLinePlotEff ? cvdSource : na, "CVD", color=cvdLineColor, linewidth=2)
pMA  = plot(isLinePlotEff ? cvdMA     : na, "CVD MA", color=color.new(color.purple, 0), linewidth=1)

// CVD fill
fill(pCVD, pMA, color=isLinePlotEff ? (cvdSource > cvdMA ? color.new(color.blue, 85) : color.new(color.orange, 85)) : na, title="CVD vs MA Fill")

// CVD Candles (Pro only)
cCol = lastVolume >= openVolume ? color.new(color.teal, 30) : color.new(color.red, 30)
plotcandle(not isLinePlotEff and isPro ? openVolume : na,
           not isLinePlotEff and isPro ? maxVolume  : na,
           not isLinePlotEff and isPro ? minVolume  : na,
           not isLinePlotEff and isPro ? lastVolume : na,
           "CVD Candles", color=cCol, bordercolor=cCol, wickcolor=cCol)

// ======== CVD CLOUDS (Better RSI Style) ========== //
p1 = plot(showCloudsEff ? cvdMA1 : na, title="CVD MA Line 1", linewidth=1, color=color.new(color.green, 100))
p2 = plot(showCloudsEff ? cvdMA2 : na, title="CVD MA Line 2", linewidth=1, color=color.new(color.red, 100))
fill(p1, p2, color=showCloudsEff ? (cvdMA1 > cvdMA2 ? color.new(color.green, 70) : color.new(color.red, 70)) : na, title="CVD Cloud Fill")

// ======== BOLLINGER BANDS ========== //
bbUpper = plot(showBBBandsEff ? bbUpperBand : na, title="BB Upper", color=color.gray, style=plot.style_line)
bbLower = plot(showBBBandsEff ? bbLowerBand : na, title="BB Lower", color=color.gray, style=plot.style_line)
fill(bbUpper, bbLower, color=showBBBandsEff ? color.new(color.gray, 95) : na, title="BB Fill")

// ======== BACKGROUND ALERTS (Better RSI Style) ========== //
bgcolor(showBBBreakoutsEff and bbUpperBreakout ? color.new(color.green, 90) : na, title="CVD Above Upper BB")
bgcolor(showBBBreakoutsEff and bbLowerBreakout ? color.new(color.red, 90) : na, title="CVD Below Lower BB")
bgcolor(showExtremeBreakoutsEff and extremeUpperBreakout ? color.new(color.yellow, 90) : na, title="CVD Extreme Breakout Above")
bgcolor(showExtremeBreakoutsEff and extremeLowerBreakout ? color.new(color.yellow, 90) : na, title="CVD Extreme Breakout Below")

// ======== MULTI-TF CVD TABLE (Better RSI Style) ========== //
if cvdShowTableEff
    // Multi-timeframe CVD values
    cvd5m = request.security(syminfo.tickerid, "5", f_cvdClose())
    cvd15m = request.security(syminfo.tickerid, "15", f_cvdClose())
    cvd1h = request.security(syminfo.tickerid, "60", f_cvdClose())
    cvd4h = request.security(syminfo.tickerid, "240", f_cvdClose())
    cvd1d = request.security(syminfo.tickerid, "1440", f_cvdClose())

    // Multi-timeframe CVD MAs
    cvdMA5m = request.security(syminfo.tickerid, "5", ma(f_cvdClose(), maLengthInput, maTypeInput))
    cvdMA15m = request.security(syminfo.tickerid, "15", ma(f_cvdClose(), maLengthInput, maTypeInput))
    cvdMA1h = request.security(syminfo.tickerid, "60", ma(f_cvdClose(), maLengthInput, maTypeInput))
    cvdMA4h = request.security(syminfo.tickerid, "240", ma(f_cvdClose(), maLengthInput, maTypeInput))
    cvdMA1d = request.security(syminfo.tickerid, "1440", ma(f_cvdClose(), maLengthInput, maTypeInput))

    // Table setup (Better RSI Style)
    width_c0 = 0
    width_c1 = 4
    cvd_pos = cvdTablePosition == 'top_right' ? position.top_right : position.top_left
    var table cvd_Table = table.new(position=cvd_pos, columns=2, rows=5, bgcolor=color.rgb(18,22,33,50), frame_color=color.black, frame_width=1, border_color=color.black, border_width=1)

    if cvdShowTable
        table.cell(table_id=cvd_Table, column=0, row=0, text=" CVD 5m:", width=width_c0, text_color=textColor, text_size=cvdTextSize, text_halign=text.align_right)
        table.cell(table_id=cvd_Table, column=0, row=1, text=" CVD 15m:", width=width_c0, text_color=textColor, text_size=cvdTextSize, text_halign=text.align_right)
        table.cell(table_id=cvd_Table, column=0, row=2, text=" CVD 1h:", width=width_c0, text_color=textColor, text_size=cvdTextSize, text_halign=text.align_right)
        table.cell(table_id=cvd_Table, column=0, row=3, text=" CVD 4h:", width=width_c0, text_color=textColor, text_size=cvdTextSize, text_halign=text.align_right)
        table.cell(table_id=cvd_Table, column=0, row=4, text=" CVD 1d:", width=width_c0, text_color=textColor, text_size=cvdTextSize, text_halign=text.align_right)

        table.cell(table_id=cvd_Table, column=1, row=0, text=str.format("{0,number,#.##} ", cvd5m), width=width_c1, text_color=textColor, bgcolor=(cvd5m > cvdMA5m ? bullColor : bearColor), text_size=cvdTextSize, text_halign=text.align_left)
        table.cell(table_id=cvd_Table, column=1, row=1, text=str.format("{0,number,#.##} ", cvd15m), width=width_c1, text_color=textColor, bgcolor=(cvd15m > cvdMA15m ? bullColor : bearColor), text_size=cvdTextSize, text_halign=text.align_left)
        table.cell(table_id=cvd_Table, column=1, row=2, text=str.format("{0,number,#.##} ", cvd1h), width=width_c1, text_color=textColor, bgcolor=(cvd1h > cvdMA1h ? bullColor : bearColor), text_size=cvdTextSize, text_halign=text.align_left)
        table.cell(table_id=cvd_Table, column=1, row=3, text=str.format("{0,number,#.##} ", cvd4h), width=width_c1, text_color=textColor, bgcolor=(cvd4h > cvdMA4h ? bullColor : bearColor), text_size=cvdTextSize, text_halign=text.align_left)
        table.cell(table_id=cvd_Table, column=1, row=4, text=str.format("{0,number,#.##} ", cvd1d), width=width_c1, text_color=textColor, bgcolor=(cvd1d > cvdMA1d ? bullColor : bearColor), text_size=cvdTextSize, text_halign=text.align_left)

// ======== CANDLE COLORING (Better RSI Style) ========== //
barcolor(showCandleColorsEff and extremeUpperBreakout ? color.new(color.lime, 25) : na, title="Extreme Bullish CVD")
barcolor(showCandleColorsEff and extremeLowerBreakout ? color.new(color.red, 25) : na, title="Extreme Bearish CVD")
barcolor(showCandleColorsEff and bbUpperBreakout ? color.new(color.green, 50) : na, title="CVD Above BB")
barcolor(showCandleColorsEff and bbLowerBreakout ? color.new(color.orange, 50) : na, title="CVD Below BB")
barcolor(showCandleColorsEff and cvdSource > cvdMA ? color.new(color.blue, 75) : na, title="CVD Above MA")
barcolor(showCandleColorsEff and cvdSource < cvdMA ? color.new(color.purple, 75) : na, title="CVD Below MA")

// ======== ALERTS ========== //
alertcondition(bullCondNow, title='CVD Regular Bullish Divergence', message="CVD Regular Bullish Divergence on {{ticker}}")
alertcondition(bearCondNow, title='CVD Regular Bearish Divergence', message="CVD Regular Bearish Divergence on {{ticker}}")
alertcondition(hiddenBullNow, title='CVD Hidden Bullish Divergence', message="CVD Hidden Bullish Divergence on {{ticker}}")
alertcondition(hiddenBearNow, title='CVD Hidden Bearish Divergence', message="CVD Hidden Bearish Divergence on {{ticker}}")
alertcondition(extremeUpperBreakout, title='CVD Extreme Bullish Breakout', message="CVD Extreme Bullish Breakout on {{ticker}}")
alertcondition(extremeLowerBreakout, title='CVD Extreme Bearish Breakout', message="CVD Extreme Bearish Breakout on {{ticker}}")

safeExtremeUpper = barstate.isconfirmed and extremeUpperBreakout
safeExtremeLower = barstate.isconfirmed and extremeLowerBreakout

// Renamed to avoid duplicate alert titles.
alertcondition(safeExtremeUpper, title='CVD Extreme Bullish Breakout (Confirmed)', message="CVD Extreme Bullish Breakout (Confirmed) on {{ticker}}")
alertcondition(safeExtremeLower, title='CVD Extreme Bearish Breakout (Confirmed)', message="CVD Extreme Bearish Breakout (Confirmed) on {{ticker}}")