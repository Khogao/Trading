// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Phi - Enhanced with VSA for Scalping
//@version=5
indicator("SM Breakout Signals [Phi] + VSA", shorttitle="SmBr+VSA", overlay=true)

// === TIMEFRAME SPECIFIC SWING SIZES ===
swingSize_1m = input.int(10, "Swing Size 1m", group="Market Structure Per Timeframe", tooltip='Swing size for 1 minute timeframe')
swingSize_5m = input.int(5, "Swing Size 5m", group="Market Structure Per Timeframe", tooltip='Swing size for 5 minute timeframe')
swingSize_15m = input.int(3, "Swing Size 15m", group="Market Structure Per Timeframe", tooltip='Swing size for 15 minute timeframe')
swingSize_30m = input.int(3, "Swing Size 30m", group="Market Structure Per Timeframe", tooltip='Swing size for 30 minute timeframe')
swingSize_1h = input.int(3, "Swing Size 1h", group="Market Structure Per Timeframe", tooltip='Swing size for 1 hour timeframe')
swingSize_4h = input.int(3, "Swing Size 4h", group="Market Structure Per Timeframe", tooltip='Swing size for 4 hour timeframe')
swingSize_1d = input.int(3, "Swing Size 1d", group="Market Structure Per Timeframe", tooltip='Swing size for 1 day timeframe')

// === ORIGINAL INPUTS (PRESERVED) ===
bosConfType = input.string('Candle Close', 'BOS Confirmation Type', ['Candle Close', 'Wicks'], tooltip='Specifies whether a candle close or a wick surpassing the previous swing point is used to confirm a Break of Structure (BOS).', group="Inputs")
choch = input.bool(true, 'Show CHoCH', tooltip='Enables or disables the display of Change of Character (CHoCH) labels, highlighting the first structural break against the trend.', group="Inputs")
color BULL = input.color(color.rgb(11, 167, 71), "Bullish Color", group="Visualization", tooltip='Sets the color used to represent bullish signals and breakout lines.')
color BEAR = input.color(#ff1100, "Bearish Color", group="Visualization", tooltip='Sets the color used to represent bearish signals and breakout lines.')

// === VSA ENHANCEMENTS (NEW) ===
useVSAFilter = input.bool(true, "Use VSA Volume Filter", group="VSA Enhancement", tooltip='Filters breakouts based on volume analysis')
volPeriod = input.int(20, "Volume SMA Period", group="VSA Enhancement")
volMultiplier = input.float(1.5, "High Volume Multiplier", group="VSA Enhancement")
showVSASignals = input.bool(true, "Show VSA Patterns", group="VSA Enhancement")
showWyckoffPhases = input.bool(true, "Show Wyckoff Phases", group="VSA Enhancement")
showVolumeProfile = input.bool(false, "Show Volume Profile", group="VSA Enhancement")

// === VSA CALCULATIONS ===
vol_sma = ta.sma(volume, volPeriod)
vol_sma_short = ta.sma(volume, 10)
high_volume = volume > vol_sma * volMultiplier
ultra_high_volume = volume > vol_sma * 2.0
low_volume = volume < vol_sma * 0.7
average_volume = volume >= vol_sma * 0.7 and volume <= vol_sma * volMultiplier

vol_spread = high - low
price_spread = math.abs(close - open)
body_percentage = vol_spread > 0 ? price_spread / vol_spread : 0

// Price analysis with global variables
spread_sma = ta.sma(vol_spread, 20)
range_expansion = vol_spread > spread_sma * 1.2
range_contraction = vol_spread < spread_sma * 0.8
close_position = vol_spread > 0 ? (close - low) / vol_spread : 0.5 // 0=bottom, 1=top

// Historical lookbacks as global variables
lowest_10 = ta.lowest(low, 10)
highest_10 = ta.highest(high, 10)
lowest_20 = ta.lowest(low, 20)
highest_20 = ta.highest(high, 20)
close_sma_20 = ta.sma(close, 20)
price_spread_sma_10 = ta.sma(price_spread, 10)

// === WYCKOFF VSA PATTERNS ===
// Selling Climax (SC) - High volume, wide spread, close near low
selling_climax = ultra_high_volume and range_expansion and close_position < 0.3 and close < open

// Buying Climax (BC) - High volume, wide spread, close near high  
buying_climax = ultra_high_volume and range_expansion and close_position > 0.7 and close > open

// Preliminary Support (PS) - High volume, close near high after decline
preliminary_support = high_volume and close_position > 0.6 and close > open and low < lowest_10

// Secondary Test (ST) - Low volume test of support/resistance
secondary_test_support = low_volume and math.abs(low - lowest_20[1]) < vol_spread and close > open
secondary_test_resistance = low_volume and math.abs(high - highest_20[1]) < vol_spread and close < open

// Sign of Strength (SOS) - High volume with price advance
sign_of_strength = high_volume and close > open and close > high[1] and close_position > 0.5

// Sign of Weakness (SOW) - High volume with price decline  
sign_of_weakness = high_volume and close < open and close < low[1] and close_position < 0.5

// Upthrust (UT) - High volume, close near low, new high
upthrust = high_volume and close_position < 0.4 and high > highest_10[1] and close < open

// Spring (SPR) - Low volume, close near high, new low
spring = (low_volume or average_volume) and close_position > 0.6 and low < lowest_10[1] and close > open

// No Supply (NS) - Low volume on pullback in uptrend
no_supply = low_volume and close < open and close > close_sma_20 and close_position > 0.4

// No Demand (ND) - Low volume on rally in downtrend  
no_demand = low_volume and close > open and close < close_sma_20 and close_position < 0.6

// Stopping Volume (SV) - High volume, narrow spread
stopping_volume = high_volume and range_contraction and body_percentage < 0.4

// Effort vs Result Analysis
effort_no_result_up = high_volume and close > open and price_spread < price_spread_sma_10 * 0.8
effort_no_result_down = high_volume and close < open and price_spread < price_spread_sma_10 * 0.8

// === WYCKOFF PHASE DETECTION ===
var int wyckoff_phase = 0 // 0=neutral, 1=accumulation, 2=markup, 3=distribution, 4=markdown

// Simple phase detection based on volume and price patterns
accumulation_signals = (selling_climax or preliminary_support or spring or secondary_test_support) ? 1 : 0
distribution_signals = (buying_climax or upthrust or no_demand or secondary_test_resistance) ? 1 : 0
markup_signals = (sign_of_strength or no_supply) ? 1 : 0  
markdown_signals = (sign_of_weakness) ? 1 : 0

// Phase state machine (simplified)
if accumulation_signals > 0 and wyckoff_phase != 1
    wyckoff_phase := 1
else if markup_signals > 0 and wyckoff_phase == 1
    wyckoff_phase := 2
else if distribution_signals > 0 and wyckoff_phase == 2
    wyckoff_phase := 3
else if markdown_signals > 0 and wyckoff_phase == 3
    wyckoff_phase := 4

// Dynamic swing size based on current timeframe
swingSize = switch timeframe.period
    "1"   => swingSize_1m
    "5"   => swingSize_5m
    "15"  => swingSize_15m
    "30"  => swingSize_30m
    "60"  => swingSize_1h
    "240" => swingSize_4h
    "D"   => swingSize_1d
    => 3 // Default fallback for other timeframes

// === ORIGINAL MS FUNCTION (PRESERVED + VSA ENHANCED) ===
MS(int swingSize, int src_BI, string bosConfType, bool enms, float src_close, float src_high, float src_low) =>
    pivHi = ta.pivothigh(src_high, swingSize, swingSize)
    pivLo = ta.pivotlow(src_low, swingSize, swingSize)
    var float prevHigh = na
    var float prevLow = na
    var int prevHighIndex = na
    var int prevLowIndex = na
    var bool highActive = false
    var bool lowActive = false
    bool hh = false
    bool lh = false
    bool hl = false
    bool ll = false
    var int prevSwing = 0
    if not na(pivHi) and enms
        if pivHi >= prevHigh
            hh := true
            prevSwing := 2
        else
            lh := true
            prevSwing := 1
        prevHigh := pivHi
        highActive := true
        prevHighIndex := src_BI - swingSize
    if not na(pivLo) and enms
        if pivLo >= prevLow
            hl := true
            prevSwing := -1
        else
            ll := true
            prevSwing := -2
        prevLow := pivLo
        lowActive := true
        prevLowIndex := src_BI - swingSize
    bool highBroken = false
    bool lowBroken = false
    float highSrc = bosConfType == 'Candle Close' ? src_close : src_high
    float lowSrc = bosConfType == 'Candle Close' ? src_close : src_low
    
    // VSA ENHANCEMENT: Add volume confirmation with fallback
    if highSrc > prevHigh and highActive and enms
        volume_confirmation = not useVSAFilter or high_volume
        // Fallback: Allow breakout if price movement is significant (>2x ATR)
        significant_move = (highSrc - prevHigh) > (ta.atr(14) * 2)
        if volume_confirmation or significant_move
            highBroken := true
            highActive := false
        else
            highBroken := false
    if lowSrc < prevLow and lowActive and enms
        volume_confirmation = not useVSAFilter or high_volume
        // Fallback: Allow breakout if price movement is significant (>2x ATR)
        significant_move = (prevLow - lowSrc) > (ta.atr(14) * 2)
        if volume_confirmation or significant_move
            lowBroken := true
            lowActive := false
        else
            lowBroken := false
    [hh,ll,lh,hl,highBroken,lowBroken,prevHighIndex,prevLowIndex,pivHi,pivLo,prevHigh,prevLow]

// === ORIGINAL CALL (PRESERVED) ===
[hh, ll, lh, hl, highBroken, lowBroken, prevHighIndex, prevLowIndex, pivHi, pivLo, prevHigh, prevLow] = MS(swingSize, bar_index, bosConfType, true, close, high, low)

// === ORIGINAL VARIABLES (PRESERVED) ===
var int prevBreakoutDir = 0
length = 0

// === ORIGINAL BREAKOUT LOGIC (PRESERVED) ===
if highBroken
    line.new(prevHighIndex, prevHigh, bar_index, prevHigh, color=BULL, width=1, force_overlay=true)
    label.new(math.floor(bar_index - (bar_index - prevHighIndex) / 2), prevHigh, prevBreakoutDir == -1 and choch ? 'CHoCH' : 'BOS', color=color.rgb(0, 0, 0, 80), textcolor=BULL, size=size.tiny, force_overlay=true)
    alert("Bullish Breakout Detected", alert.freq_once_per_bar)
    prevBreakoutDir := 1
    length := bar_index - prevHighIndex
if lowBroken
    line.new(prevLowIndex, prevLow, bar_index, prevLow, color=BEAR, width=1, force_overlay=true)
    label.new(math.floor(bar_index - (bar_index - prevLowIndex) / 2), prevLow, prevBreakoutDir == 1 and choch ? 'CHoCH' : 'BOS', color=color.rgb(0, 0, 0, 80), textcolor=BEAR, style=label.style_label_up, size=size.tiny, force_overlay=true)
    alert("Bearish Breakout Detected", alert.freq_once_per_bar)
    prevBreakoutDir := -1
    length := bar_index - prevLowIndex

// === ORIGINAL TP/SL LOGIC (PRESERVED) ===
x = math.max(1, nz(length))
v = ta.highest(x) - ta.lowest(x)
dist = v / 3
trigger = 0
RR = 1
var active = 0
var active1 = 0
var active2 = 0
var TP = 0.0
var TP1 = 0.0
var TP2 = 0.0
var SL = 0.0
var TPs = array.new_line()
var TPs1 = array.new_line()
var TPs2 = array.new_line()

// === ORIGINAL STATISTICS TRACKING (PRESERVED) ===
var total = 0
var tp1s = 0
var tp2s = 0
var tp3s = 0

if highBroken
    active := 1
    active1 := 1
    active2 := 1
    trigger := 1
    total += 1
    TP := prevHigh + dist
    TP1 := prevHigh + dist * 2 / 3
    TP2 := prevHigh + dist * 1 / 3
    SL := prevHigh - dist / RR
    TPs.unshift(line.new(prevHighIndex, TP, bar_index, TP, color=color.new(BULL, 70), width=1, force_overlay=true, style=line.style_dashed))
    TPs1.unshift(line.new(prevHighIndex, TP1, bar_index, TP1, color=color.new(BULL, 50), width=1, force_overlay=true, style=line.style_dashed))
    TPs2.unshift(line.new(prevHighIndex, TP2, bar_index, TP2, color=color.new(BULL, 30), width=1, force_overlay=true, style=line.style_dashed))
    linefill.new(TPs.first(), TPs1.first(), color.new(BULL, 90))

if lowBroken
    active := -1
    active1 := -1
    active2 := -1
    trigger := 1
    total += 1
    TP := prevLow - dist
    TP1 := prevLow - dist * 2 / 3
    TP2 := prevLow - dist * 1 / 3
    SL := prevLow + dist / RR
    TPs.unshift(line.new(prevLowIndex, TP, bar_index, TP, color=color.new(BEAR, 70), width=1, force_overlay=true, style=line.style_dashed))
    TPs1.unshift(line.new(prevLowIndex, TP1, bar_index, TP1, color=color.new(BEAR, 50), width=1, force_overlay=true, style=line.style_dashed))
    TPs2.unshift(line.new(prevLowIndex, TP2, bar_index, TP2, color=color.new(BEAR, 30), width=1, force_overlay=true, style=line.style_dashed))
    linefill.new(TPs.first(), TPs1.first(), color.new(BEAR, 90))

// === ORIGINAL TP TRACKING (PRESERVED) ===
if active == 1 and high > TP
    tp1s += 1
if active1 == 1 and high > TP1
    tp2s += 1
    active1 := 0
if active2 == 1 and high > TP2
    tp3s += 1
    active2 := 0

if active == -1 and low < TP
    tp1s += 1
if active1 == -1 and low < TP1
    tp2s += 1
    active1 := 0
if active2 == -1 and low < TP2
    tp3s += 1
    active2 := 0

// === ORIGINAL TRADE MANAGEMENT (PRESERVED) ===
if ((active == 1 and high > TP) or (active == 1 and low < SL) or (active == -1 and low < TP) or (active == -1 and high > SL)) and not (trigger != 0 and trigger[1] == 0)
    active := 0

if TPs.size() > 0
    if active == 0 or (active != 0 and active[1] != 0 and trigger == 1)
        TPs.remove(math.min(1, TPs.size() - 1))
    else 
        TPs.first().set_x2(bar_index)

if TPs1.size() > 0
    if active == 0 or (active != 0 and active[1] != 0 and trigger == 1)
        TPs1.remove(math.min(1, TPs1.size() - 1))
    else 
        TPs1.first().set_x2(bar_index)

if TPs2.size() > 0
    if active == 0 or (active != 0 and active[1] != 0 and trigger == 1)
        TPs2.remove(math.min(1, TPs2.size() - 1))
    else 
        TPs2.first().set_x2(bar_index)

// === ORIGINAL BAR COLORING (PRESERVED) ===
barcolor(active[0] == 0 ? color.new(color.gray, 40) : active[0] == 1 ? color.new(BULL[1], 40) : color.new(BEAR[1], 40))

// === ORIGINAL PLOT SHAPES (PRESERVED) ===
plotshape(highBroken, "Bullish Signal", shape.labelup, location.belowbar, BULL, size=size.small)
plotshape(lowBroken, "Bearish Signal", shape.labeldown, location.abovebar, BEAR, size=size.small)

// === VSA ENHANCEMENTS (NEW - OPTIONAL) ===
// Major Wyckoff Patterns
plotshape(showVSASignals and selling_climax, "SC", shape.labeldown, location.abovebar, color.red, text="SC", textcolor=color.white, size=size.small)
plotshape(showVSASignals and buying_climax, "BC", shape.labelup, location.belowbar, color.red, text="BC", textcolor=color.white, size=size.small)
plotshape(showVSASignals and preliminary_support, "PS", shape.labelup, location.belowbar, color.blue, text="PS", textcolor=color.white, size=size.tiny)
plotshape(showVSASignals and spring, "Spring", shape.labelup, location.belowbar, color.lime, text="SPR", textcolor=color.black, size=size.tiny)
plotshape(showVSASignals and upthrust, "Upthrust", shape.labeldown, location.abovebar, color.orange, text="UT", textcolor=color.white, size=size.tiny)

// Signs of Strength/Weakness  
plotshape(showVSASignals and sign_of_strength, "SOS", shape.triangleup, location.belowbar, color.green, text="SOS", size=size.tiny)
plotshape(showVSASignals and sign_of_weakness, "SOW", shape.triangledown, location.abovebar, color.red, text="SOW", size=size.tiny)

// Supply/Demand
plotshape(showVSASignals and no_supply, "No Supply", shape.circle, location.belowbar, color.green, text="NS", size=size.tiny)
plotshape(showVSASignals and no_demand, "No Demand", shape.circle, location.abovebar, color.red, text="ND", size=size.tiny)

// Secondary Tests
plotshape(showVSASignals and secondary_test_support, "ST Support", shape.diamond, location.belowbar, color.blue, text="ST", size=size.tiny)
plotshape(showVSASignals and secondary_test_resistance, "ST Resistance", shape.diamond, location.abovebar, color.purple, text="ST", size=size.tiny)

// Stopping Volume & Effort Analysis
plotshape(showVSASignals and stopping_volume, "Stopping Volume", shape.square, location.absolute, color.yellow, text="SV", size=size.tiny)
plotshape(showVSASignals and effort_no_result_up, "Effort No Result ↑", shape.xcross, location.abovebar, color.orange, size=size.tiny)
plotshape(showVSASignals and effort_no_result_down, "Effort No Result ↓", shape.xcross, location.belowbar, color.orange, size=size.tiny)

// Wyckoff Phase Background  
phase_color = showWyckoffPhases ? 
    wyckoff_phase == 1 ? color.new(color.blue, 95) :    // Accumulation
    wyckoff_phase == 2 ? color.new(color.green, 95) :   // Markup
    wyckoff_phase == 3 ? color.new(color.red, 95) :     // Distribution  
    wyckoff_phase == 4 ? color.new(color.purple, 95) :  // Markdown
    na : na

bgcolor(phase_color, title="Wyckoff Phase")

// === ORIGINAL PERFORMANCE TABLE (PRESERVED EXACTLY) ===
if barstate.islast
    var table data_table = table.new(
         position=position.top_right,
         columns=2,
         rows=5,
         bgcolor=chart.bg_color,
         border_width=1,
         border_color=chart.fg_color,
         frame_color=chart.fg_color,
         frame_width=1
     )

    t1_rate = total > 0 ? (tp1s / total) * 100.0 : na
    t2_rate = total > 0 ? (tp2s / total) * 100.0 : na
    t3_rate = total > 0 ? (tp3s / total) * 100.0 : na

    table.cell(
         data_table,
         column   = 0,
         row      = 0,
         text     = "Smart Money Breakout Stats",
         text_size= size.tiny,
         text_color = chart.fg_color,
         text_halign= text.align_center
     )
    table.cell(
         data_table,
         column   = 1,
         row      = 0,
         text     = "Value",
         text_size= size.tiny,
         text_color = chart.fg_color,
         text_halign= text.align_center
     )

    table.cell(
         data_table,
         column   = 0,
         row      = 1,
         text     = "Total Signals",
         text_size= size.tiny,
         text_color = chart.fg_color
     )
    table.cell(
         data_table,
         column   = 1,
         row      = 1,
         text     = str.tostring(total),
         text_size= size.tiny,
         text_color = chart.fg_color,
         text_halign= text.align_center
     )

    table.cell(
         data_table,
         column   = 0,
         row      = 2,
         text     = "TP1 Win Rate",
         text_size= size.tiny,
         text_color = chart.fg_color
     )
    table.cell(
         data_table,
         column   = 1,
         row      = 2,
         text     = total > 0 ? str.format("{0,number,#.##}%", t3_rate) : "No Trades",
         text_size= size.tiny,
         text_color = chart.fg_color,
         text_halign= text.align_center
     )

    table.cell(
         data_table,
         column   = 0,
         row      = 3,
         text     = "TP2 Win Rate",
         text_size= size.tiny,
         text_color = chart.fg_color
     )
    table.cell(
         data_table,
         column   = 1,
         row      = 3,
         text     = total > 0 ? str.format("{0,number,#.##}%", t2_rate) : "No Trades",
         text_size= size.tiny,
         text_color = chart.fg_color,
         text_halign= text.align_center
     )

    table.cell(
         data_table,
         column   = 0,
         row      = 4,
         text     = "TP3 Win Rate",
         text_size= size.tiny,
         text_color = chart.fg_color
     )
    table.cell(
         data_table,
         column   = 1,
         row      = 4,
         text     = total > 0 ? str.format("{0,number,#.##}%", t1_rate) : "No Trades",
         text_size= size.tiny,
         text_color = chart.fg_color,
         text_halign= text.align_center
     )

// === ORIGINAL ALERTS (PRESERVED) ===
alertcondition(highBroken, "Bullish Signal")
alertcondition(lowBroken, "Bearish Signal")

// === VSA ALERTS (NEW) ===
alertcondition(selling_climax, "VSA Selling Climax", "Selling Climax detected - potential bottom")
alertcondition(buying_climax, "VSA Buying Climax", "Buying Climax detected - potential top")
alertcondition(spring, "VSA Spring", "Spring detected - bullish reversal signal")
alertcondition(upthrust, "VSA Upthrust", "Upthrust detected - bearish reversal signal")
alertcondition(sign_of_strength, "VSA Sign of Strength", "Sign of Strength - bullish continuation")
alertcondition(sign_of_weakness, "VSA Sign of Weakness", "Sign of Weakness - bearish continuation")
alertcondition(no_supply, "VSA No Supply", "No Supply - bullish continuation")
alertcondition(no_demand, "VSA No Demand", "No Demand - bearish continuation")
alertcondition(stopping_volume, "VSA Stopping Volume", "Stopping Volume - potential reversal")