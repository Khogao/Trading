// © 2025 Gemini AI - Phi's Confluence Engine (v1.3)
// @version=5
// THAY ĐỔI: Sửa lỗi khai báo biến, thêm tùy chỉnh cho RSI, thêm comment giải thích logic.
indicator("PI Confluence Engine v1.3", shorttitle="PICE v1.3", overlay=true, max_labels_count=500)

// === CORE SETTINGS ===
var string GRP_CORE = "⚙️ Core Settings"
timeframe = input.timeframe("", "Timeframe", group=GRP_CORE)
show_table = input.bool(true, "Show Dashboard", group=GRP_CORE)
show_ema = input.bool(true, "Show EMA Lines", group=GRP_CORE)

// === PHẦN 1: BẢNG ĐIỀU KHIỂN & CÀI ĐẶT ===

var string GRP_RANKING = "🏆 Xep Hang Tin Hieu"
long_A_threshold = input.float(4.0, "Nguong diem Long 'A'", group=GRP_RANKING)
long_A_star_threshold = input.float(6.0, "Nguong diem Long 'A⭐'", group=GRP_RANKING)
short_A_threshold = input.float(4.0, "Nguong diem Short 'A'", group=GRP_RANKING)
short_A_star_threshold = input.float(6.0, "Nguong diem Short 'A⭐'", group=GRP_RANKING)

var string GRP_VSA = "🎯 VSA Signals (Triggers)"
enableSpring = input.bool(true, "Spring", group=GRP_VSA, inline="s1")
spring_base_score = input.float(2.5, "", group=GRP_VSA, inline="s1")
enableUpthrust = input.bool(true, "Upthrust", group=GRP_VSA, inline="s2")
upthrust_base_score = input.float(2.5, "", group=GRP_VSA, inline="s2")
enableShakeout = input.bool(true, "Shakeout", group=GRP_VSA, inline="s3")
shakeout_base_score = input.float(2.2, "", group=GRP_VSA, inline="s3")
enableSOS = input.bool(true, "Sign of Strength", group=GRP_VSA, inline="s4")
sos_base_score = input.float(2.4, "", group=GRP_VSA, inline="s4")
enableSOW = input.bool(true, "Sign of Weakness", group=GRP_VSA, inline="s5")
sow_base_score = input.float(2.4, "", group=GRP_VSA, inline="s5")
vsa_lookback = input.int(12, "Do dai tim H/L", group=GRP_VSA)
vol_lookback = input.int(20, "Do dai tinh Vol TB", group=GRP_VSA)
vol_multiplier = input.float(1.8, "He so Vol Cao", group=GRP_VSA)

var string GRP_CONF = "📊 Yeu To Hoi Tu (Diem Cong)"
// Trend
trend_score = input.float(1.5, "Diem cho Trend (EMA Kep)", group=GRP_CONF)
emaFastLength = input.int(21, "  EMA Nhanh", group=GRP_CONF)
emaSlowLength = input.int(50, "  EMA Cham", group=GRP_CONF)
// MACD
macd_score = input.float(1.0, "Diem cho MACD", group=GRP_CONF)
fast_length = input.int(12, "  MACD Fast", group=GRP_CONF)
slow_length = input.int(26, "  MACD Slow", group=GRP_CONF)
signal_length = input.int(9, "  MACD Signal", group=GRP_CONF)
// RSI
rsi_score = input.float(1.0, "Diem cho RSI", group=GRP_CONF)
rsiLength = input.int(14, "  RSI Length", group=GRP_CONF)
rsi_bullish_level = input.int(55, "  Nguong RSI Bullish", group=GRP_CONF) // GW v1.2 FIX
rsi_bearish_level = input.int(45, "  Nguong RSI Bearish", group=GRP_CONF) // GW v1.2 FIX
// Stochastic
stoch_score = input.float(0.5, "Diem cho Stochastic", group=GRP_CONF)
stochLength = input.int(14, "  Stoch Length", group=GRP_CONF)
// OBV
obv_score = input.float(1.0, "Diem cho OBV", group=GRP_CONF)
obvLength = input.int(20, "  OBV EMA Length", group=GRP_CONF)

// === PHẦN 2: TÍNH TOÁN CÁC CHỈ BÁO CƠ BẢN ===

// VSA Bar Analysis
f_safeDivision(n, d) => d > 0.00001 ? n / d : na
f_analyzeBar() => 
    _range = high - low
    _avgVol = ta.sma(volume, vol_lookback)
    _isHighVol = volume > _avgVol * vol_multiplier
    _location = f_safeDivision(close - low, _range)
    [_isHighVol, nz(_location, 0.5)]

[isHighVolume, closeLocation] = f_analyzeBar()

// VSA Signal Triggers
// GW v1.2 NOTE: [1] ở đây là đúng. Nó lấy giá trị thấp nhất của vùng giá đã kết thúc ở cây nến TRƯỚC ĐÓ.
// Điều này là cần thiết để so sánh giá 'low' hiện tại với vùng giá cũ.
lowestLow = ta.lowest(low, vsa_lookback)[1]
highestHigh = ta.highest(high, vsa_lookback)[1]

isSpring = enableSpring and close > lowestLow and low < lowestLow and isHighVolume
isUpthrust = enableUpthrust and close < highestHigh and high > highestHigh and isHighVolume
isShakeout = enableShakeout and close < open and isHighVolume and closeLocation > 0.6
isSOS = enableSOS and close > open and isHighVolume and closeLocation > 0.7
isSOW = enableSOW and close < open and isHighVolume and closeLocation < 0.3

// Trend (Dual EMA)
fastEMA = ta.ema(close, emaFastLength)
slowEMA = ta.ema(close, emaSlowLength)
isTrendUp = fastEMA > slowEMA

// MACD
[macdLine, signalLine, histLine] = ta.macd(close, fast_length, slow_length, signal_length)
isMacdBullish = macdLine > signalLine and histLine > 0 and histLine > histLine[1]
isMacdBearish = macdLine < signalLine and histLine < 0 and histLine < histLine[1]

// RSI
rsi = ta.rsi(close, rsiLength)
isRsiBullish = rsi > rsi_bullish_level // GW v1.2 FIX
isRsiBearish = rsi < rsi_bearish_level // GW v1.2 FIX

// Stochastic
k = ta.sma(ta.stoch(close, high, low, stochLength), 3)
d = ta.sma(k, 3)
isStochBullish = k > d and k > k[1]
isStochBearish = k < d and k < k[1]

// OBV
obv = ta.obv
obvEma = ta.ema(obv, obvLength)
isObvBullish = obv > obvEma
isObvBearish = obv < obvEma

// === PHẦN 3: BỘ NÃO TỔNG HỢP (THE CONFLUENCE ENGINE) ===

// GW v1.2 FIX: Sửa lỗi khai báo biến. Không cần 'var' vì chúng ta gán lại giá trị mỗi bar.
float bullishScore = 0.0
float bearishScore = 0.0
string triggerText = ""

// Chỉ tính điểm khi có tín hiệu VSA kích hoạt
if isSpring or isShakeout or isSOS
    bullishScore += isSpring ? spring_base_score : 0.0
    bullishScore += isShakeout ? shakeout_base_score : 0.0
    bullishScore += isSOS ? sos_base_score : 0.0
    triggerText := isSpring ? "Spring" : isShakeout ? "Shakeout" : "SOS"
    bullishScore += isTrendUp ? trend_score : 0.0
    bullishScore += isMacdBullish ? macd_score : 0.0
    bullishScore += isRsiBullish ? rsi_score : 0.0
    bullishScore += isStochBullish ? stoch_score : 0.0
    bullishScore += isObvBullish ? obv_score : 0.0

if isUpthrust or isSOW
    bearishScore += isUpthrust ? upthrust_base_score : 0.0
    bearishScore += isSOW ? sow_base_score : 0.0
    triggerText := isUpthrust ? "Upthrust" : "SOW"
    bearishScore += not isTrendUp ? trend_score : 0.0
    bearishScore += isMacdBearish ? macd_score : 0.0
    bearishScore += isRsiBearish ? rsi_score : 0.0
    bearishScore += isStochBearish ? stoch_score : 0.0
    bearishScore += isObvBearish ? obv_score : 0.0

// === PHẦN 4: HIỂN THỊ TÍN HIỆU & UI ===

plot(fastEMA, "EMA Nhanh", color.new(color.aqua, 50))
plot(slowEMA, "EMA Cham", color.new(color.orange, 50))

f_createSignalLabel(isBullish, score) =>
    if isBullish and score >= long_A_threshold
        signalText = score >= long_A_star_threshold ? "L A⭐" : "L A"
        signalColor = score >= long_A_star_threshold ? color.yellow : color.green
        label.new(bar_index, low, signalText, yloc=yloc.belowbar, style=label.style_label_up, 
                  color=color.new(signalColor, 20), textcolor=color.white, size=size.small)
    if not isBullish and score >= short_A_threshold
        signalText = score >= short_A_star_threshold ? "S A⭐" : "S A"
        signalColor = score >= short_A_star_threshold ? color.yellow : color.red
        label.new(bar_index, high, signalText, yloc=yloc.abovebar, style=label.style_label_down, 
                  color=color.new(signalColor, 20), textcolor=color.white, size=size.small)

if bullishScore > 0
    f_createSignalLabel(true, bullishScore)
if bearishScore > 0
    f_createSignalLabel(false, bearishScore)

var table infoPanel = table.new(position.bottom_right, 2, 4, bgcolor=color.new(color.black, 70), border_width=1)
if barstate.islast
    table.cell(infoPanel, 0, 0, "CONFLUENCE", color.white, 120)
    table.cell(infoPanel, 1, 0, "STATUS", color.white, 120)
    table.cell(infoPanel, 0, 1, "Trend", color.white)
    table.cell(infoPanel, 1, 1, isTrendUp ? "Uptrend" : "Downtrend", text_color=isTrendUp ? color.green : color.red)
    table.cell(infoPanel, 0, 2, "Trigger", color.white)
    table.cell(infoPanel, 1, 2, triggerText, text_color=color.yellow)
    table.cell(infoPanel, 0, 3, "Score (B/S)", color.white)
    scoreText = str.tostring(bullishScore, "#.#") + " / " + str.tostring(bearishScore, "#.#")
    bullColor = bullishScore > 0 ? color.new(color.green, 100 - math.min(90, int(bullishScore * 10))) : na
    bearColor = bearishScore > 0 ? color.new(color.red, 100 - math.min(90, int(bearishScore * 10))) : na
    finalColor = bullishScore > bearishScore ? bullColor : bearColor
    table.cell(infoPanel, 1, 3, scoreText, bgcolor=finalColor, text_color=color.white)

// === IMPROVED VSA ANALYSIS ===
f_analyzeBar(vol_threshold) =>
    _range = high - low
    _body = math.abs(close - open)
    _upper_wick = high - math.max(open, close)
    _lower_wick = math.min(open, close) - low
    _avgVol = vol_ma_type == "SMA" ? ta.sma(volume, vol_lookback) : ta.ema(volume, vol_lookback)
    
    _isValidVol = volume > vol_min_threshold
    _isHighVol = _isValidVol and volume > _avgVol * vol_multiplier
    _isVerySigVol = _isValidVol and volume > _avgVol * vol_spike_mult
    
    _closeLocation = f_safeDivision(close - low, _range)
    _bodyToRange = f_safeDivision(_body, _range)
    
    [_isHighVol, _isVerySigVol, _closeLocation, _bodyToRange]

// === SCORE CALCULATION FUNCTION ===
f_calculateScore(triggers, conditions, scores) =>
    float final_score = 0.0
    string active_triggers = ""
    
    for [trigger, base_score] in triggers
        if trigger
            final_score += base_score
            active_triggers += (active_triggers == "" ? "" : ", ") + str.tostring(base_score)
    
    for [i] = 0 to array.size(conditions) - 1
        if conditions[i]
            final_score += scores[i]
            
    [final_score, active_triggers]

// === ENHANCED DASHBOARD ===
f_createDashboard() =>
    var table panel = table.new(position.bottom_right, 3, 5, bgcolor=color.new(color.black, 70))
    
    if barstate.islast
        // Header
        table.cell(panel, 0, 0, "METRIC", bgcolor=color.new(color.gray, 50))
        table.cell(panel, 1, 0, "VALUE", bgcolor=color.new(color.gray, 50))
        table.cell(panel, 2, 0, "SCORE", bgcolor=color.new(color.gray, 50))
        
        // Trend
        table.cell(panel, 0, 1, "Trend")
        table.cell(panel, 1, 1, isTrendUp ? "↗️ UP" : "↘️ DOWN")
        table.cell(panel, 2, 1, str.tostring(trend_score))
        
        // Volume
        table.cell(panel, 0, 2, "Volume")
        table.cell(panel, 1, 2, isHighVolume ? "🔆 HIGH" : "NORMAL")
        
        // Signals
        table.cell(panel, 0, 3, "Signals")
        table.cell(panel, 1, 3, triggerText)
        
        // Final Score
        table.cell(panel, 0, 4, "Total Score")
        table.cell(panel, 1, 4, str.tostring(bullishScore))
        table.cell(panel, 2, 4, str.tostring(bearishScore))

// === FILTERS & ALERTS ===
var string GRP_FILTER = "🔍 Filters"
min_score = input.float(3.0, "Minimum Signal Score", group=GRP_FILTER)
require_vol_confirm = input.bool(true, "Require Volume Confirmation", group=GRP_FILTER)
require_trend_align = input.bool(true, "Require Trend Alignment", group=GRP_FILTER)

// Alert conditions
alertcondition(
    bullishScore >= long_A_threshold and 
    (not require_vol_confirm or isHighVolume) and 
    (not require_trend_align or isTrendUp),
    "Bullish Signal",
    "Score: {{bullishScore}}, Trigger: {{triggerText}}"
    )

// === PERFORMANCE OPTIMIZATIONS ===
var max_lookback = math.max(vsa_lookback, vol_lookback, emaSlowLength)
var label[] signalLabels = array.new_label()

// Cleanup old labels
if array.size(signalLabels) > 500
    label.delete(array.shift(signalLabels))

// Optimize calculations
if not na(close[max_lookback])
    // Your main calculations here
    [isHighVol, isVerySigVol, closeLocation, bodyToRange] = f_analyzeBar(vol_min_threshold)